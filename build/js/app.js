(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/Gavin/Documents/codes/pack/sil/app/app.js":[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _core = require('./core/core.module');

var _core2 = _interopRequireDefault(_core);

var _common = require('./common/common.module');

var _common2 = _interopRequireDefault(_common);

var _modules = require('./modules/modules.module');

var _modules2 = _interopRequireDefault(_modules);

require('./templates');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// window.$ = require('jquery');

_angular2.default.module('app', ['app.templates', _core2.default.name, _common2.default.name, _modules2.default.name]);

},{"./common/common.module":"/Users/Gavin/Documents/codes/pack/sil/app/common/common.module.js","./core/core.module":"/Users/Gavin/Documents/codes/pack/sil/app/core/core.module.js","./modules/modules.module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/modules.module.js","./templates":"/Users/Gavin/Documents/codes/pack/sil/app/templates.js","angular":"angular","jquery":"jquery"}],"/Users/Gavin/Documents/codes/pack/sil/app/common/base/base.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _base = require('./base.service');

var _base2 = _interopRequireDefault(_base);

var _baseList = require('./baseList.controller');

var _baseList2 = _interopRequireDefault(_baseList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.common.base', []).service('baseListCtrl', _baseList2.default).service('baseService', _base2.default);

},{"./base.service":"/Users/Gavin/Documents/codes/pack/sil/app/common/base/base.service.js","./baseList.controller":"/Users/Gavin/Documents/codes/pack/sil/app/common/base/baseList.controller.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/common/base/base.service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseService = function () {
  BaseService.$inject = ["$http", "httpHelper", "toastr"];
  function BaseService($http, httpHelper, toastr) {
    'ngInject';

    _classCallCheck(this, BaseService);

    this.$http = $http;
    this.httpHelper = httpHelper;
    this.toastr = toastr;

    this.urlPrefix = {
      // old
      //old: '/api/old/',

      // old group
      //group: '/api/group/'
    };
  }

  _createClass(BaseService, [{
    key: '_init',
    value: function _init() {

      this.baseInfo = window.pageConf.adminData;
    }
  }, {
    key: 'fetch',
    value: function fetch(type, method) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};


      return this._RESTfulFactory('get', type, method, params);
    }
  }, {
    key: 'fetchList',
    value: function fetchList(type, params) {

      return this.fetch(type, 'list', params);
    }
  }, {
    key: 'edit',
    value: function edit(type, id) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};


      return this._RESTfulFactory('put', type, id, params);
    }
  }, {
    key: 'add',
    value: function add(type, method) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};


      return this._RESTfulFactory('post', type, method, params);
    }
  }, {
    key: 'delete',
    value: function _delete(type, method) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};


      return this._RESTfulFactory('delete', type, method, params);
    }

    // Deprecated

  }, {
    key: 'getDetail',
    value: function getDetail(type, data) {

      this.httpHelper.blockUI.start();

      //this.fetch(type, 'list', params);

      console.log(type);
      var url = this.urlPrefix[type] + 'id';
      return this.$http.get(url).then(this.httpHelper.verify, this.httpHelper.error);
    }

    /**
     * RESTful http request factory function
     */

  }, {
    key: '_RESTfulFactory',
    value: function _RESTfulFactory(verb, type, method, params) {

      this.httpHelper.blockUI.start();

      var paramsName = ['post', 'put'].indexOf(verb) > -1 ? 'data' : 'params';

      return this.$http[verb](this._getUrl(type, method), _defineProperty({}, paramsName, params)).then(this.httpHelper.verify, this.httpHelper.error);
    }

    // TODO
    // fetchSearchList() {
    //   return $http.get('/api/old/searchOld', {params: data || {}}).then(httpHelper.verify,  httpHelper.error);
    // }

  }, {
    key: '_getUrl',
    value: function _getUrl(type, method) {

      return this.urlPrefix[type] ? this.urlPrefix[type] + '/' + method : '/api/' + type + '/' + method;
    }
  }, {
    key: 'notify',
    value: function notify(message) {
      var _this = this;

      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';


      return function () {
        _this.toastr[type](message);
      };
    }
  }]);

  return BaseService;
}();

exports.default = BaseService;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/base/baseList.controller.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseListCtrl = function () {
  function BaseListCtrl($injector, config) {
    _classCallCheck(this, BaseListCtrl);

    this.$stateParams = $injector.get('$stateParams');
    this.$location = $injector.get('$location');
    this.httpHelper = $injector.get('httpHelper');
    this.AreaService = $injector.get('AreaService');
    this.AppSettings = $injector.get('AppSettings');

    //this.xxx = $injector.get('xxx');

    this.areaList = this.AreaService.getList();
    this.statusList = this.AppSettings.statusList; // 状态
    this.oldTypeList = this.AppSettings.oldTypeList;
    this.oldStatusList = this.AppSettings.oldStatusList;
    this.pagination = this.AppSettings.pagination; // 分页

    this.filters = angular.extend({
      page: 1
    }, this.$stateParams, config.filters);
  }

  /**
   * 需在子Controller中调用此方法。
   * 若要重载此方法，应在重载方法中先调用super._init()
   *
   * opts: 参数配置
   *   numberKeys(Array): 来自url的请求参数将被从字符串转为整数
   */


  _createClass(BaseListCtrl, [{
    key: '_init',
    value: function _init(opts) {

      this.httpHelper.blockUI.start();

      if (!this._assertInvoke('_getParams', 'searchFun')) return;

      // 获取搜索参数
      this._getParams(opts);

      // 请求数据
      this.searchFun();
    }

    // 根据参数重新查询

  }, {
    key: 'reSearch',
    value: function reSearch() {

      this.$location.search(angular.merge({}, this.filters, {
        page: 1 // 改变状态后页码重置为1
      }));
    }

    /**
     * 分页事件（刷新页面，并根据请求参数重新筛选）
     */

  }, {
    key: 'pageChanged',
    value: function pageChanged() {
      this.$location.search(this.filters);
    }

    /**
     * 过滤掉空值请求参数（null, undefined等）
     * TODO: 以opts形式提供, 或放到baseService中
     */

  }, {
    key: 'filterNullFilter',
    value: function filterNullFilter(filters) {

      var tempFilter = angular.copy(filters);
      for (var i in tempFilter) {
        if (!tempFilter[i]) {
          delete tempFilter[i];
        }
      }

      return tempFilter;
    }
  }, {
    key: 'clearKeywordFilter',
    value: function clearKeywordFilter(data) {

      this.toggleFilter(angular.extend(data, {
        searchCol: null,
        searchType: null,
        keyword: null
      }));
    }
  }, {
    key: 'toggleFilter',
    value: function toggleFilter(filter) {

      this._setParams(filter, true);
    }

    /**
     * 设置查询参数到Controller
     *   data(Object): 查询参数
     *   isAutoRefresh(Boolean): 是否自动刷新页面
     */

  }, {
    key: '_setParams',
    value: function _setParams(data, isAutoRefresh) {

      for (var i in data) {
        if (this.filters[i] == data[i]) {
          this.filters[i] = undefined;
        } else {
          this.filters[i] = data[i];
        }
      }

      if (isAutoRefresh) this.reSearch();
    }

    /**
     * 从$stateParams中获取查询参数
     */

  }, {
    key: '_getParams',
    value: function _getParams(opts) {

      if (!opts) return;

      for (var i in this.filters) {
        if (this.$stateParams[i]) {
          this.filters[i] = opts.numberKeys.includes(i) ? +this.$stateParams[i] : this.$stateParams[i];
        }
      }
    }
  }, {
    key: 'remove',
    value: function remove(type, id, index) {

      var that = this;

      this.sweet.show({
        title: '确认删除这条数据吗？',
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        closeOnConfirm: true,
        imageUrl: '/dist/images/common/warning.png'
      }, function (sure) {
        if (sure) {
          // this.operationService.remove(type, id).then(function( res ){
          //     toastr.success('操作已完成！', '提示');
          //     that.list.splice(index,1);
          // });
        } else {
          return;
        }
      });
    }
  }, {
    key: '_assertInvoke',
    value: function _assertInvoke() {
      var _this = this;

      var success = true;

      for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
        funcs[_key] = arguments[_key];
      }

      funcs.forEach(function (func) {
        if (!_this[func]) {
          console.warn('There is no invoke ' + func + '() in controller');
          success = false;
          return;
        }
      });
      return success;
    }
  }]);

  return BaseListCtrl;
}();

exports.default = BaseListCtrl;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/common.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _base = require('./base/base.module');

var _base2 = _interopRequireDefault(_base);

var _components = require('./components/components.module');

var _components2 = _interopRequireDefault(_components);

var _directives = require('./directives/directives.module');

var _directives2 = _interopRequireDefault(_directives);

var _services = require('./services/services.module');

var _services2 = _interopRequireDefault(_services);

var _filters = require('./filters/filters.module');

var _filters2 = _interopRequireDefault(_filters);

var _regExpRule = require('./constants/regExpRule');

var _regExpRule2 = _interopRequireDefault(_regExpRule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.common', [_base2.default.name, _components2.default.name, _services2.default.name, _directives2.default.name, _filters2.default.name]).constant('mcRegExp', _regExpRule2.default);

},{"./base/base.module":"/Users/Gavin/Documents/codes/pack/sil/app/common/base/base.module.js","./components/components.module":"/Users/Gavin/Documents/codes/pack/sil/app/common/components/components.module.js","./constants/regExpRule":"/Users/Gavin/Documents/codes/pack/sil/app/common/constants/regExpRule.js","./directives/directives.module":"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/directives.module.js","./filters/filters.module":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/filters.module.js","./services/services.module":"/Users/Gavin/Documents/codes/pack/sil/app/common/services/services.module.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/common/components/back-top/back-top.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BackTopController = function BackTopController($scope, element, attrs, $window) {
    'ngInject';

    _classCallCheck(this, BackTopController);

    var $win = angular.element($window),
        $ele = angular.element(element);

    $win.scroll(function () {
        if ($win.scrollTop() <= 0) {
            $ele.fadeOut();
        } else {
            $ele.fadeIn();
        }
    });

    $ele.on('click', function () {
        $('html, body').animate({ scrollTop: 0 }, 'fast');
    });
};
BackTopController.$inject = ["$scope", "element", "attrs", "$window"];

var backTop = exports.backTop = {
    templateUrl: 'common/components/backTop/backTop.html',
    controller: BackTopController,
    bindings: {}
};

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/components/components.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _backTop = require('./back-top/back-top');

var _inlineNav = require('./inline-nav');

var _inlineNav2 = _interopRequireDefault(_inlineNav);

var _mcStep = require('./mc-step');

var _mcStep2 = _interopRequireDefault(_mcStep);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.common.components', []).component('backTop', _backTop.backTop).component('inlineNav', _inlineNav2.default).component('mcStep', _mcStep2.default);

;

},{"./back-top/back-top":"/Users/Gavin/Documents/codes/pack/sil/app/common/components/back-top/back-top.js","./inline-nav":"/Users/Gavin/Documents/codes/pack/sil/app/common/components/inline-nav/index.js","./mc-step":"/Users/Gavin/Documents/codes/pack/sil/app/common/components/mc-step/index.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/common/components/inline-nav/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _inlineNav = require('./inline-nav.ctrl');

var _inlineNav2 = _interopRequireDefault(_inlineNav);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var inlineNav = {
  templateUrl: 'common/components/inline-nav/inline-nav.html',
  controller: _inlineNav2.default,
  bindings: {
    navList: '<',
    btnList: '<',
    alias: '@',
    backBtn: '<'
  }
};

exports.default = inlineNav;

},{"./inline-nav.ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/common/components/inline-nav/inline-nav.ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/common/components/inline-nav/inline-nav.ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InlineNavController = function () {
  InlineNavController.$inject = ["$state", "$injector", "$resolve", "$scope"];
  function InlineNavController($state, $injector, $resolve, $scope) {
    'ngInject';

    var _this = this;

    _classCallCheck(this, InlineNavController);

    this.resolveObject = $scope.$parent.$resolve;

    if (this.alias && this.resolveObject[this.alias]) {
      this.extraInfo = this.resolveObject[this.alias];
    }
    // this.extraInfo = $injector.get(this.alias);

    //console.log($state.get());
    //console.log(this.navList);

    if (this.btnList) this.btnListBackup = [].concat(_toConsumableArray(this.btnList));
    if (this.navList) this.navListBackup = [].concat(_toConsumableArray(this.navList));

    $scope.$watch('$ctrl.extraInfo._initTag', function () {
      _this._init();
    });
  }

  _createClass(InlineNavController, [{
    key: '_init',
    value: function _init() {
      var _this2 = this;

      if (this.navListBackup) {
        this.navList = this.navListBackup.filter(function (item) {
          return _this2._filterHandle(item);
        });
      }
      if (this.btnListBackup && this.btnListBackup.length) {
        this.btnList = this.btnListBackup.filter(function (item) {
          return _this2._filterHandle(item);
        });
      }
    }
  }, {
    key: '_filterHandle',
    value: function _filterHandle(item) {
      if (item.expession) {
        if (this.extraInfo && Object.keys(this.extraInfo).length > 1) {
          return this.handleExp(this.extraInfo, item.expession);
        } else {
          return false;
        }
      }

      return true;
    }
  }, {
    key: 'handleExp',
    value: function handleExp(obj, exp) {

      var handler = new Function('with(' + JSON.stringify(obj) + '){return ' + exp + '}');

      return handler();
    }
  }, {
    key: 'handleClick',
    value: function handleClick(item, e) {
      if (item.clickExpession) {
        if (this.extraInfo && Object.keys(this.extraInfo).length > 1) {
          if (this.handleExp(this.extraInfo, item.clickExpession)) {
            item.clickHandler && item.clickHandler();

            e.preventDefault();
            return false;
          }
        } else {
          return true;
        }
      }

      return true;
    }
  }]);

  return InlineNavController;
}();

exports.default = InlineNavController;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/components/mc-step/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mcStepController = function mcStepController() {
  'ngInject';

  _classCallCheck(this, mcStepController);
};

exports.default = mcStepController;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/components/mc-step/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mcStep = {
  templateUrl: 'common/components/mc-step/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm',
  bindings: {
    stepList: '=',
    currentStep: '='
  }
};

exports.default = mcStep;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/common/components/mc-step/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/common/constants/regExpRule.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var expression = exports.expression = {
    required: function required(value) {
        return !!value;
    },
    requiredIfNeed: function requiredIfNeed(value, scope, element, attrs, param) {
        var obj = scope.$parent;
        var expression = param.split('|');
        // var arr = expression[0].split('.');
        var bool, determination;

        if (expression.length != 3 || !expression[0] || !/^(\s+)?[!=><]+(\s+)?$/.test(expression[1])) {
            return true;
        }

        //简化实现
        determination = new Function('return this && this.' + expression[0]).call(obj);

        bool = new Function('return ' + determination + expression[1] + expression[2])();

        if (bool) {
            return !!value;
        } else {
            return true;
        }
    },
    notNull: function notNull(value) {
        if (value || value === 0) {
            return true;
        }
        return false;
    },
    notBlank: function notBlank(val) {
        if (val === '') return false;else return true;
    },
    url: /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/,
    email: /^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/,
    number: function number(val) {
        if (val === '' || /\s/g.test(val)) return true;
        return (/^\d+$/.test(val)
        );
    },
    // 手机
    mobile: function mobile(val) {
        // 需要以这种方法写, 不然当它为空值时也会进行验证
        return val ? /^(13|14|15|17|18)\d{9}$/i.test(val) : true;
    },
    // 座机 (999)99999999 或 999-99999999 或 99999999999
    tel: /^((\(\d{2,3}\))|(\d{3}\-)|(\d{3}))?(\(0\d{2,3}\)|0\d{2,3}-)?[1-9]\d{6,7}(\-\d{1,4})?$/i,
    telOrMobile: function telOrMobile(value) {
        // 相同支持手机和座机
        return expression.mobile(value) || expression.tel.test(value);
    },
    noSpace: function noSpace(value, scope, element) {
        // angular-validation对文本夫域传来的值作了trim截取, 所以无法直接获知值的首尾是包含空格
        return !/\w*\s+\w*/g.test(element.val());
    },
    float: /^[-+]?[0-9]*\.?[0-9]+$/,
    minlength: function minlength(value, scope, element, attrs, param) {
        return value.length >= param;
    },
    maxlength: function maxlength(value, scope, element, attrs, param) {
        return value.length <= param;
    },
    min: function min(value, scope, element, attrs, param) {
        return parseFloat(value) >= parseFloat(param);
    },
    minNotEqual: function minNotEqual(value, scope, element, attrs, param) {
        return parseFloat(value) > parseFloat(param);
    },
    max: function max(value, scope, element, attrs, param) {
        return parseFloat(value) <= parseFloat(param);
    },
    range: function range(value, scope, element, attrs, param) {
        // 此处有坑，在判断并列条件的时候，会出现误判，故都转成数字在对比
        var arr = param.split('|');
        value = parseFloat(value);
        return value >= parseFloat(arr[0]) && value <= parseFloat(arr[1]);
    },
    cert: /^(\d{15}$|^\d{18}$|^\d{17}(\d|X|x))$/,
    displayCode: function displayCode(value) {
        if (value == "") {
            return true;
        }
        return !!(value.length == 4);
    },
    identity: function identity(str) {

        if (!str) {
            return true;
        }

        str = $.trim(str).toString();

        var transformatIdFrom15To18 = function transformatIdFrom15To18(idCardNo) {
            var v = new Array(2, 4, 8, 5, 10, 9, 7, 3, 6, 1, 2, 4, 8, 5, 10, 9, 7);
            var vs = "10X98765432";
            if (idCardNo == null || idCardNo.length != 15) {
                return "";
            }
            // 将15位的号码转换位17位
            var cardID17 = idCardNo.substring(0, 6) + "19" + idCardNo.substring(6);
            var N = 0;
            var R = -1;
            var T = '0'; // 储存最后一个数字
            var j = 0;
            var cardID18 = "";
            // 计数出第18位数字
            for (var i = 16; i >= 0; i--) {
                N += parseInt(cardID17.substring(i, i + 1)) * v[j];
                j++;
            }
            R = N % 11;
            T = vs.charAt(R);
            cardID18 = cardID17 + T;
            return cardID18;
        };

        if (str.length == 15) {
            str = transformatIdFrom15To18(str);
        }

        var iSum = 0,
            sId = str,
            aCity = {
            11: "北京", 12: "天津", 13: "河北", 14: "山西", 15: "内蒙古",
            21: "辽宁", 22: "吉林", 23: "黑龙江", 31: "上海", 32: "江苏",
            33: "浙江", 34: "安徽", 35: "福建", 36: "江西", 37: "山东",
            41: "河南", 42: "湖北", 43: "湖南", 44: "广东", 45: "广西",
            46: "海南", 50: "重庆", 51: "四川", 52: "贵州", 53: "云南",
            54: "西藏", 61: "陕西", 62: "甘肃", 63: "青海", 64: "宁夏",
            65: "新疆", 71: "台湾", 81: "香港", 82: "澳门", 91: "国外"
        };
        if (!/^\d{17}(\d|x)$/i.test(sId)) {
            return false;
        }
        sId = sId.replace(/x$/i, "a");
        //非法地区
        if (aCity[parseInt(sId.substr(0, 2), 10)] == null) {
            return false;
        }
        var sBirthday = sId.substr(6, 4) + "-" + Number(sId.substr(10, 2)) + "-" + Number(sId.substr(12, 2)),
            d = new Date(sBirthday.replace(/-/g, "/"));
        //非法生日
        if (sBirthday != d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate()) {
            return false;
        }
        for (var i = 17; i >= 0; i--) {
            iSum += Math.pow(2, i) % 11 * parseInt(sId.charAt(17 - i), 11);
        }
        if (iSum % 11 != 1) {
            return false;
        }
        return true;
    },
    relation: function relation(value) {
        return !!(value == 0 || value == 1 || value == 2 || value == 3);
    },
    account: /^[a-z|A-z|0-9|_]+$/,
    chinese: /^[\u4E00-\u9FA5]+$/,
    nonUnicode: function nonUnicode(value) {
        return !/[\u4E00-\u9FA5]|[\uFE30-\uFFA0]/gi.test(value);
    },
    digitalLetter: function digitalLetter(val) {
        if (val === '') return true;
        return (/^[A-Za-z0-9]+$/.test(val)
        );
    },
    decimalLimit: function decimalLimit(value, scope, element, attrs, param) {
        var reg = eval('/^\\d+(\\.\\d{1,' + param + '})?$/');
        return reg.test(value);
    },
    accountPwd: /^\S{6,20}$/,
    discount: function discount(val) {
        if (val == 10) {
            return true;
        }
        return (/^\d(\.\d)?$/.test(val)
        );
    }
};

var defaultMsg = exports.defaultMsg = {
    required: {
        error: '该项为必填项!',
        success: ' '
    },
    requiredIfNeed: {
        error: '该项为必填项!',
        success: ' '
    },
    notNull: {
        error: '该项为必填项!',
        success: ' '
    },
    url: {
        error: 'url格式不正确！',
        success: ' '
    },
    email: {
        error: 'email格式不正确！',
        success: ' '
    },
    number: {
        error: '数字格式不正确！',
        success: ' '
    },
    float: {
        error: '小数格式不正确！',
        success: ' '
    },
    minlength: {
        error: '内容长度不够！',
        success: ' '
    },
    maxlength: {
        error: '内容长度过长！',
        success: ' '
    },
    min: {
        error: '您的输入值小了',
        success: ' '
    },
    minNotEqual: {
        error: '您的输入值小了',
        success: ' '
    },
    max: {
        error: '您的输入值大了！',
        success: ' '
    },
    range: {
        error: '输入范围有误！',
        success: ' '
    },
    cert: {
        error: '身份证格式不对！',
        success: ' '
    },
    displayCode: {
        error: '手环编码为四位',
        success: ' '
    },
    identity: {
        error: '身份证格式不对！',
        success: ' '
    },
    relation: {
        error: '请选择亲属关系',
        success: ' '
    },
    mobile: {
        error: '手机格式不正确',
        success: ' '
    },
    telOrMobile: {
        error: '手机或座机号码不正确',
        success: ' '
    },
    noSpace: {
        error: '不能填写空白字符',
        success: ' '
    },
    account: {
        error: '格式只能输入字母数字下划线',
        success: ' '
    },
    chinese: {
        error: '请输入中文',
        success: ' '
    },
    nonUnicode: {
        error: '不能包含中文字符',
        success: ' '
    },
    digitalLetter: {
        error: '只能是数字或字母',
        success: ' '
    },
    notBlank: {
        error: '该项为必填项',
        success: ' '
    },
    decimalLimit: {
        error: '小数位数过长！',
        success: ' '
    },
    accountPwd: {
        error: '密码为6-20位字符',
        success: ''
    },
    discount: {
        error: '小数格式不正确!'
    }
};

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/directives.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _imgLazyLoad = require('./imgLazyLoad.directive');

var _imgLazyLoad2 = _interopRequireDefault(_imgLazyLoad);

var _keyEvent = require('./keyEvent.directive');

var _keyEvent2 = _interopRequireDefault(_keyEvent);

var _formEditable = require('./form-editable');

var _formEditable2 = _interopRequireDefault(_formEditable);

var _filterList = require('./filter-list');

var _filterList2 = _interopRequireDefault(_filterList);

var _resizable = require('./resizable.directive');

var _resizable2 = _interopRequireDefault(_resizable);

var _emptyTip = require('./emptyTip.directive');

var _emptyTip2 = _interopRequireDefault(_emptyTip);

var _mcBatchUploadVc = require('./mcBatchUploadVc');

var _mcBatchUploadVc2 = _interopRequireDefault(_mcBatchUploadVc);

var _mcBatchUploadUser = require('./mcBatchUploadUser');

var _mcBatchUploadUser2 = _interopRequireDefault(_mcBatchUploadUser);

var _mcBatchUploadBank = require('./mcBatchUploadBank');

var _mcBatchUploadBank2 = _interopRequireDefault(_mcBatchUploadBank);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.common.directives', [
  // echarts.name
]).directive('imgLazyLoad', _imgLazyLoad2.default).directive('keyEvent', _keyEvent2.default).directive('formEditable', _formEditable2.default).directive('filterList', _filterList2.default).directive('resizable', _resizable2.default).directive('emptyTip', _emptyTip2.default).directive('mcBatchUploadVc', _mcBatchUploadVc2.default).directive('mcBatchUploadUser', _mcBatchUploadUser2.default).directive('mcBatchUploadBank', _mcBatchUploadBank2.default);
// import echarts         from './echarts';

},{"./emptyTip.directive":"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/emptyTip.directive.js","./filter-list":"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/filter-list/index.js","./form-editable":"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/form-editable/index.js","./imgLazyLoad.directive":"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/imgLazyLoad.directive.js","./keyEvent.directive":"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/keyEvent.directive.js","./mcBatchUploadBank":"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/mcBatchUploadBank/index.js","./mcBatchUploadUser":"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/mcBatchUploadUser/index.js","./mcBatchUploadVc":"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/mcBatchUploadVc/index.js","./resizable.directive":"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/resizable.directive.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/emptyTip.directive.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = emptyListTipDirective;
/**
 * @description 当列表没有数据时，显示提示
 */
function emptyListTipDirective() {
    return {
        restrict: 'EA',
        template: '<div class="row text-center text-muted" style="padding: 50px 0;">{{message}}</div>',
        replace: true,
        link: function link(scope, element, attrs) {
            scope.message = attrs.message || '暂无数据 :-( ';
        }
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/filter-list/index.js":[function(require,module,exports){
'use strict';

FilterListDirective.$inject = ["$parse"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FilterListDirective;
/**
 * 列表页面的分类过滤
 */
function FilterListDirective($parse) {
  'ngInject';

  return {
    restrict: 'EA',
    scope: {
      list: '=',
      filters: '=',
      title: '@',
      ctrlName: '@',
      filterKey: '@',
      itemName: '@',
      itemId: '@',
      clazz: '@'
    },
    templateUrl: 'common/directives/filter-list/filter-list.html',
    replace: true,
    link: function postLink(scope, element, attrs) {

      var listCtrl = scope.$parent[scope.ctrlName || '$ctrl'];

      scope.clearKeywordFilter = function (val) {
        var params = {};
        params[scope.filterKey] = val;

        listCtrl.clearKeywordFilter.bind(listCtrl, params)();
      };
    }
  };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/form-editable/form-editable.ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FormEditableController;
function FormEditableController() {
  'ngInject';

  this.base = {
    $show: function $show() {
      if (this.$visible) {
        return;
      }

      this.$visible = true;
    },

    $hide: function $hide() {
      if (!this.$visible) {
        return;
      }
      this.$visible = false;
    },

    $cancel: function $cancel() {
      if (!this.$visible) {
        return;
      }

      // self hide
      this.$hide();
    },

    $submit: function $submit() {

      this.$onaftersave();
    }

  };

  return angular.extend({
    $visible: false,
    $waiting: false
  }, this.base);
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/form-editable/index.js":[function(require,module,exports){
'use strict';

FormEditable.$inject = ["$parse"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FormEditable;

var _formEditable = require('./form-editable.ctrl');

var _formEditable2 = _interopRequireDefault(_formEditable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function FormEditable($parse) {
  'ngInject';

  return {
    restrict: 'A',
    require: ['form', 'formEditable'],
    controller: _formEditable2.default,
    compile: function compile() {
      return {
        pre: function pre(scope, elem, attrs, ctrl) {
          var form = ctrl[0],
              submitBtn = angular.element(elem).find('[type=submit]');

          angular.extend(form, ctrl[1]);

          //console.log(form);
        },

        post: function post(scope, elem, attrs, ctrl) {
          var eForm = ctrl[1];
          //console.log(eForm)

          // onbeforesave, onaftersave
          if (!attrs.ngSubmit && !attrs.submit) {

            if (attrs.onaftersave) {
              eForm.$onaftersave = function () {
                return $parse(attrs.onaftersave)(scope, { $data: eForm.$data });
              };
            }

            elem.bind('submit', function (event) {
              console.log('submit');
              event.preventDefault();
              scope.$apply(function () {
                eForm.$submit();
              });
            });
          }
        }
      };
    }
  };
}

},{"./form-editable.ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/form-editable/form-editable.ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/imgLazyLoad.directive.js":[function(require,module,exports){
'use strict';

imgLazyLoad.$inject = ["imgPreLoadService", "$timeout"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imgLazyLoad;
/**
 * @description 如果原图加载失败，则加载默认图片
 * @example
 * <img img-lazy-load avatar-id="{{item.avatar}}" class="avatar"/>
 */
function imgLazyLoad(imgPreLoadService, $timeout) {
  'ngInject';

  return {
    restrict: 'A',
    scope: {
      avatar: '@',
      avatarId: '@'
    },
    link: function link(scope, element, attrs) {

      var baseUrl = 'http://static.maimai100.cn/avatar/';

      if (scope.avatar) {
        scope.$watch('avatar', function (val) {
          return setUrl(val);
        });
      } else if (scope.avatarId) {
        scope.$watch('avatarId', function (val) {
          return setUrl(baseUrl + val);
        });
      } else {
        setUrl(attrs.default);
      }

      function setUrl(url) {
        if (!url || url === baseUrl) return;

        imgPreLoadService(url).then(function () {
          $timeout(function () {
            $(element).attr('src', '/dist/images/common/blank.gif').css({
              'background-image': 'url("' + url + '")',
              'background-size': 'cover'
            });
            $(element).fadeIn();
          });
        }, function (err) {
          $(element).css({
            'background-image': 'url("http://static.maimai100.cn/avatar/man.png")',
            'background-size': 'cover'
          });
        });
      }
    }
  };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/keyEvent.directive.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = keyEvent;
/**
 * @description 键盘事件监听和执行
 * @property {Number} code 所敲击的某个键的keyCode, 如果要监听回车键，设置为13即可
 * @example
 * <input ng-model="keyword" type="text" code="13" key-event="searchByKeyword(keyword);">
 */
function keyEvent() {

  return {
    restrict: 'A',
    link: function link($scope, $element, $attrs) {
      $element.bind('keypress', function (event) {
        var keyCode = event.which || event.keyCode;

        if (keyCode == $attrs.code) {
          $scope.$apply(function () {
            return $scope.$eval($attrs.keyEvent, { $event: event });
          });

          event.preventDefault();
        }
      });
    }
  };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/mcBatchUploadBank/index.js":[function(require,module,exports){
'use strict';

batchUploadDevice.$inject = ["$uibModal", "$parse", "$timeout"];
batchUploadFileCtrl.$inject = ["$location", "$uibModal", "$uibModalInstance", "$rootScope", "$scope", "$state", "$timeout", "ApiMap", "toastr", "options"];
ErrorListCtrl.$inject = ["$uibModalInstance", "info"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = batchUploadDevice;
function batchUploadDevice($uibModal, $parse, $timeout) {
    'ngInject';

    return {
        restrict: 'EA',
        template: '<div class="hide"></div>',
        //replace: true,
        link: function link(scope, element, attrs) {

            var unbind = scope.$on("batchUploadBank", function (event) {
                var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                Dropzone.autoDiscover = false;

                $uibModal.open({
                    animation: true,
                    templateUrl: 'common/directives/mcBatchUploadBank/template.html',
                    controller: batchUploadFileCtrl,
                    controllerAs: 'vm',
                    size: "",
                    resolve: {
                        options: function options() {
                            return _options;
                        }
                    }
                }).result.then(function () {}, function () {});
            });
            scope.$on('$destroy', unbind);
        }
    };
}

function batchUploadFileCtrl($location, $uibModal, $uibModalInstance, $rootScope, $scope, $state, $timeout, ApiMap, toastr, options) {
    'ngInject';

    var vm = this;

    var id = '',
        params = '';

    vm.download_url = ApiMap.bank.downloadTemplate;

    var url = ApiMap.bank.import;

    angular.extend(vm, {
        uploadFile: uploadFile,
        //pensionArea: window.pageConf.areaList,
        //pensionInfo: window.pageConf.pensionInfo,
        dropzoneConfig: {
            paramName: options.paramName || 'file',
            headers: { extra: $rootScope.AUTHORIZATION_TOKEN },
            url: url,
            method: 'post',
            maxFilesize: 50,
            maxFiles: 2,
            dictFileTooBig: '文件大小不能超过50M',
            uploadMultiple: false,
            autoProcessQueue: true,
            acceptedFiles: 'application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            addedfile: function addedfile(file) {
                $('#upload_button').attr('disabled', 'disabled').text('上传中');
            },
            success: function success(file, data) {
                $rootScope.imgUploadng = false;
                this.removeFile(file);
                $('#upload_button').removeAttr('disabled').text('上传');

                console.log(data);
                if (data.code == 0) {
                    if (data.data.errors.length > 0) {
                        // toastr.error(data.data);
                        vm.errorList = data.data.errors;
                        showErrorList(data.data);
                        // $modalInstance.close();
                    } else {
                        toastr.success('添加成功');
                    }

                    if (data.data.successCount > 0) {
                        $state.reload();
                    }
                } else {
                    toastr.error(data.info);
                }

                $uibModalInstance.close();
            }
        },
        errorList: null
    });

    function showErrorList(data) {
        $uibModal.open({
            animation: true,
            templateUrl: 'common/directives/mcBatchUploadBank/error.html',
            controller: ErrorListCtrl,
            controllerAs: 'vm',
            size: "",
            resolve: {
                info: function info() {
                    return data;
                }
            }
        }).result.then(function () {}, function () {});
    }

    // 触发上传
    function uploadFile(e) {
        e.preventDefault();
        $timeout(function () {
            $(e.target).siblings('.dropzone').trigger('click');
        });
    }
}

function ErrorListCtrl($uibModalInstance, info) {
    'ngInject';

    var error = info.errors;
    if (error) {
        error = error.filter(function (item) {
            return item.data[0] !== null;
        });
    } else {
        error = [];
    }

    this.errorList = error;
    this.count = info.successCount;

    this.cancel = function () {
        $uibModalInstance.close();
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/mcBatchUploadUser/index.js":[function(require,module,exports){
'use strict';

batchUploadDevice.$inject = ["$uibModal", "$parse", "$timeout"];
batchUploadFileCtrl.$inject = ["$location", "$uibModal", "$uibModalInstance", "$rootScope", "$scope", "$state", "$timeout", "ApiMap", "toastr", "options"];
ErrorListCtrl.$inject = ["$uibModalInstance", "info"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = batchUploadDevice;
function batchUploadDevice($uibModal, $parse, $timeout) {
    'ngInject';

    return {
        restrict: 'EA',
        template: '<div class="hide"></div>',
        //replace: true,
        link: function link(scope, element, attrs) {

            var unbind = scope.$on("batchUploadUser", function (event) {
                var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                Dropzone.autoDiscover = false;

                $uibModal.open({
                    animation: true,
                    templateUrl: 'common/directives/mcBatchUploadUser/template.html',
                    controller: batchUploadFileCtrl,
                    controllerAs: 'vm',
                    size: "",
                    resolve: {
                        options: function options() {
                            return _options;
                        }
                    }
                }).result.then(function () {}, function () {});
            });
            scope.$on('$destroy', unbind);
        }
    };
}

function batchUploadFileCtrl($location, $uibModal, $uibModalInstance, $rootScope, $scope, $state, $timeout, ApiMap, toastr, options) {
    'ngInject';

    var vm = this;

    var id = '',
        params = '';

    vm.download_url = ApiMap.account.downloadTemplate;

    var url = ApiMap.account.import;

    angular.extend(vm, {
        uploadFile: uploadFile,
        //pensionArea: window.pageConf.areaList,
        //pensionInfo: window.pageConf.pensionInfo,
        dropzoneConfig: {
            paramName: options.paramName || 'file',
            headers: { extra: $rootScope.AUTHORIZATION_TOKEN },
            url: url,
            method: 'post',
            maxFilesize: 50,
            maxFiles: 2,
            dictFileTooBig: '文件大小不能超过50M',
            uploadMultiple: false,
            autoProcessQueue: true,
            acceptedFiles: 'application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            addedfile: function addedfile(file) {
                $('#upload_button').attr('disabled', 'disabled').text('上传中');
            },
            success: function success(file, data) {
                $rootScope.imgUploadng = false;
                this.removeFile(file);
                $('#upload_button').removeAttr('disabled').text('上传');

                console.log(data);
                if (data.code == 0) {
                    if (data.data.errors.length > 0) {
                        // toastr.error(data.data);
                        vm.errorList = data.data.errors;
                        showErrorList(data.data);
                    } else {
                        toastr.success('添加成功');
                        $state.reload();
                    }
                } else {
                    toastr.error(data.info);
                }

                //$modalInstance.close();
            }
        }
    });

    function showErrorList(data) {
        $uibModal.open({
            animation: true,
            templateUrl: 'common/directives/mcBatchUploadUser/error.html',
            controller: ErrorListCtrl,
            controllerAs: 'vm',
            size: "",
            resolve: {
                info: function info() {
                    return data;
                }
            }
        }).result.then(function () {}, function () {});
    }

    // 触发上传
    function uploadFile(e) {
        e.preventDefault();
        $timeout(function () {
            $(e.target).siblings('.dropzone').trigger('click');
        });
    }
}

function ErrorListCtrl($uibModalInstance, info) {
    'ngInject';

    var error = info.errors;
    if (error) {
        error = error.filter(function (item) {
            return item.data[0] !== null;
        });
    } else {
        error = [];
    }

    this.errorList = error;
    this.count = info.successCount;

    this.cancel = function () {
        $uibModalInstance.close();
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/mcBatchUploadVc/index.js":[function(require,module,exports){
'use strict';

batchUploadDevice.$inject = ["$uibModal", "$parse", "$timeout"];
batchUploadFileCtrl.$inject = ["$location", "$uibModal", "$uibModalInstance", "$rootScope", "$scope", "$state", "$timeout", "ApiMap", "toastr", "options"];
ErrorListCtrl.$inject = ["$uibModalInstance", "info"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = batchUploadDevice;
function batchUploadDevice($uibModal, $parse, $timeout) {
    'ngInject';

    return {
        restrict: 'EA',
        template: '<div class="hide"></div>',
        //replace: true,
        link: function link(scope, element, attrs) {

            var unbind = scope.$on("batchUploadVc", function (event) {
                var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                Dropzone.autoDiscover = false;

                $uibModal.open({
                    animation: true,
                    templateUrl: 'common/directives/mcBatchUploadVc/template.html',
                    controller: batchUploadFileCtrl,
                    controllerAs: 'vm',
                    size: "",
                    resolve: {
                        options: function options() {
                            return _options;
                        }
                    }
                }).result.then(function () {}, function () {});
            });
            scope.$on('$destroy', unbind);
        }
    };
}

function batchUploadFileCtrl($location, $uibModal, $uibModalInstance, $rootScope, $scope, $state, $timeout, ApiMap, toastr, options) {
    'ngInject';

    var vm = this;

    var id = '',
        params = '';

    vm.download_url = ApiMap.investment.downloadTemplate;

    var url = ApiMap.investment.import;

    angular.extend(vm, {
        uploadFile: uploadFile,
        //pensionArea: window.pageConf.areaList,
        //pensionInfo: window.pageConf.pensionInfo,
        dropzoneConfig: {
            paramName: options.paramName || 'file',
            headers: { extra: $rootScope.AUTHORIZATION_TOKEN },
            url: url,
            method: 'post',
            maxFilesize: 50,
            maxFiles: 2,
            dictFileTooBig: '文件大小不能超过50M',
            uploadMultiple: false,
            autoProcessQueue: true,
            acceptedFiles: 'application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            addedfile: function addedfile(file) {
                $('#upload_button').attr('disabled', 'disabled').text('上传中');
            },
            success: function success(file, data) {
                $rootScope.imgUploadng = false;
                this.removeFile(file);
                $('#upload_button').removeAttr('disabled').text('上传');

                console.log(data);
                if (data.code == 0) {
                    if (data.data.errors.length > 0) {
                        // toastr.error(data.data);
                        vm.errorList = data.data.errors;
                        showErrorList(data.data);
                        // $modalInstance.close();
                    } else {
                        toastr.success('添加成功');
                    }

                    if (data.data.successCount > 0) {
                        $state.reload();
                    }
                } else {
                    toastr.error(data.info);
                }

                $uibModalInstance.close();
            }
        },
        errorList: null
    });

    function showErrorList(data) {
        $uibModal.open({
            animation: true,
            templateUrl: 'common/directives/mcBatchUploadVc/error.html',
            controller: ErrorListCtrl,
            controllerAs: 'vm',
            size: "",
            resolve: {
                info: function info() {
                    return data;
                }
            }
        }).result.then(function () {}, function () {});
    }

    // 触发上传
    function uploadFile(e) {
        e.preventDefault();
        $timeout(function () {
            $(e.target).siblings('.dropzone').trigger('click');
        });
    }
}

function ErrorListCtrl($uibModalInstance, info) {
    'ngInject';

    var error = info.errors;
    if (error) {
        error = error.filter(function (item) {
            return item.data[0] !== null;
        });
    } else {
        error = [];
    }

    this.errorList = error;
    this.count = info.successCount;

    this.cancel = function () {
        $uibModalInstance.close();
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/directives/resizable.directive.js":[function(require,module,exports){
'use strict';

resizable.$inject = ["$window", "$parse"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resizable;
/**
 * 让指定元素自适应
 * 参数:
 *  subWidth:
 *  parent: （可选）是否向上查找target指定的元素。依赖target属性。
 *  target: （可选）要查找的自适应的目标元素选择器。若没有指定target，则以指令当前元素为target。
 *
 * 示例:
 *   <div class="modal-body" resizable="{subWidth: 135, parent: true, target: '.modal-dialog'}"> ... <div>
 */
function resizable($window, $parse) {
  'ngInject';

  return {
    restrict: 'A',
    scope: {},
    link: function link(scope, element, attrs) {

      var opts = $parse(attrs.resizable)(scope);
      var winWidth = $window.innerWidth;

      var $target = opts.target ? angular.element(element)[opts.parent ? 'parents' : 'find'](opts.target) : angular.element(element);

      function onResize(isFirst) {
        winWidth = $window.innerWidth;
        $target.css('width', winWidth - getScrollbarWidth() - opts.subWidth);

        if (!isFirst) scope.$digest();
      }

      onResize(true); // resize on first

      angular.element($window).on('resize', onResize);

      scope.$on('$destroy', function () {
        angular.element($window).off('resize', onResize);
      });
    }
  };
}

function getScrollbarWidth() {
  // Create the measurement node
  var scrollDiv = document.createElement("div");
  scrollDiv.style.overflow = 'scroll';
  document.body.appendChild(scrollDiv);

  // Get the scrollbar width
  var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;

  // Delete the DIV
  document.body.removeChild(scrollDiv);

  return scrollbarWidth;
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/addressFormat.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = addressFormat;
function addressFormat() {

    return function (str) {
        var regx = /-\d+\;/;
        return str.split(regx).join('');
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/dayTime.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = dayTime;
function dayTime() {

    return function (time) {

        var h = Math.floor(time / 36000);
        var m = time % 3600 / 60;
        h = h > 9 ? h : '0' + h;
        m = m > 9 ? m : '0' + m;

        return h + ':' + m;
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/diseaseHistory.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = diseaseHistory;
function diseaseHistory() {

    return function (arr) {

        var disease_history = "";

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var item = _step.value;

                disease_history += item.name + '  ';
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return disease_history;
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/filters.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _orderSource = require('./orderSource');

var _orderSource2 = _interopRequireDefault(_orderSource);

var _oldType = require('./oldType');

var _oldType2 = _interopRequireDefault(_oldType);

var _serviceType = require('./serviceType');

var _serviceType2 = _interopRequireDefault(_serviceType);

var _payWay = require('./payWay');

var _payWay2 = _interopRequireDefault(_payWay);

var _serviceWay = require('./serviceWay');

var _serviceWay2 = _interopRequireDefault(_serviceWay);

var _diseaseHistory = require('./diseaseHistory');

var _diseaseHistory2 = _interopRequireDefault(_diseaseHistory);

var _orderStatus = require('./orderStatus');

var _orderStatus2 = _interopRequireDefault(_orderStatus);

var _dayTime = require('./dayTime');

var _dayTime2 = _interopRequireDefault(_dayTime);

var _modeId = require('./modeId');

var _modeId2 = _interopRequireDefault(_modeId);

var _addressFormat = require('./addressFormat');

var _addressFormat2 = _interopRequireDefault(_addressFormat);

var _timeFormat = require('./timeFormat');

var _timeFormat2 = _interopRequireDefault(_timeFormat);

var _fix = require('./fix');

var _fix2 = _interopRequireDefault(_fix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.common.filters', []).filter('orderSource', _orderSource2.default).filter('oldType', _oldType2.default).filter('serviceType', _serviceType2.default).filter('payWay', _payWay2.default).filter('serviceWay', _serviceWay2.default).filter('diseaseHistory', _diseaseHistory2.default).filter('orderStatus', _orderStatus2.default).filter('dayTime', _dayTime2.default).filter('modeId', _modeId2.default).filter('addressFormat', _addressFormat2.default).filter('timeFormat', _timeFormat2.default).filter('fix', _fix2.default);

},{"./addressFormat":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/addressFormat.js","./dayTime":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/dayTime.js","./diseaseHistory":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/diseaseHistory.js","./fix":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/fix.js","./modeId":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/modeId.js","./oldType":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/oldType.js","./orderSource":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/orderSource.js","./orderStatus":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/orderStatus.js","./payWay":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/payWay.js","./serviceType":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/serviceType.js","./serviceWay":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/serviceWay.js","./timeFormat":"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/timeFormat.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/fix.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = fix;
function fix() {

    return function (value, num) {

        !num && (num = 2);
        return typeof value == 'number' ? value.toFixed(num) : '';
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/modeId.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = modeId;
function modeId() {

  var modeList = pageConf.modeList;

  return function (mode_id) {
    var mode = modeList.filter(function (item) {
      return item.mode_id == mode_id;
    });
    return mode.length ? mode[0].name : mode_id;
  };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/oldType.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = oldType;
function oldType() {
  return function (type) {
    var old_type_name = "";
    switch (type) {
      case 2:
        old_type_name = '潜在会员';
        break;
      case 3:
        old_type_name = '全托会员';
        break;
      case 4:
        old_type_name = '日托会员';
        break;
      case 5:
        old_type_name = '普通会员';
      default:
        console.warn('invalid old_type');
    }
    return old_type_name;
  };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/orderSource.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = orderSource;
function orderSource() {
    return function (source) {
        var order_source_name = "";
        switch (source) {
            case 1:
                order_source_name = '后台';
                break;
            case 2:
                order_source_name = 'pad端';
                break;
            case 3:
                order_source_name = '子女端';
                break;
            default:
                order_source_name = '长者端';
        }
        return order_source_name;
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/orderStatus.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = orderStatus;
function orderStatus() {
    return function (status) {
        var status_name = "";
        switch (status) {
            case 0:
                status_name = '已预约';
                break;
            case 10:
                status_name = '已确认';
                break;
            case 50:
                status_name = '已完成';
                break;
            case 99:
                status_name = '已付款';
                break;
            default:
                status_name = '已取消';
        }
        return status_name;
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/payWay.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = payWay;
function payWay() {
    return function (way) {
        var pay_way_name = "";
        switch (way) {
            case 1:
                pay_way_name = '现金';
                break;
            case 2:
                pay_way_name = '刷卡';
                break;
            case 0:
                pay_way_name = '无';
                break;
            default:
                pay_way_name = '部分现金';
        }
        return pay_way_name;
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/serviceType.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = serviceType;
function serviceType() {
    return function (type) {
        var service_type_name = "";
        switch (type) {
            case 1:
                service_type_name = '上门';
                break;
            case 2:
                service_type_name = '到店';
                break;
            case 3:
                service_type_name = '上门，到店';
                break;
            default:
                service_type_name = '其它';
        }
        return service_type_name;
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/serviceWay.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = serviceWay;
function serviceWay() {
    return function (way) {
        var way_name = "";
        switch (way) {
            case 1:
                way_name = '上门';
                break;
            case 2:
                way_name = '到店';
                break;
            default:
                way_name = '其它';
        }
        return way_name;
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/filters/timeFormat.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = tiemFormat;
function tiemFormat() {

    return function (time) {

        return moment(time).format('YYYY-MM-DD HH:mm:ss');
    };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/services/accessControl.service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var c_package = {};

var AccessControlService = function () {
    function AccessControlService() {
        'ngInject';

        _classCallCheck(this, AccessControlService);
    }

    _createClass(AccessControlService, [{
        key: 'getCond',
        value: function getCond() {
            return c_package;
        }
    }]);

    return AccessControlService;
}();

exports.default = AccessControlService;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/services/config.service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  Service.$inject = ["$http", "httpHelper", "$rootScope", "$state", "ApiMap"];
  function Service($http, httpHelper, $rootScope, $state, ApiMap) {
    'ngInject';

    _classCallCheck(this, Service);

    this._http = $http;
    // this.$q = $q;
    this._httpHelper = httpHelper;

    this._api = ApiMap.config;
    this._apiMap = ApiMap;

    this._rootScope = $rootScope;
    this._state = $state;
  }

  _createClass(Service, [{
    key: 'list',
    value: function list(params) {

      this._httpHelper.blockUI.start();

      return this._http.get(this._api.list, { params: params }).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'set',
    value: function set(data) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.set, data).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'get',
    value: function get(key, params) {

      this._httpHelper.blockUI.start();

      return this._http.get(this._api.get.replace(/\{key\}/, key), { params: params }).then(this._httpHelper.verify, this._httpHelper.error);
    }

    // setSpecial(data) {

    //   this._httpHelper.blockUI.start();

    //   return this._http.post(this._api.setSpecial, data).then(this._httpHelper.verify, this._httpHelper.error);
    // }

  }, {
    key: 'getRoleList',
    value: function getRoleList() {
      this._httpHelper.blockUI.start();

      return this._http.get(this._api.roleList).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }]);

  return Service;
}();

exports.default = Service;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/services/district.service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * 腾讯行政区划API
 * http://lbs.qq.com/webservice_v1/guide-region.html
 */
var DistrictService = function () {
  DistrictService.$inject = ["$http", "$q"];
  function DistrictService($http, $q) {
    'ngInject';

    _classCallCheck(this, DistrictService);

    this._q = $q;
    this._http = $http;
    this.url = '//apis.map.qq.com/ws/district/v1/';
    this.opts = {
      key: 'ZAUBZ-4OG3J-ZVTFF-F7NED-PHMJT-DZBYG',
      output: 'jsonp',
      callback: 'district_cb'
    };
  }

  _createClass(DistrictService, [{
    key: '_prev',
    value: function _prev() {
      var deferred = this._q.defer();
      window.district_cb = function (res) {
        // TODO 加loading, 避免地址没加载完
        // httpHelper.blockUI.stop();
        deferred.resolve(res.result[0]);
      };

      return deferred;
    }

    // --------- method --------------

  }, {
    key: 'list',
    value: function list() {

      var deferred = this._prev();

      this._http.jsonp(this.url + 'list', { params: this.opts });

      return deferred.promise;
    }
  }, {
    key: 'getchildren',
    value: function getchildren(id) {

      var deferred = this._prev();
      var params = _extends({}, this.opts, { id: id });

      this._http.jsonp(this.url + 'getchildren', { params: params });

      return deferred.promise;
    }
  }, {
    key: 'format',
    value: function format(data) {
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

      if (data === void 0) {
        return void 0;
      } else if (typeof data == 'string') {
        var regx = void 0,
            match = void 0,
            result = void 0;

        var reg = /^(.*)\-(\d*)$/;

        var addressArray = data.split(';');
        var length = addressArray.length;

        if (length > 0) {
          result = {
            address: addressArray[length - 1]
          };
        }

        if (length > 1 && (match = addressArray[0].match(reg))) {
          result.province = {
            fullname: match[1],
            id: match[2]
          };
        }

        if (length > 2 && (match = addressArray[1].match(reg))) {
          result.city = {
            fullname: match[1],
            id: match[2]
          };
        }

        if (length > 3 && (match = addressArray[2].match(reg))) {
          result.district = {
            fullname: match[1],
            id: match[2]
          };
        }

        // if(level == 2) {
        //   regx = /^(.*)\-(\d*)\;(.*)\-(\d*)\;(.*)$/;
        // } else {
        //   regx = /^(.*)\-(\d*)\;(.*)\-(\d*)\;(.*)\-(\d*)\;(.*)$/;
        // }

        // match = data.match(regx);

        // if(match) {

        //   result = {
        //     province: {
        //       fullname: match[1],
        //       id: match[2]
        //     },
        //     city: {
        //       fullname: match[3],
        //       id: match[4]
        //     }
        //   }

        //   if(level == 2) {
        //     result.address = match[5];
        //   } else {
        //     result.district = {
        //       fullname: match[5],
        //       id: match[6]
        //     };

        //     result.address = match[7];
        //   }
        // }

        return result;
      } else if (data.address) {
        var string = '';

        if (data.province) {
          string = '' + string + data.province.fullname + '-' + data.province.id + ';';

          if (data.city) {
            string = '' + string + data.city.fullname + '-' + data.city.id + ';';

            if (data.district) {
              string = '' + string + data.district.fullname + '-' + data.district.id + ';';
            }
          }
        }

        return '' + string + data.address;
      }
    }
  }]);

  return DistrictService;
}();

exports.default = DistrictService;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/services/profile.service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProfileService = function () {
    ProfileService.$inject = ["$http", "httpHelper", "AppSettings", "ApiMap", "ConfigService"];
    function ProfileService($http, httpHelper, AppSettings, ApiMap, ConfigService) {
        'ngInject';

        _classCallCheck(this, ProfileService);

        this._http = $http;
        // this.$q = $q;
        this._httpHelper = httpHelper;

        this._api = ApiMap.person;
        this._apiMap = ApiMap;

        this.accessKey = AppSettings.accessKey;

        this._configService = ConfigService;

        this.info = {
            name: '亲',
            avatar: '/images/common/man.png'
        };

        this.roleList = [];

        this.user_id = localStorage.getItem('SIL_UID') || 0;

        this.access = {};

        if (this.user_id) {
            this.get({ id: this.user_id });
        }

        this._getRoleList();
    }

    _createClass(ProfileService, [{
        key: 'getRoleList',
        value: function getRoleList() {
            return this.roleList;
        }
    }, {
        key: '_getRoleList',
        value: function _getRoleList() {
            var _this = this;

            this._configService.getRoleList().then(function (data) {
                if (data && data instanceof Array) {
                    _this.roleList.push.apply(_this.roleList, data);
                }
            });
        }
    }, {
        key: 'setSession',
        value: function setSession(key, value) {
            if (key && value) {
                sessionStorage.setItem(key, value);
            }
        }
    }, {
        key: 'getSession',
        value: function getSession(key) {
            if (key) {
                return sessionStorage.getItem(key);
            }

            return null;
        }
    }, {
        key: 'getInfo',
        value: function getInfo() {
            return this.info;
        }
    }, {
        key: 'getAccess',
        value: function getAccess() {
            return this.access;
        }
    }, {
        key: 'get',
        value: function get(data) {
            var _this2 = this;

            this._httpHelper.blockUI.start();

            return this._http.post(this._api.get, data).then(this._httpHelper.verify, this._httpHelper.error).then(function (data) {
                _this2.info.name = data.true_name;
                _this2.info.role = data.role;
                _this2.setSession('SIL_ROLE', data.role);
                _this2.getUserAccess();
            });
        }
    }, {
        key: 'hanldeAccess',
        value: function hanldeAccess(data) {
            var _this3 = this;

            var accessList = angular.fromJson(data);
            if (accessList && accessList[this.info.role]) {
                var keys = Object.keys(this.access);
                keys.forEach(function (key) {
                    if (!accessList[key]) {
                        delete _this3.access[key];
                    }
                });
                angular.extend(this.access, accessList[this.info.role]);
            }
        }
    }, {
        key: 'getUserAccess',
        value: function getUserAccess() {
            var _this4 = this;

            var access = this.getSession('SIL_ACCESS');

            if (access) {
                this.hanldeAccess(access);
            }

            this._configService.get(this.accessKey).then(function (data) {
                _this4.setSession('SIL_ACCESS', data);
                if (data) {
                    _this4.hanldeAccess(data);
                }
            });
        }
    }]);

    return ProfileService;
}();

exports.default = ProfileService;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/common/services/services.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _config = require('./config.service');

var _config2 = _interopRequireDefault(_config);

var _profile = require('./profile.service');

var _profile2 = _interopRequireDefault(_profile);

var _accessControl = require('./accessControl.service');

var _accessControl2 = _interopRequireDefault(_accessControl);

var _district = require('./district.service');

var _district2 = _interopRequireDefault(_district);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.common.services', []).service('ConfigService', _config2.default).service('ProfileService', _profile2.default).service('AccessControlService', _accessControl2.default).service('DistrictService', _district2.default);

},{"./accessControl.service":"/Users/Gavin/Documents/codes/pack/sil/app/common/services/accessControl.service.js","./config.service":"/Users/Gavin/Documents/codes/pack/sil/app/common/services/config.service.js","./district.service":"/Users/Gavin/Documents/codes/pack/sil/app/common/services/district.service.js","./profile.service":"/Users/Gavin/Documents/codes/pack/sil/app/common/services/profile.service.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/components/components.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _mcMainHeader = require('./mcMainHeader/mcMainHeader');

var _mcContentHeader = require('./mcContentHeader/mcContentHeader');

var _mcSidebar = require('./mcSidebar/mcSidebar.directive');

var _mcSidebar2 = _interopRequireDefault(_mcSidebar);

var _mcSidebar3 = require('./mcSidebar/mcSidebar.service');

var _mcSidebar4 = _interopRequireDefault(_mcSidebar3);

var _mcSidebarHelpers = require('./mcSidebar/mcSidebarHelpers.directive');

var helper = _interopRequireWildcard(_mcSidebarHelpers);

var _index = require('./mcPagination/index');

var _picker = require('./mcPicker/picker');

var _picker2 = _interopRequireDefault(_picker);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import PlanModelService    from './mcCarePlan/planModel';

// import careTypeService    from './mcCarePlan/careType';


exports.default = _angular2.default.module('app.core.components', [])

// layout component
.component('mcMainHeader', _mcMainHeader.mainHeader).directive('mcMainSidebar', _mcSidebar2.default).service('mcSidebarService', _mcSidebar4.default).component('mcContentHeader', _mcContentHeader.contentHeader)

// sidebar
.directive('mcSidebarTogglingItem', helper.mcSidebarTogglingItem).directive('mcUiSrefTogglingSubmenu', helper.mcUiSrefTogglingSubmenu).directive('mcUiSrefToggler', helper.mcUiSrefToggler).component('mcPagination', _index.mcPagination).service('PickerService', _picker2.default)

// .service('PlanModelService', PlanModelService)

// .service('careTypeService', careTypeService)
;

},{"./mcContentHeader/mcContentHeader":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcContentHeader/mcContentHeader.js","./mcMainHeader/mcMainHeader":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcMainHeader/mcMainHeader.js","./mcPagination/index":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/index.js","./mcPicker/picker":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPicker/picker.js","./mcSidebar/mcSidebar.directive":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcSidebar/mcSidebar.directive.js","./mcSidebar/mcSidebar.service":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcSidebar/mcSidebar.service.js","./mcSidebar/mcSidebarHelpers.directive":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcSidebar/mcSidebarHelpers.directive.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcContentHeader/mcContentHeader.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var McContentHeaderController = function McContentHeaderController() {
  'ngInject';

  _classCallCheck(this, McContentHeaderController);
};

var contentHeader = exports.contentHeader = {
  templateUrl: 'core/components/mcContentHeader/mcContentHeader.html',
  controller: McContentHeaderController,
  bindings: {}
};

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcMainHeader/mcMainHeader.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var McMainHeaderController = function () {
  McMainHeaderController.$inject = ["sweet", "$timeout", "toastr", "utilService", "ProfileService", "MessageService"];
  function McMainHeaderController(sweet, $timeout, toastr, utilService, ProfileService, MessageService) {
    'ngInject';

    _classCallCheck(this, McMainHeaderController);

    this._sweet = sweet;
    this._utilService = utilService;

    this._msgService = MessageService;

    this._toastr = toastr;
    this._timeout = $timeout;

    // let {avatar} = PensionService.getInfo();

    this.info = ProfileService.getInfo();
    this.msg_count = 0;

    this.getMsg();
  }

  _createClass(McMainHeaderController, [{
    key: 'logout',
    value: function logout() {
      var _this = this;

      this._sweet.show({
        title: '提示',
        text: '确认退出?',
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: '退出',
        cancelButtonText: '取消'
      }, function (isConfirm) {
        if (isConfirm) {
          localStorage.clear();
          _this._utilService.logout();
        }
      });
    }
  }, {
    key: 'getMsg',
    value: function getMsg() {
      var _this2 = this;

      this._msgService.getList({ page: 1, page_limit: 10 }, true).then(function (data) {
        var unreadList = data.messages.filter(function (item) {
          return item.state === 0;
        });
        var len = unreadList.length;
        if (len > 0) {
          var newMsgId = unreadList[0].id;
          if (newMsgId != _this2.newMsgId) {
            _this2._toastr.success(unreadList[0].content, '新消息');
            _this2.newMsgId = newMsgId;
          }
        }

        if (len > 9) {
          len = '9+';
        }

        _this2.msg_count = len;

        _this2._timeout(function () {
          _this2.getMsg();
        }, 120000);
      });
    }
  }]);

  return McMainHeaderController;
}();

var mainHeader = exports.mainHeader = {
  templateUrl: 'core/components/mcMainHeader/mcMainHeader.html',
  controller: McMainHeaderController,
  controllerAs: 'vm',
  bindings: {}
};

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var McPaginationController = exports.McPaginationController = function () {
  McPaginationController.$inject = ["$timeout"];
  function McPaginationController($timeout) {
    'ngInject';

    _classCallCheck(this, McPaginationController);

    this._timeout = $timeout;
  }

  _createClass(McPaginationController, [{
    key: 'pageChanged',
    value: function pageChanged() {
      var _this = this;

      // console.log(this);

      this._timeout(function () {
        _this.pageChange && _this.pageChange();
      });
    }
  }]);

  return McPaginationController;
}();

;

var mcPagination = exports.mcPagination = {
  templateUrl: 'core/components/mcPagination/index.html',
  controller: McPaginationController,
  controllerAs: 'vm',
  bindings: {
    currentPage: '=',
    totalItems: '=',
    itemsPerPage: '=',
    pageChange: '&'
  }
};

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Pagination = function () {
  Pagination.$inject = ["$injector"];
  function Pagination($injector) {
    'ngInject';
    // console.log($location);

    _classCallCheck(this, Pagination);

    this._location = $injector.get('$location');
    this._stateParams = $injector.get('$stateParams');

    this.pagination = {
      count: 0,
      pageSize: 18
    };

    this._initPage();
  }

  _createClass(Pagination, [{
    key: '_initPage',
    value: function _initPage() {
      var page = this._stateParams.page;

      this.pagination.page = +page || 1;
    }
  }, {
    key: '_filterEmptyValue',
    value: function _filterEmptyValue() {
      var validFilters = {};
      var value = void 0;
      for (var key in this.filters) {
        value = this.filters[key];
        if (value !== void 0) {
          validFilters[key] = value;
        }
      }

      return validFilters;
    }
  }, {
    key: 'reSearch',
    value: function reSearch() {
      var page = 1;
      this._location.search(_extends({}, this._filterEmptyValue(), { page: page }));
    }
  }, {
    key: 'pageChanged',
    value: function pageChanged() {
      // console.log(this.location);
      var page = this.pagination.page;

      this._location.search(_extends({}, this._filterEmptyValue(), { page: page }));
    }
  }]);

  return Pagination;
}();

exports.default = Pagination;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPicker/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultPickerOptions = {
  min: 1,
  max: 0,
  title: '添加项目',
  itemType: '项目',
  itemUnit: '个',
  itemPosition: '',
  searchPlaceholder: '请输入项目名称',
  selectedItems: null,

  params: null,

  idKey: 'id',
  nameKey: 'name',
  avatarKey: 'avatar'
};

var PickerController = function () {
  PickerController.$inject = ["$http", "httpHelper", "$uibModalInstance", "pickerOptions"];
  function PickerController($http, httpHelper, $uibModalInstance, pickerOptions) {
    'ngInject';

    _classCallCheck(this, PickerController);

    this._http = $http;
    this._httpHelper = httpHelper;

    this._modalInstance = $uibModalInstance;

    this.options = _extends({}, defaultPickerOptions, pickerOptions);

    this.selectionItem = [];

    this.list = [];

    this.getList();
  }

  _createClass(PickerController, [{
    key: '_getList',
    value: function _getList(params) {
      var url = this.options.url;

      if (!url) {
        console.error('mcPicker', 'Url is required.');
        return;
      }

      this._httpHelper.blockUI.start();

      return this._http.get(url, { params: params }).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'getList',
    value: function getList() {
      var _this = this;

      var list = this.options.list;

      if (list) {
        this.list = this._formatData(list);
        return;
      }

      var params = _extends({
        pageSize: 1000
      }, this.options.params || {});
      this._getList(params).then(function (data) {
        _this.list = _this._formatData(data.list);
      });
    }
  }, {
    key: 'getValue',
    value: function getValue(obj, key) {
      var keyArr = key.split('.');

      keyArr.forEach(function (k) {
        obj = obj[k];
      });

      return obj;
    }
  }, {
    key: '_formatData',
    value: function _formatData(data) {
      var _this2 = this;

      var _options = this.options,
          selectedItems = _options.selectedItems,
          idKey = _options.idKey,
          nameKey = _options.nameKey,
          avatarKey = _options.avatarKey;

      var tmpHashObj = {};

      if (selectedItems && selectedItems.length > 0) {
        selectedItems.forEach(function (item) {
          tmpHashObj[item.id] = true;
        });
      }

      return data.map(function (item) {
        var tmpObj = {
          id: item[idKey],
          name: _this2.getValue(item, nameKey),
          avatar: item[avatarKey] || '/images/common/man.png'
        };

        tmpObj = Object.assign(item, tmpObj);

        if (tmpHashObj[tmpObj.id]) {
          tmpObj.selected = true;

          _this2.selectionItem.push(tmpObj);
        }

        return tmpObj;
      });
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      // this.onClose && this.onClose(this.selectionItem);
      this._modalInstance.dismiss('cancel');
    }
  }, {
    key: 'ok',
    value: function ok() {
      var len = this.selectionItem.length;
      var _options2 = this.options,
          max = _options2.max,
          min = _options2.min;


      if (len < min || max > 0 && len > max) {
        return false;
      }
      this._modalInstance.close(this.selectionItem);
    }
  }, {
    key: 'toggleItemSelected',
    value: function toggleItemSelected(item) {
      var index = this.selectionItem.indexOf(item);
      if (index > -1) {
        item.selected = false;
        this.selectionItem.splice(index, 1);
      } else {
        // max restrict
        if (this.options.max === 1) {
          this.list.map(function (item) {
            item.selected = false;
            return item;
          });
          this.selectionItem = [];
        } else if (this.options.max > 1) {
          var filtered = this.list.filter(function (item) {
            return item.selected;
          });
          if (filtered.length === this.options.max) {
            item.selected = false;
            return;
          }
        }

        item.selected = true;
        this.selectionItem.push(item);
      }

      // console.log(this.selectionItem);
    }
  }]);

  return PickerController;
}();

var pickerConfiguration = {
  templateUrl: 'core/components/mcPicker/template.html',
  controller: PickerController,
  controllerAs: 'vm'
};

exports.default = pickerConfiguration;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPicker/picker.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var noop = function noop() {
  console.log('no callback');
};

var PickerService = function () {
  PickerService.$inject = ["$uibModal"];
  function PickerService($uibModal) {
    'ngInject';

    _classCallCheck(this, PickerService);

    this._modal = $uibModal;
  }

  _createClass(PickerService, [{
    key: 'open',
    value: function open(_pickerOptions, options, callback) {

      if (typeof options == 'function') {
        callback = options;
        options = {};
      }

      if (typeof _pickerOptions == 'function') {
        callback = _pickerOptions;
        _pickerOptions = {};
        options = {};
      }

      var opts = Object.assign({
        animation: true,
        size: 'lg',
        resolve: {
          pickerOptions: function pickerOptions() {
            _pickerOptions = _pickerOptions || {};
            return _extends({}, _pickerOptions);
          }
        }
      }, _ctrl2.default, options || {});

      // console.log(this);

      var modalInstance = this._modal.open(opts);

      if (typeof callback !== 'function') {
        callback = noop;
      }

      modalInstance.result.then(function (selectedItems) {
        // console.log(selectedItems);
        callback.call(null, { status: 0, info: 'success', data: [].concat(_toConsumableArray(selectedItems)) });
      }).catch(function () {
        return callback.call(null, { status: 1, info: 'dismiss', data: [] });
      });

      return modalInstance;
    }
  }]);

  return PickerService;
}();

exports.default = PickerService;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPicker/ctrl.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcSidebar/helpers/mcSidebarTogglingItem.ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var McSidebarTogglingItemController = function () {
  McSidebarTogglingItemController.$inject = ["$scope", "$element", "$attrs", "$state", "mcSidebarService"];
  function McSidebarTogglingItemController($scope, $element, $attrs, $state, mcSidebarService) {
    'ngInject';

    var _this = this;

    _classCallCheck(this, McSidebarTogglingItemController);

    this._$element = $element;

    var menuItem = this.$$menuItem = $scope.$eval($attrs.mcSidebarTogglingItem);

    if (menuItem && menuItem.subMenu && menuItem.subMenu.length) {
      this.$$expandSubmenu = function () {
        console.warn('$$expandMenu should be overwritten by mcUiSrefTogglingSubmenu');
      };
      this.$$collapseSubmenu = function () {
        console.warn('$$collapseSubmenu should be overwritten by mcUiSrefTogglingSubmenu');
      };

      this.subItemsStateRefs = mcSidebarService.getAllStateRefsRecursive(menuItem);

      if (this.isState($state.current)) {
        $element.addClass('sidebar-item-expanded');
      }

      $scope.$on('$stateChangeStart', function (event, toState) {
        if (!_this.isState(toState) && $element.hasClass('sidebar-item-expanded')) {
          _this.$collapse();
          $element.removeClass('sidebar-item-expanded');
        }
      });

      $scope.$on('$stateChangeSuccess', function (event, toState) {
        if (_this.isState(toState) && !$element.hasClass('sidebar-item-expanded')) {
          _this.$expand();
          $element.addClass('sidebar-item-expanded');
        }
      });
    }
  }

  _createClass(McSidebarTogglingItemController, [{
    key: '$expand',
    value: function $expand() {
      this.$$expandSubmenu();
      this.$collapseOther(this.$collapseOther(this._$element));
      this._$element.addClass('sidebar-item-expanded');
    }
  }, {
    key: '$collapse',
    value: function $collapse() {
      this.$$collapseSubmenu();
      this._$element.removeClass('sidebar-item-expanded');
    }
  }, {
    key: '$toggle',
    value: function $toggle() {
      this._$element.hasClass('sidebar-item-expanded') ? this.$collapse() : this.$expand();
    }
  }, {
    key: 'isState',
    value: function isState(state) {
      return state && this.subItemsStateRefs.some(function (subItemState) {
        return state.name.indexOf(subItemState) == 0;
      });
    }

    // hack: collapse other menu when expand one
    // TODO: use directive feture, no element manipulate

  }, {
    key: '$collapseOther',
    value: function $collapseOther(element) {
      var siblings = angular.element(element).siblings('.sidebar-item-expanded');
      siblings.find('.sidebar-sublist').hide();
      siblings.removeClass('sidebar-item-expanded');
    }
  }]);

  return McSidebarTogglingItemController;
}();

exports.default = McSidebarTogglingItemController;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcSidebar/mcSidebar.directive.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var McSiderbarController = function McSiderbarController($scope, $state, mcSidebarService, ProfileService) {
  'ngInject';

  _classCallCheck(this, McSiderbarController);

  this.menuItems = mcSidebarService.getMenuItems();
  this.info = {
    name: '浦发 | 投贷联动',
    avatar: '/images/common/logo.png'
  };

  this.access = ProfileService.access;
};
McSiderbarController.$inject = ["$scope", "$state", "mcSidebarService", "ProfileService"];

function McSiderbarDirective() {

  return {
    restrict: 'E',
    templateUrl: 'core/components/mcSidebar/mcSidebar.html',
    controller: McSiderbarController,
    controllerAs: 'sidebar',
    link: function link(scope, element, attrs) {
      var $side = element[0].childNodes[0];
      scope.menuHeight = $side.clientHeight - 160;
    }
  };
}

exports.default = McSiderbarDirective;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcSidebar/mcSidebar.service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var McSidebarServer = function () {
  McSidebarServer.$inject = ["$state"];
  function McSidebarServer($state) {
    'ngInject';

    _classCallCheck(this, McSidebarServer);

    this.$state = $state;
    this.staticMenuItems = [];
    this._isMenuCollapsed = true;
  }

  _createClass(McSidebarServer, [{
    key: 'getMenuItems',
    value: function getMenuItems() {

      var states = this.defineMenuItemStates();
      // let menuItems = states.filter(item => item.level == 0 && !(item.accessRoleIds && item.accessRoleIds.indexOf(this._scope.accessControl.role_id) == -1) );
      var menuItems = states.filter(function (item) {
        return item.level == 0;
      });

      menuItems.forEach(function (item) {
        var children = states.filter(function (child) {
          return child.level == 1 && child.name.indexOf(item.name) === 0;
        });

        item.subMenu = children.length ? children : null;

        // 用第三级的指定入口替换二级抽象路由
        item.subMenu && item.subMenu.forEach(function (third, index) {
          if (third.entry) {
            var entry = states.filter(function (x) {
              return x.name === third.entry;
            });
            if (entry.length) {
              item.subMenu[index] = entry[0];
            }
          }
        });
      });

      return menuItems.concat(this.staticMenuItems);
    }
  }, {
    key: 'getAllStateRefsRecursive',
    value: function getAllStateRefsRecursive(item) {

      return this._iterateSubItems(item);
    }
  }, {
    key: 'defineMenuItemStates',
    value: function defineMenuItemStates() {

      return this.$state.get().filter(function (state) {
        return state.sidebarMeta;
      }).map(function (state) {
        var meta = state.sidebarMeta;
        return {
          name: state.name,
          title: state.title,
          level: (state.name.match(/\./g) || []).length,
          order: meta.order,
          icon: meta.icon,
          stateRef: state.name,
          entry: meta.entry,
          accessRoleIds: meta.accessRoleIds
        };
      }).sort(function (a, b) {
        return (a.level - b.level) * 100 + a.order - b.order;
      });
    }
  }, {
    key: '_iterateSubItems',
    value: function _iterateSubItems(currentItem) {
      var _this = this;

      var result = [];
      currentItem.subMenu && currentItem.subMenu.forEach(function (subItem) {
        subItem.stateRef && result.push(subItem.stateRef);
        _this._iterateSubItems(subItem);
      });
      return result;
    }
  }]);

  return McSidebarServer;
}();

exports.default = McSidebarServer;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcSidebar/mcSidebarHelpers.directive.js":[function(require,module,exports){
'use strict';

mcUiSrefTogglingSubmenu.$inject = ["$state"];
mcUiSrefToggler.$inject = ["mcSidebarService"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mcSidebarTogglingItem = mcSidebarTogglingItem;
exports.mcUiSrefTogglingSubmenu = mcUiSrefTogglingSubmenu;
exports.mcUiSrefToggler = mcUiSrefToggler;

var _mcSidebarTogglingItem = require('./helpers/mcSidebarTogglingItem.ctrl');

var _mcSidebarTogglingItem2 = _interopRequireDefault(_mcSidebarTogglingItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mcSidebarTogglingItem() {
  return {
    restrict: 'A',
    controller: _mcSidebarTogglingItem2.default
  };
}

function mcUiSrefTogglingSubmenu($state) {
  'ngInject';

  return {
    restrict: 'A',
    require: '^mcSidebarTogglingItem',
    link: function link(scope, el, attrs, mcSidebarTogglingItem) {
      mcSidebarTogglingItem.$$expandSubmenu = function () {
        el.slideDown();
      };
      mcSidebarTogglingItem.$$collapseSubmenu = function () {
        el.slideUp();
      };
    }
  };
}

function mcUiSrefToggler(mcSidebarService) {
  'ngInject';

  return {
    restrict: 'A',
    require: '^mcSidebarTogglingItem',
    link: function link(scope, el, attrs, mcSidebarTogglingItem) {
      el.on('click', function () {
        mcSidebarTogglingItem.$toggle();
      });
    }
  };
}

},{"./helpers/mcSidebarTogglingItem.ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcSidebar/helpers/mcSidebarTogglingItem.ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/core.api.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
var prefix = 'http://silapi.adoc.wang';
var api = {
	config: {
		list: prefix + '/client_config/list/web',
		get: prefix + '/client_config/get_special/{key}',
		set: prefix + '/client_config/set_special',
		roleList: prefix + '/auth/role_list'
	},
	message: {
		getList: prefix + '/message/list',
		get: prefix + '/message/{id}',
		set: prefix + '/message/set'
	},
	investment: {
		getList: prefix + '/vc_company/list',
		set: prefix + '/vc_company/set',
		add: prefix + '/vc_company/add',
		downloadTemplate: prefix + '/export/vc_company_template',
		import: prefix + '/import/vc_company'
	},
	enterprise: {
		getList: prefix + '/enterprise/list',
		get: prefix + '/enterprise/{id}',
		set: prefix + '/enterprise/set',
		add: prefix + '/enterprise/add'
	},
	person: {
		get: prefix + '/user/get',
		set: prefix + '/user/set',
		logout: prefix + '/user/logout',
		list: prefix + '/user/list',
		add: prefix + '/user/add'
	},
	account: {
		downloadTemplate: prefix + '/export/user_template',
		import: prefix + '/import/user'
	},
	bank: {
		get: prefix + '/bank/list',
		add: prefix + '/bank/add',
		set: prefix + '/bank/set',
		downloadTemplate: prefix + '/export/bank_template',
		import: prefix + '/import/bank'
	},
	log: {
		list: prefix + '/log/list'
	},
	process: {
		tipsList: prefix + '/cm_tip/list',
		tipsGet: prefix + '/cm_tip/get/{id}',
		tipsSet: prefix + '/cm_tip/set',
		tipsAdd: prefix + '/cm_tip/add'
	},
	filter: {
		blacklist: {
			list: prefix + '/blacklist/list',
			add: prefix + '/blacklist/add',
			del: prefix + '/blacklist/del'
		}
	},
	loan: {
		get: prefix + '/loan_decision/get_result',
		set: prefix + '/loan_decision/set_result'
	},
	auth: {
		get: prefix + '/auth/role_list'
	}
};

exports.default = api;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/core.config.js":[function(require,module,exports){
'use strict';

coreConfig.$inject = ["$stateProvider", "$locationProvider", "$urlRouterProvider", "$compileProvider", "$httpProvider"];
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _http = require('./services/http.interceptor');

var _http2 = _interopRequireDefault(_http);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import {AlarmListController, AlarmDeviceController} from './../modules/alarm/index';

function coreConfig($stateProvider, $locationProvider, $urlRouterProvider, $compileProvider, $httpProvider) {
  'ngInject';

  if ("development" === 'production') {
    $compileProvider.debugInfoEnabled(false);
  }

  // $locationProvider.html5Mode(true);

  $stateProvider.state('dashboard', {
    url: '/',
    template: '<dashboard></dashboard>',
    title: '社区主页',
    sidebarMeta: {
      icon: 'icon-sidebar_home_ic',
      order: 1
    }
  });

  $urlRouterProvider.otherwise('/');

  // http interceptor
  //
  // For purposes of global error handling, authentication,
  // or any kind of synchronous or asynchronous pre-processing of request or postprocessing of responses
  $httpProvider.interceptors.push(_http2.default);
}

exports.default = coreConfig;

},{"./services/http.interceptor":"/Users/Gavin/Documents/codes/pack/sil/app/core/services/http.interceptor.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/core.configProvider.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
function configProvider() {
  'ngInject';

  var conf = {
    theme: {
      blur: false
    }
  };

  conf.changeTheme = function (theme) {
    angular.merge(conf.theme, theme);
  };

  conf.$get = function () {
    delete conf.$get;
    return conf;
  };
  return conf;
}

exports.default = configProvider;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/core.constants.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var coreConstants = {
  appTitle: '管理后台',
  apiUrl: '/api/v1',
  errorInfo: {
    0: '请求成功',
    400: '请求有误',
    401: '请求有误',
    402: '无登录信息',
    403: '参数不全',
    404: '参数格式有误',
    405: '无登录信息',
    406: '无登录信息',
    407: '没有权限',
    500: '服务器错误，请重试',
    501: '服务器错误'
  },
  date: {
    weeks: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
    months: _underscore2.default.range(1, 32) // 1-31号
  },

  accessKey: 'role.access',
  roleListKey: 'role.list',

  //alarmTypeList: window.pageConf.alarmTypeList,
  cropOptions: {
    minContainerWidth: 140
  },
  roleConfig: [{ role_config_id: 1, role_name: '超级管理员' }],
  statusList: [{ value: 0, name: '开启' }, { value: 1, name: '关闭' }],
  genderList: [{ value: 1, name: '男' }, { value: 2, name: '女' }],
  pagination: { page: 1, pageSize: 18 }, // 默认分页
  modalAnimation: true
};

exports.default = coreConstants;

},{"underscore":"/Users/Gavin/Documents/codes/pack/sil/node_modules/underscore/underscore.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/core.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

require('angular-ui-bootstrap');

require('angular-ui-router');

var _core = require('./core.constants');

var _core2 = _interopRequireDefault(_core);

var _core3 = require('./core.config');

var _core4 = _interopRequireDefault(_core3);

var _core5 = require('./core.run');

var _core6 = _interopRequireDefault(_core5);

var _core7 = require('./core.configProvider');

var _core8 = _interopRequireDefault(_core7);

var _core9 = require('./core.api');

var _core10 = _interopRequireDefault(_core9);

var _directives = require('./directives/directives.module');

var _directives2 = _interopRequireDefault(_directives);

var _components = require('./components/components.module');

var _components2 = _interopRequireDefault(_components);

var _service = require('./services/service.module');

var _service2 = _interopRequireDefault(_service);

var _vendor = require('./vendor/vendor.module');

var _vendor2 = _interopRequireDefault(_vendor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.core', ['ui.router', 'ui.bootstrap', _directives2.default.name, _components2.default.name, _service2.default.name, _vendor2.default.name]).constant('AppSettings', _core2.default).constant('ApiMap', _core10.default).provider('coreConfig', _core8.default).config(_core4.default).run(_core6.default);

},{"./components/components.module":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/components.module.js","./core.api":"/Users/Gavin/Documents/codes/pack/sil/app/core/core.api.js","./core.config":"/Users/Gavin/Documents/codes/pack/sil/app/core/core.config.js","./core.configProvider":"/Users/Gavin/Documents/codes/pack/sil/app/core/core.configProvider.js","./core.constants":"/Users/Gavin/Documents/codes/pack/sil/app/core/core.constants.js","./core.run":"/Users/Gavin/Documents/codes/pack/sil/app/core/core.run.js","./directives/directives.module":"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/directives.module.js","./services/service.module":"/Users/Gavin/Documents/codes/pack/sil/app/core/services/service.module.js","./vendor/vendor.module":"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/vendor.module.js","angular":"angular","angular-ui-bootstrap":"angular-ui-bootstrap","angular-ui-router":"angular-ui-router"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/core.run.js":[function(require,module,exports){
'use strict';

coreRun.$inject = ["$rootScope", "AppSettings", "$log", "$state", "$stateParams", "$location", "$window", "$timeout", "toastr", "ProfileService"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
function coreRun($rootScope, AppSettings, $log, $state, $stateParams, $location, $window, $timeout, toastr, ProfileService) {
  'ngInject';

  // 把常用的工具挂载到$rootScope上, 在所有scope上直接可用

  $rootScope.$log = $log;
  $rootScope.$state = $state;
  $rootScope.$stateParams = $stateParams;
  $rootScope.$location = $location;

  var access = ProfileService.access;

  // 所有人都能访问的白名单列表
  var whiteList = ['dashboard'];

  var token = localStorage.getItem('SIL_TOKEN');
  var uid = localStorage.getItem('SIL_UID');

  if (!token || !uid) {
    $window.location.href = '/login.html';
  }

  // $rootScope.$on('$stateChangeStart',
  //   (event, toState, toParams, fromState, fromParams) => {
  //   if (access[toState.name] || whiteList.indexOf(toState.name) >= 0 ) {
  //     return;
  //   }

  //   toastr.error('页面不存在或没有权限', 'Forbidden');

  //   event.preventDefault();
  // });


  // change page title based on state
  $rootScope.$on('$stateChangeSuccess', function (event, toState) {
    $rootScope.pageTitle = '';

    if (toState.title) {
      $rootScope.pageTitle += toState.title;
      $rootScope.pageTitle += ' \u2014 ';
    }

    $rootScope.pageTitle += AppSettings.appTitle;

    // hack: 进入页面时，body上会被添加modal-open, 导致页面无法滚动（偶发）
    $timeout(function () {
      angular.element('body').hasClass('modal-open') && console.warn('modal-open class on body!');
      angular.element('body').removeClass('modal-open');
    }, 300);
  });

  // 回退历史
  $rootScope.back = function () {
    $window.history.go(-1);
  };

  // 客户套餐
  // $rootScope.accessControl = AccessControlService.getCond();
}

exports.default = coreRun;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/directives.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _datepicker = require('./mcDatePicker/datepicker');

var _datepicker2 = _interopRequireDefault(_datepicker);

var _upload = require('./mcUploadAvatar/upload');

var _upload2 = require('./mcUploadImage/upload');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.core.directives', []).directive('mcDatepicker', _datepicker2.default).directive('mcUploadAvatar', _upload.mcUploadAvatar).directive('mcUploadImage', _upload2.mcUploadImage);

},{"./mcDatePicker/datepicker":"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/mcDatePicker/datepicker.js","./mcUploadAvatar/upload":"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/mcUploadAvatar/upload.js","./mcUploadImage/upload":"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/mcUploadImage/upload.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/mcDatePicker/datepicker.js":[function(require,module,exports){
'use strict';

DatePickerDirective.$inject = ["$timeout"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = DatePickerDirective;
function DatePickerDirective($timeout) {
    'ngInject';

    var _arguments = arguments;
    return {
        restrict: 'EA',
        templateUrl: 'core/directives/mcDatePicker/datepicker.html',
        replace: true,
        scope: {
            id: '@',
            startDate: '=',
            minDate: '=',
            maxDate: '=',
            minView: '=',
            view: '=',
            changeBy: '=',
            changeTime: '&'
        },
        link: function link(scope, elem, attrs) {
            var source = attrs.timeSource,
                ctrlAlias = attrs.ctrlAlias,
                isClosed = false;

            scope.showDatePicker = function (e) {
                var target = e.currentTarget;
                if (target.classList.contains('open')) {
                    scope.hideDatePicker(e);
                } else {
                    target.classList.add('open');
                    // target.children('div').children().removeClass('hidden');
                    var children = target.children;
                    var child = void 0,
                        grandSon = void 0;

                    for (var i = 0, len = children.length; i < len; i++) {
                        if (children[i] && children[i].tagName.toUpperCase() == 'DIV') {
                            child = children[i];

                            break;
                        }
                    }

                    grandSon = child.children;

                    for (var _i = 0, _len = grandSon.length; _i < _len; _i++) {
                        grandSon[_i].classList.remove('hidden');
                    }
                }

                isClosed = false;
            };
            scope.hideDatePicker = function (e) {
                isClosed = true;
                if (elem.length) {
                    for (var i = 0, len = elem.length; i < len; i++) {
                        elem[i].classList.remove('open');
                    }
                } else {
                    elem.classList.remove('open');
                }
            };
            scope.mouseLeave = function (e) {
                scope.hideDatePicker(e);
            };

            var unbindHidePicker = scope.$on('hidePicker', scope.hideDatePicker);
            scope.$on('$destroy', unbindHidePicker);

            scope.$watch('startDate', function () {

                // 基于scope.$parent.$ctrl
                // 此处根据是否有手动传入time-source,来动态指定时间变量
                // 默认设置startDate
                if (source) {
                    var timeVar = getSource();
                    timeVar = scope.startDate;
                } else {
                    scope.$parent[ctrlAlias ? ctrlAlias : '$ctrl'].startDate = scope.startDate;
                }

                // TODO: changeOnInit: 是否在页面初始化时触发

                // changeBy: 'close', 如指定changeBy, 则只在该type变化时才触发事件
                if (attrs.changeBy) {
                    if (attrs.changeBy === 'close' && isClosed) {
                        // 当面板关闭时才触发事件
                        $timeout(function () {
                            scope.changeTime();
                        }, 0);
                    }
                } else {
                    $timeout(function () {
                        scope.changeTime();
                    }, 0);
                }
            });

            function getSource() {
                var arr = source.split('.'),
                    obj = scope.$parent[ctrlAlias ? ctrlAlias : '$ctrl'];

                for (var i = 0, l = arr.length; i < l; i++) {
                    obj = obj[arr[i]];
                }
                return obj;
            }

            //获取parentCtrl时间点
            var unbindToChild = scope.$on('to-child', function () {
                //arguments[1] example: 2015-01-15
                // console.log( arguments );
                scope.startDate = _arguments[1];
                scope.minDate = _arguments[2];
            });
            scope.$on('$destroy', unbindToChild);
        }
    };
};

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/mcUploadAvatar/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var editAvatarCtrl = function () {
  editAvatarCtrl.$inject = ["$scope", "$timeout", "Cropper", "AppSettings"];
  function editAvatarCtrl($scope, $timeout, Cropper, AppSettings) {
    'ngInject';

    var _this = this;

    _classCallCheck(this, editAvatarCtrl);

    this._scope = $scope;
    this._timeout = $timeout;
    this._Cropper = Cropper;

    var options = _angular2.default.merge({}, {
      maximize: true,
      preview: '.preview-avatar div',
      // responsive: false,
      aspectRatio: 1 / 1,
      crop: function crop(dataNew) {
        dataNew.x = dataNew.x < 0 ? 0 : dataNew.x;
        dataNew.y = dataNew.y < 0 ? 0 : dataNew.y;

        _this._timeout(function () {
          _this._scope.data = dataNew;
        });
        // console.log($scope.data);
      }
    }, AppSettings.cropOptions, this._scope.cropOptions);

    _angular2.default.extend($scope, {
      proportion: 140 / 180,
      onFile: this.onFile.bind(this),
      preview: {},
      cropper: {},
      cropperProxy: 'cropper.first',
      file: '',
      data: '',
      showEvent: 'show',
      hideEvent: 'hide',
      options: options
    });
    // this._Dropzone = Dropzone;
  }

  // ------------------ method -------------------------

  _createClass(editAvatarCtrl, [{
    key: 'close',
    value: function close() {
      // $modalInstance.close();
    }
  }, {
    key: 'selectFile',
    value: function selectFile() {
      var form = _angular2.default.element('.dropzone');
      this.resetSelect(form);
      form.trigger('click');
    }
  }, {
    key: 'resetSelect',
    value: function resetSelect(form) {
      form.scope().dropzone.removeAllFiles();
    }

    /**
     * Method is called every time file input's value changes.
     * Because of Angular has not ng-change for file inputs a hack is needed -
     * call `angular.element(this).scope().onFile(this.files[0])`
     * when input's event is fired.
     */

  }, {
    key: 'onFile',
    value: function onFile(blob) {
      var _this2 = this;

      this._Cropper.encode(this._scope.file = blob).then(function (dataUrl) {
        _this2._scope.dataUrl = dataUrl;
        (_this2._scope.preview || (_this2._scope.preview = {})).dataUrl = dataUrl;
        _this2._timeout(_this2.showCropper.bind(_this2)); // wait for $digest to set image's src
        _this2._timeout(_this2.hideCropper.bind(_this2));
      });
    }
  }, {
    key: 'showCropper',


    /**
     * Showing (initializing) and hiding (destroying) of a cropper are started by
     * events. The scope of the `ng-cropper` directive is derived from the scope of
     * the controller. When initializing the `ng-cropper` directive adds two handlers
     * listening to events passed by `ng-cropper-show` & `ng-cropper-hide` attributes.
     * To show or hide a cropper `$broadcast` a proper event.
     */
    value: function showCropper() {
      this._scope.$broadcast(this._scope.showEvent);
    }
  }, {
    key: 'hideCropper',
    value: function hideCropper() {
      this._scope.$broadcast(this._scope.hideEvent);
    }
  }]);

  return editAvatarCtrl;
}();

exports.default = editAvatarCtrl;

},{"angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/mcUploadAvatar/upload.js":[function(require,module,exports){
'use strict';

mcUploadAvatar.$inject = ["$location", "$rootScope", "$timeout", "toastr", "Cropper"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mcUploadAvatar = mcUploadAvatar;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import Dropzone from 'dropzone';

/**
 * @ngInject
 * @description 上传头像
 */
function mcUploadAvatar($location, $rootScope, $timeout, toastr, Cropper) {
    return {
        restrict: 'EA',
        templateUrl: 'core/directives/mcUploadAvatar/upload.html',
        replace: true,
        controller: _ctrl2.default,
        controllerAs: 'avatarVm',
        scope: {
            url: '=postUrl',
            params: '=imgParams',
            imgName: '=imgName',
            cropOptions: '=',
            imgUrl: '=',
            isEditing: '=',
            success: '&',
            error: '&',
            exposeScope: '&'
        },
        compile: function compile() {
            return {
                pre: function pre(scope, elem) {
                    console.log(scope.isEditing);

                    Dropzone.autoDiscover = false;

                    scope.thumbStart = false;
                    scope.barType = "success";
                    scope.pensionInfo = window.pageConf.pensionInfo;

                    scope.savedAvatar = function () {
                        var dropzone = angular.element('.dropzone').scope().dropzone.processQueue();
                    };

                    scope.resetUpload = function () {
                        scope.uploaded = false;
                        scope.dynamic = 0;
                    };

                    scope.dropzoneConfig = {
                        paramName: scope.imgName || 'images',
                        headers: { authorization: $rootScope.AUTHORIZATION_TOKEN },
                        url: scope.url,
                        method: 'post',
                        maxFilesize: 2,
                        maxFiles: 1,
                        dictFileTooBig: '文件大小不能超过2M',
                        uploadMultiple: false,
                        autoProcessQueue: false,
                        acceptedFiles: 'image/*',
                        addedfile: function addedfile(file) {

                            // 先上传
                            // if( !file ) return false;
                            // var cSize = file.size / 1024 / 1024;
                            // if( cSize > this.options.maxFilesize ){
                            //     var error_msg = "图片大小不能超过5M噢~";
                            //     toastr.error( error_msg );
                            // };


                            scope.resetUpload();
                            angular.element('#JS_avatar_input').scope().onFile(file);

                            scope.$apply(function () {
                                scope.exposeScope({ scope: scope });
                            });
                        },
                        // uploadprogress: function (file, progress) {

                        //     scope.$apply(function () {
                        //         scope.dynamic = progress;
                        //     });

                        // },
                        // error: function (file, errorMessage) {

                        //     scope.$parent.isCrop = false;

                        //     this.removeFile(file);
                        //     scope.$apply(function () {
                        //         scope.error(file, errorMessage);
                        //         toastr.error(errorMessage);
                        //     });
                        // },

                        uploadprogress: function uploadprogress(file, progress) {
                            scope.imgUploadng = true;

                            scope.$apply(function () {
                                scope.thumbStart = false;
                                scope.dynamic = progress;
                            });
                        },
                        error: function error(file, errorMessage) {
                            scope.imgUploadng = false;
                            this.removeFile(file);
                            scope.$apply(function () {
                                scope.thumbStart = false;
                                scope.error(file, errorMessage);
                                toastr.error(errorMessage);
                            });
                        },
                        success: function success(file, data) {

                            this.removeFile(file);
                            scope.$apply(function () {

                                scope.thumbStart = false;

                                if (data.status == 0) {
                                    scope.uploaded = true;
                                    scope.success({ file: file, data: data, scope: scope });
                                    // instace.close();
                                } else {
                                    toastr.error(data.info, '错误');
                                    scope.resetUpload();
                                }

                                // if( data.status == 0 ){
                                //     scope.uploaded = true;
                                //     scope.success({file: file, data: data, scope: scope});

                                //     scope.$parent.isCrop = true;

                                //     // 图片裁剪
                                //     scope.resetUpload();
                                //     angular.element('#JS_avatar_input').scope().onFile(file);


                                // }else{
                                //     toastr.error(data.info, '错误');
                                //     scope.resetUpload();
                                //     scope.$parent.isCrop = false;
                                // }
                            });
                        }
                    };
                }
            };
        }
    };
}

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/mcUploadAvatar/ctrl.js","jquery":"jquery"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/mcUploadImage/ctrl.js":[function(require,module,exports){
arguments[4]["/Users/Gavin/Documents/codes/pack/sil/app/core/directives/mcUploadAvatar/ctrl.js"][0].apply(exports,arguments)
},{"angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/mcUploadImage/upload.js":[function(require,module,exports){
'use strict';

mcUploadImage.$inject = ["$location", "$rootScope", "$timeout", "toastr", "Cropper"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mcUploadImage = mcUploadImage;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import Dropzone from 'dropzone';

/**
 * @ngInject
 * @description 上传头像
 */
function mcUploadImage($location, $rootScope, $timeout, toastr, Cropper) {
    return {
        restrict: 'EA',
        templateUrl: 'core/directives/mcUploadImage/upload.html',
        replace: true,
        controller: _ctrl2.default,
        controllerAs: 'avatarVm',
        scope: {
            url: '=postUrl',
            params: '=imgParams',
            imgName: '=imgName',
            cropOptions: '=',
            imgUrl: '=',
            success: '&',
            error: '&',
            exposeScope: '&',
            editing: '='
        },
        compile: function compile() {
            return {
                pre: function pre(scope, elem) {
                    console.log(scope.editing);

                    Dropzone.autoDiscover = false;

                    scope.thumbStart = false;
                    scope.barType = "success";
                    scope.pensionInfo = window.pageConf.pensionInfo;

                    scope.savedAvatar = function () {
                        var dropzone = angular.element('.dropzone').scope().dropzone.processQueue();
                    };

                    scope.resetUpload = function () {
                        scope.uploaded = false;
                        scope.dynamic = 0;
                    };

                    scope.dropzoneConfig = {
                        paramName: scope.imgName || 'images',
                        headers: { authorization: $rootScope.AUTHORIZATION_TOKEN },
                        url: scope.url,
                        method: 'post',
                        maxFilesize: 2,
                        maxFiles: 1,
                        dictFileTooBig: '文件大小不能超过2M',
                        uploadMultiple: false,
                        autoProcessQueue: false,
                        acceptedFiles: 'image/*',
                        addedfile: function addedfile(file) {
                            scope.resetUpload();
                            angular.element('#JS_avatar_input').scope().onFile(file);

                            scope.$apply(function () {
                                scope.exposeScope({ scope: scope });
                            });
                        },
                        uploadprogress: function uploadprogress(file, progress) {
                            scope.imgUploadng = true;

                            scope.$apply(function () {
                                scope.thumbStart = false;
                                scope.dynamic = progress;
                            });
                        },
                        error: function error(file, errorMessage) {
                            scope.imgUploadng = false;
                            this.removeFile(file);
                            scope.$apply(function () {
                                scope.thumbStart = false;
                                scope.error(file, errorMessage);
                                toastr.error(errorMessage);
                            });
                        },
                        success: function success(file, data) {
                            this.removeFile(file);
                            scope.$apply(function () {

                                scope.thumbStart = false;

                                if (data.status == 0) {
                                    scope.uploaded = true;
                                    scope.success({ file: file, data: data, scope: scope });
                                    // instace.close();
                                } else {
                                    toastr.error(data.info, '错误');
                                    scope.resetUpload();
                                }
                            });
                        }
                    };
                }
            };
        }
    };
}

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/core/directives/mcUploadImage/ctrl.js","jquery":"jquery"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/services/checkState.service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var checkStateService = function () {
  checkStateService.$inject = ["$rootScope", "$state", "sweet", "utilService"];
  function checkStateService($rootScope, $state, sweet, utilService) {
    'ngInject';

    _classCallCheck(this, checkStateService);

    this._rootScope = $rootScope;
    this._state = $state;
    this._sweet = sweet;
    this._utilService = utilService;
  }

  _createClass(checkStateService, [{
    key: 'formStateChange',
    value: function formStateChange(scope, formName) {
      var _this = this;

      var removeListener = this._rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {

        var form = formName.split('.').length > 1 ? _this._utilService.getDescendantProp(scope, formName) : scope[formName];
        // 没有修改过
        if (!form || form && form.$pristine) {
          return;
        }

        _this.leaveConfirm(function (isConfirm) {
          if (!isConfirm) {
            // https://github.com/angular-ui/ui-router/issues/1158
            _this._state.go(toState.name, toParams, { notify: false }).then(function () {
              _this._rootScope.$broadcast('$stateChangeSuccess', toState, toParams, fromState, fromParams);
            });
          }
        });

        event.preventDefault();
      });

      scope.$on('$destroy', removeListener);
    }
  }, {
    key: 'leaveConfirm',
    value: function leaveConfirm(cb) {

      this._sweet.show({
        title: '提示',
        text: '当前信息尚未保存，是否离开此页面？',
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: '留下',
        cancelButtonText: '离开'
      }, function (sure) {
        return cb(sure);
      });
    }
  }]);

  return checkStateService;
}();

exports.default = checkStateService;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/services/history.service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var historyService = function () {
  historyService.$inject = ["$window"];
  function historyService($window) {
    'ngInject';

    _classCallCheck(this, historyService);

    this._window = $window;
  }

  _createClass(historyService, [{
    key: 'back',
    value: function back() {
      this._window.history.back();
    }
  }]);

  return historyService;
}();

exports.default = historyService;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/services/http.interceptor.js":[function(require,module,exports){
'use strict';

httpInterceptor.$inject = ["$q", "$window", "$injector", "$rootScope"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = httpInterceptor;
function httpInterceptor($q, $window, $injector, $rootScope) {
  'ngInject';

  var requestInterceptor = {

    response: function response(_response) {
      var deferred = $q.defer();
      if (_response.data && (_response.data.code == 406 || _response.data.code == 402 || _response.data.code == 405)) {
        $window.location.href = '/login.html';
      }

      deferred.resolve(_response);
      return deferred.promise;
    },

    request: function request(config) {
      var deferred = $q.defer();

      config.timeout = 1000 * 100;
      // localStorage.getItem('SIL_TOKEN') || 
      // $http.defaults.headers.common['authorization']
      // config.headers['extra'] = '{"token":"iamsuperman:15828516285"}';
      config.headers['extra'] = localStorage.getItem('SIL_TOKEN') ? '{"token":"' + localStorage.getItem('SIL_TOKEN') + '","platform":"web","version":"1.0.0"}' : '';
      $rootScope.AUTHORIZATION_TOKEN = config.headers['extra'];

      if (!config.headers['extra']) {
        $window.location.href = '/login.html';
      }

      deferred.resolve(config);
      return deferred.promise;
    }
  };

  return requestInterceptor;
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/services/httpHelper.service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var httpHelper = function () {
  httpHelper.$inject = ["toastr", "blockUI", "AppSettings"];
  function httpHelper(toastr, blockUI, AppSettings) {
    'ngInject';

    _classCallCheck(this, httpHelper);

    this._blockUIInstance = null;
    this._errorInfo = AppSettings.errorInfo;

    this.toastr = toastr;
    this.$blockUI = blockUI;

    this.blockUI = {
      start: this._startBlockUI.bind(this),
      stop: this._stopBlockUI.bind(this)
    };

    this.verify = this._verify.bind(this);
    this.error = this._error.bind(this);
  }
  // ========================= Methods =========================

  _createClass(httpHelper, [{
    key: '_verify',
    value: function _verify(res) {
      var _this = this;

      this._stopBlockUI();

      return new Promise(function (resolve, reject) {
        if (res.data.code === 0) {
          resolve(res.data.data);
        } else {
          _this.toastr.error(_this._errorInfo[res.data.code] || res.data.info, '错误');
          reject(res);
        }
      });
    }
  }, {
    key: '_error',
    value: function _error() {
      var _this2 = this;

      this.toastr.error('获取数据失败！', '错误');
      return new Promise(function (resolve, reject) {
        _this2._stopBlockUI();

        reject();
      });
    }
  }, {
    key: '_startBlockUI',
    value: function _startBlockUI(blockUIName) {
      // TODO reset on restart
      this.$blockUI.instances.reset();
      if (blockUIName) {
        this._blockUIInstance = this.$blockUI.instances.get(blockUIName);
        this._blockUIInstance.start();
      } else {
        if (this.$blockUI.isBlocking) {
          this.$blockUI.stop();
        }
        this.$blockUI.start();
      }
    }
  }, {
    key: '_stopBlockUI',
    value: function _stopBlockUI() {
      if (this._blockUIInstance) {
        this._blockUIInstance.stop();
        this._blockUIInstance = null;
      } else {
        this.$blockUI.stop();
      }
    }
  }]);

  return httpHelper;
}();

exports.default = httpHelper;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/services/imgPreLoad.service.js":[function(require,module,exports){
'use strict';

imgPreLoadService.$inject = ["$q"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imgPreLoadService;
/**
 * @ngInject
 * @description 判断图片是否加载成功
 * ref: http://stackoverflow.com/questions/24569270/preload-background-image-using-angularjs-promises
 */
function imgPreLoadService($q) {
  'ngInject';

  return function (url) {
    var deffered = $q.defer(),
        image = new Image();

    image.src = url;

    if (image.complete) {
      deffered.resolve();
    } else {
      image.addEventListener('load', function () {
        deffered.resolve();
      });

      image.addEventListener('error', function () {
        deffered.reject();
      });
    }

    return deffered.promise;
  };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/services/service.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _httpHelper = require('./httpHelper.service');

var _httpHelper2 = _interopRequireDefault(_httpHelper);

var _imgPreLoad = require('./imgPreLoad.service');

var _imgPreLoad2 = _interopRequireDefault(_imgPreLoad);

var _checkState = require('./checkState.service');

var _checkState2 = _interopRequireDefault(_checkState);

var _util = require('./util.service');

var _util2 = _interopRequireDefault(_util);

var _history = require('./history.service');

var _history2 = _interopRequireDefault(_history);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.module.core.service', []).service('httpHelper', _httpHelper2.default).service('imgPreLoadService', _imgPreLoad2.default).service('checkStateService', _checkState2.default).service('utilService', _util2.default).service('historyService', _history2.default);

},{"./checkState.service":"/Users/Gavin/Documents/codes/pack/sil/app/core/services/checkState.service.js","./history.service":"/Users/Gavin/Documents/codes/pack/sil/app/core/services/history.service.js","./httpHelper.service":"/Users/Gavin/Documents/codes/pack/sil/app/core/services/httpHelper.service.js","./imgPreLoad.service":"/Users/Gavin/Documents/codes/pack/sil/app/core/services/imgPreLoad.service.js","./util.service":"/Users/Gavin/Documents/codes/pack/sil/app/core/services/util.service.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/services/util.service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var util = function () {
    util.$inject = ["$window", "$http", "toastr", "sweet", "mcRegExp", "ApiMap"];
    function util($window, $http, toastr, sweet, mcRegExp, ApiMap) {
        'ngInject';

        _classCallCheck(this, util);

        this._window = $window;
        this._http = $http;

        this.toastr = toastr;
        this.sweet = sweet;
        this.mcRegExp = mcRegExp;
        this._api = ApiMap;
    }
    // 退出操作


    _createClass(util, [{
        key: 'logout',
        value: function logout() {
            var _this = this;

            return this._http.get(this._api.person.logout).then(function (data) {
                _this._window.location.href = '/login.html';
            });
        }

        /**
         * 用underscore从一个对象数组中删除指定的对象
         * @param arr 该数组
         * @param whereObj 查询要删除的对象
         */

    }, {
        key: 'removeItemFromArray',
        value: function removeItemFromArray(arr, whereObj) {
            return _.without(arr, _.findWhere(arr, whereObj));
        }

        /**
         * 获取指定月的总天数
         * @param date | string 日期对象或日期字符串
         * @returns {number}
         */

    }, {
        key: 'getDaysLenInMonth',
        value: function getDaysLenInMonth(date) {
            if (angular.isString(date)) {
                date = new Date(date);
            }
            var month = parseInt(date.getMonth() + 1, 10);
            return new Date(date.getFullYear(), month, 0).getDate();
        }

        /**
         * 针对非表单字段做数据验证
         * @param  {[type]} type  [description]
         * @return {[type]}       [description]
         */

    }, {
        key: 'validate',
        value: function validate(type) {
            var types = type.split(','),
                result = true,
                expr,
                args = Array.prototype.slice.call(arguments, 1);

            // 把第二个参数param归位到最后一个参数（把param放到第二个参数是因为使用方便）
            args.splice(1, 0, null, null, null);

            function applyExpr(type) {
                expr = this.mcRegExp.expression[type];
                if (expr instanceof RegExp) {
                    result = expr.test(args[0]);
                } else {
                    result = expr.apply(null, args);
                }
            }

            if (types.length > 1) {
                // http://stackoverflow.com/questions/13843972/angular-js-break-foreach
                angular.forEach(types, function (type) {
                    type && type.trim();
                    if (result) {
                        applyExpr(type);

                        if (!result) {
                            this.toastr.warning(this.mcRegExp.defaultMsg[type].error);
                            return false;
                        }
                    }
                });
            } else {
                applyExpr(type);

                if (!result) {
                    this.toastr.warning(this.mcRegExp.defaultMsg[type].error);
                }
            }

            return result;
        }

        /**
         * 允许访问以点连接的属性表达式字符串访问子属性
         * @param  {[type]} obj  targe
         * @param  {[type]} desc visit prop string
         * @return {[type]}      value
         * @example
         *   getDescendantProp({a: 1, b: {c: 2}}, 'b.c')  // 2
         */

    }, {
        key: 'getDescendantProp',
        value: function getDescendantProp(obj, desc) {
            var arr = desc.split(".");
            while (arr.length && (obj = obj[arr.shift()])) {}
            return obj;
        }

        /**
         * 询问窗口
         * @param  {[type]}   opts toastr参数
         * @param  {Function} cb   确认回调
         */

    }, {
        key: 'confirm',
        value: function confirm(opts, cb) {
            var options = angular.extend({
                title: '提示',
                text: '',
                //type: 'warning',
                imageUrl: '/dist/images/common/warning.png',
                showCancelButton: true,
                confirmButtonText: '确认',
                cancelButtonText: '取消'
            }, opts);

            this.sweet.show(options, function (isConfirm) {
                cb(isConfirm);
            });
        }

        /**
         * 替换underscore的pick()
         * http://stackoverflow.com/a/25835337/4723163
         *
         * example:
         *   let data = {foo: 'test', abc: 1, zyx: 222}
         *   pick(data, 'foo', 'zyx') // => {foo: 'test', zyx: 222}
         */

    }, {
        key: 'pick',
        value: function pick(o) {
            var _this2 = this;

            if (!o) return {};

            for (var _len = arguments.length, fields = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                fields[_key - 1] = arguments[_key];
            }

            return fields.reduce(function (a, x) {
                if (x.includes('.')) {
                    // TODO: 判断hasOwnProperty
                    a[x.split('.').pop()] = _this2.getDescendantProp(o, x);
                } else {
                    if (o.hasOwnProperty(x)) a[x] = o[x];
                }

                return a;
            }, {});
        }

        /**
         * 在一个Object列表中，通过id/value获取其对应的text/name
         * list: Object数组
         * id: 查找的id
         * idKey: id的属性名(默认为value)
         * textKey: text的属性名(默认为name)
         * 如果不存在对应text则返回""
         */

    }, {
        key: 'getTextById',
        value: function getTextById(list, id) {
            var idKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'value';
            var textKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'name';

            if (!list || !angular.isArray(list)) return;
            var filtered = list.filter(function (item) {
                return id === item[idKey];
            });
            return filtered.length ? filtered[0][textKey] : '';
        }
    }]);

    return util;
}();

exports.default = util;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/config/blockUI.config.js":[function(require,module,exports){
'use strict';

blockUIConfig.$inject = ["blockUIConfig"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
function blockUIConfig(blockUIConfig) {
    'ngInject';

    blockUIConfig.message = ''; // 加载中...

    // Change the default delay to 100ms before the blocking is visible
    blockUIConfig.delay = 100;

    // Disable automatically blocking of the user interface
    blockUIConfig.autoBlock = false;

    // 只要发生异常就清除block
    blockUIConfig.resetOnException = true;

    // block默认是加到body上的，不过我们关掉它，自已指定block的区域
    blockUIConfig.autoInjectBodyBlock = false;

    // 默认是block-ui block-ui-anim-fade；如果需要覆盖，设置为 block-ui + 想应用的class
    blockUIConfig.cssClass = 'block-ui block-ui-message-custom';
}

exports.default = blockUIConfig;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/config/toastr.config.js":[function(require,module,exports){
'use strict';

toastrConfig.$inject = ["toastrConfig"];
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toastrConfig(toastrConfig) {
  'ngInject';

  _angular2.default.extend(toastrConfig, {
    allowHtml: false,
    autoDismiss: false,
    closeButton: true,
    closeHtml: '<button>&times;</button>',
    containerId: 'toast-container',
    extendedTimeOut: 1000,
    iconClasses: {
      error: 'toast-error',
      info: 'toast-info',
      success: 'toast-success',
      warning: 'toast-warning'
    },
    maxOpened: 0,
    messageClass: 'toast-message',
    newestOnTop: true,
    onHidden: null,
    onShown: null,
    onTap: null,
    positionClass: 'toast-top-right',
    preventDuplicates: false,
    preventOpenDuplicates: true,
    progressBar: true,
    tapToDismiss: true,
    target: 'body',
    templates: {
      toast: 'directives/toast/toast.html',
      progressbar: 'directives/progressbar/progressbar.html'
    },
    timeOut: 2000,
    titleClass: 'toast-title',
    toastClass: 'toast'
  });
}

exports.default = toastrConfig;

},{"angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/config/uibPagination.config.js":[function(require,module,exports){
'use strict';

paginationConfig.$inject = ["uibPaginationConfig"];
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function paginationConfig(uibPaginationConfig) {
  'ngInject';

  _angular2.default.extend(uibPaginationConfig, {
    // itemsPerPage: 10,
    boundaryLinks: true,
    rotate: false, // Whether to keep current page in the middle of the visible ones.
    maxSize: 10, // Limit number for pagination size.
    previousText: '上一页',
    nextText: '下一页',
    firstText: '首页',
    lastText: '尾页'
  });
}

exports.default = paginationConfig;

},{"angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/config/validationRule.config.js":[function(require,module,exports){
'use strict';

validationRuleConfig.$inject = ["$validationProvider"];
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _regExpRule = require('./../../../common/constants/regExpRule');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validationRuleConfig($validationProvider) {
  'ngInject';

  $validationProvider.setExpression(_regExpRule.expression).setDefaultMsg(_regExpRule.defaultMsg);
}

exports.default = validationRuleConfig;

},{"./../../../common/constants/regExpRule":"/Users/Gavin/Documents/codes/pack/sil/app/common/constants/regExpRule.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/uibModal.decorator.js":[function(require,module,exports){
'use strict';

uibModalDecorator.$inject = ["$delegate"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = uibModalDecorator;
// https://github.com/angular-ui/bootstrap/issues/5331
// 作废。在多重弹框的情况下，关闭上层的，会导致底层的无法滚动
function uibModalDecorator($delegate) {
  'ngInject';

  var baseOpen = $delegate.open;

  $delegate.open = function () {
    var options = arguments[0];
    var openedClass = 'modal-open';
    if (options) {
      openedClass = options.openedClass || openedClass;
      options.openedClass = "ignoreThisClass";
    }
    var mi = baseOpen.apply(this, arguments);
    var body = angular.element(document.body);
    body.addClass(openedClass);

    // Use result finally, because for whatever reason, closed never resolves
    mi.result.finally(function () {
      body.removeClass(openedClass);
    });

    return mi;
  };

  return $delegate;
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/vendor.module.js":[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

require('angular-toastr');

require('jquery-slimscroll');

require('angular-slimscroll');

require('angular-ui-switch');

var _angularBlockUi = require('angular-block-ui');

var _angularBlockUi2 = _interopRequireDefault(_angularBlockUi);

require('sweetalert');

require('angular-h-sweetalert');

var _dropzone = require('dropzone');

var _dropzone2 = _interopRequireDefault(_dropzone);

require('angular-dropzone');

require('ngCropper/dist/ngCropper.all');

require('angular-datepicker');

var _pace = require('pace2');

var _pace2 = _interopRequireDefault(_pace);

require('checklist-model');

var _viewerjs = require('viewerjs');

var _viewerjs2 = _interopRequireDefault(_viewerjs);

require('angular-sanitize');

require('angular-auto-complete');

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

require('angular-moment');

require('moment/locale/zh-cn');

require('angular-validation');

require('angular-validation/dist/angular-validation-rule');

require('angular-validation-match');

require("./../../../bower_components/angular-mdeditor/src/angular-mdeditor.js");

var _blockUI = require('./config/blockUI.config');

var _blockUI2 = _interopRequireDefault(_blockUI);

var _toastr = require('./config/toastr.config');

var _toastr2 = _interopRequireDefault(_toastr);

var _uibPagination = require('./config/uibPagination.config');

var _uibPagination2 = _interopRequireDefault(_uibPagination);

var _validationRule = require('./config/validationRule.config');

var _validationRule2 = _interopRequireDefault(_validationRule);

var _uibModal = require('./uibModal.decorator');

var _uibModal2 = _interopRequireDefault(_uibModal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

global.$ = global.jQuery = _jquery2.default;

window.Dropzone = _dropzone2.default;
// import 'angular-xeditable';

window.Viewer = _viewerjs2.default;

// TODO: Angular version - https://github.com/andresesfm/angular-underscore-module/blob/master/angular-underscore-module.js

window._ = _underscore2.default;

window.moment = _moment2.default;

// TODO: https://github.com/Andyczc/angular-validation/commit/051655502558f4d61f6dfc4dc53eed3efdb9e46b

// import {xeditableOptions} from './config/xeditable.config';

exports.default = _angular2.default.module('app.core.vendor', [
// UI widget
'toastr', 'ui.slimscroll', 'uiSwitch', 'hSweetAlert', 'blockUI', 'ngDropzone', 'datePicker', 'ngCropper',
// 'xeditable', // TODO: replace with form-edit directive
'checklist-model', 'autoCompleteModule',

// Utils
'angularMoment', 'validation', 'validation.rule', 'validation.match', 'ui.mdeditor']).config(_blockUI2.default).config(_toastr2.default).config(_uibPagination2.default).config(_validationRule2.default);
// .run(xeditableOptions)
//.decorator('$uibModal', uibModalDecorator)
// .run(xeditableThemes);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/angular-mdeditor/src/angular-mdeditor.js":"/Users/Gavin/Documents/codes/pack/sil/bower_components/angular-mdeditor/src/angular-mdeditor.js","./config/blockUI.config":"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/config/blockUI.config.js","./config/toastr.config":"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/config/toastr.config.js","./config/uibPagination.config":"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/config/uibPagination.config.js","./config/validationRule.config":"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/config/validationRule.config.js","./uibModal.decorator":"/Users/Gavin/Documents/codes/pack/sil/app/core/vendor/uibModal.decorator.js","angular":"angular","angular-auto-complete":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-auto-complete/angular-auto-complete.js","angular-block-ui":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-block-ui/dist/angular-block-ui.js","angular-datepicker":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-datepicker/dist/angular-datepicker.js","angular-dropzone":"angular-dropzone","angular-h-sweetalert":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-h-sweetalert/src/ngSweetAlert.js","angular-moment":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-moment/angular-moment.js","angular-sanitize":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-sanitize/index.js","angular-slimscroll":"angular-slimscroll","angular-toastr":"angular-toastr","angular-ui-switch":"angular-ui-switch","angular-validation":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-validation/dist/angular-validation.js","angular-validation-match":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-validation-match/index.js","angular-validation/dist/angular-validation-rule":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-validation/dist/angular-validation-rule.js","checklist-model":"/Users/Gavin/Documents/codes/pack/sil/node_modules/checklist-model/checklist-model.js","dropzone":"dropzone","jquery":"jquery","jquery-slimscroll":"jquery-slimscroll","moment":"/Users/Gavin/Documents/codes/pack/sil/node_modules/moment/moment.js","moment/locale/zh-cn":"/Users/Gavin/Documents/codes/pack/sil/node_modules/moment/locale/zh-cn.js","ngCropper/dist/ngCropper.all":"/Users/Gavin/Documents/codes/pack/sil/node_modules/ngCropper/dist/ngCropper.all.js","pace2":"pace2","sweetalert":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/sweetalert.js","underscore":"/Users/Gavin/Documents/codes/pack/sil/node_modules/underscore/underscore.js","viewerjs":"/Users/Gavin/Documents/codes/pack/sil/node_modules/viewerjs/dist/viewer.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
function Config($stateProvider) {
    'ngInject';

    $stateProvider.state('account', {
        url: '/account',
        //abstract: true,
        template: '<ui-view><account-list></account-list></ui-view>',
        title: '账号管理',
        sidebarMeta: {
            icon: 'icon-sidebar_members_ic',
            order: 100
        }
    }).state('account.list', {
        url: '',
        template: '<account-list></account-list>',
        title: '账号列表'
    }).state('account.detail', {
        url: '/detail?id',
        template: '<account-detail></account-detail>',
        title: '账号详情'
    });
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/detail/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DetailController = function () {
  DetailController.$inject = ["$state", "$stateParams", "toastr", "AccountService", "AppSettings", "ConfigService", "ProfileService"];
  function DetailController($state, $stateParams, toastr, AccountService, AppSettings, ConfigService, ProfileService) {
    'ngInject';

    _classCallCheck(this, DetailController);

    this._state = $state;
    this._toastr = toastr;
    this._stateParams = $stateParams;

    this._service = AccountService;
    this._configService = ConfigService;

    this.id = this._stateParams.id;
    this.roleKey = AppSettings.roleListKey;
    this.roleList = ProfileService.getRoleList();

    this.info = null;

    this._init();
  }

  _createClass(DetailController, [{
    key: '_init',
    value: function _init() {
      var _this = this;

      var params = {
        id: this.id
      };
      this.stateArr = {
        0: '未激活',
        1: '正常',
        2: '已冻结',
        3: '已删除'
      };

      this._service.get(params).then(function (data) {
        _this.person = data;
      });
    }
  }, {
    key: 'setUser',
    value: function setUser() {
      var params = {
        user_id: this.id,
        new_password: this.person.new_password,
        true_name: this.person.true_name,
        phone: this.person.phone,
        role: this.person.role,
        role_name: this.person.role_name,
        state: this.person.state
      };
      this._service.set(params).then(function (data) {
        location.href = '/#/account';
      });
    }
  }]);

  return DetailController;
}();

exports.default = DetailController;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/detail/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var detail = {
  templateUrl: 'modules/account/detail/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = detail;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/detail/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/list/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mcPagination = require('../../../core/components/mcPagination/mc-pagination.class');

var _mcPagination2 = _interopRequireDefault(_mcPagination);

var _modals = require('../modals');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListController = function (_Pagination) {
  ListController.$inject = ["$injector", "$state", "$location", "$stateParams", "toastr", "$uibModal", "AccountService"];
  _inherits(ListController, _Pagination);

  function ListController($injector, $state, $location, $stateParams, toastr, $uibModal, AccountService) {
    'ngInject';

    _classCallCheck(this, ListController);

    var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this, $injector));

    _this._state = $state;
    _this._location = $location;
    _this._stateParams = $stateParams;
    _this._modal = $uibModal;

    _this._toastr = toastr;

    _this._service = AccountService;

    _this.filters = {};

    _this.oneAtATime = true;

    _this._init();

    _this.stateArr = {
      0: '未激活',
      1: '正常',
      2: '已冻结',
      3: '已删除'
    };

    return _this;
  }

  _createClass(ListController, [{
    key: '_init',
    value: function _init() {
      this._initFilters();
      this._getList();
    }
  }, {
    key: '_initFilters',
    value: function _initFilters() {

      var stateParams = this._stateParams;
      //this.filters.keyword = stateParams.keyword || void(0);
    }
  }, {
    key: '_getList',
    value: function _getList() {
      var _this2 = this;

      var params = this._filterEmptyValue();
      params.page = this.pagination.page;
      params.page_limit = 20;

      this._service.list(params).then(function (data) {
        _this2.pagination.count = data.count;
        _this2.pagination.pageSize = data.page_limit;
        _this2.list = data.users;
      });
    }
  }, {
    key: 'pageChanged',
    value: function pageChanged() {
      this._getList();
    }
  }, {
    key: 'reSearch',
    value: function reSearch() {
      this._getList();
    }
  }, {
    key: 'addUser',
    value: function addUser() {
      var list = this.list;
      var resolve = {
        info: function info() {
          return {
            list: list
          };
        }
      };

      var options = _extends({}, _modals.addConfig, { resolve: resolve });

      this._modal.open(options);
    }
  }, {
    key: 'assignBranch',
    value: function assignBranch(item) {
      var resolve = {
        info: function info() {
          return item;
        }
      };

      var options = _extends({}, _modals.branchConfig, { resolve: resolve });

      this._modal.open(options);
    }
  }]);

  return ListController;
}(_mcPagination2.default);

exports.default = ListController;

},{"../../../core/components/mcPagination/mc-pagination.class":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js","../modals":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/modals/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/list/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = {
  templateUrl: 'modules/account/list/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = List;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/list/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/modals/add/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$validation", "$uibModalInstance", "toastr", "AccountService", "info", "AppSettings", "ConfigService", "ProfileService"];
  function Controller($scope, $state, $validation, $uibModalInstance, toastr, AccountService, info, AppSettings, ConfigService, ProfileService) {
    'ngInject';

    var _this = this;

    _classCallCheck(this, Controller);

    this._scope = $scope;
    this._state = $state;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this._service = AccountService;
    this._configService = ConfigService;

    this.roleKey = AppSettings.roleListKey;
    this.roleList = ProfileService.getRoleList();

    this.info = info;
    this.bankList = [];

    this.inputInfo = {
      true_name: '',
      phone: '',
      role: ''
    };

    this.autoCompleteOptions = {
      minimumChars: 1,
      data: function data(term) {
        term = term.toUpperCase();
        var match = _.filter(info.agencyList, function (value) {
          return value.startsWith(term);
        });
        return match;
      }
    };

    this._service.getBankList().then(function (data) {
      _this.bankList = data;
    });
  }

  _createClass(Controller, [{
    key: 'assignBranch',
    value: function assignBranch(item) {
      var resolve = {
        info: function info() {
          return item;
        }
      };

      var options = _extends({}, branchConfig, { resolve: resolve });

      this._modal.open(options);
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this2 = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this2.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this3 = this;

      var data = this.inputInfo;
      this._service.add(data).then(function (data) {
        _this3._toastr.success('添加成功');
        _this3.cancel();
        _this3._state.reload();
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/modals/add/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Configuration = {
  templateUrl: 'modules/account/modals/add/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = Configuration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/modals/add/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/modals/branch/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$validation", "$uibModalInstance", "toastr", "AccountService", "info"];
  function Controller($scope, $state, $validation, $uibModalInstance, toastr, AccountService, info) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;
    this._state = $state;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this._service = AccountService;

    this.info = info;

    this.inputInfo = {
      branch: info.bank && info.bank.id
    };

    this.list = null;

    this._getBankList();
  }

  _createClass(Controller, [{
    key: '_getBankList',
    value: function _getBankList() {
      var _this = this;

      this._service.getBankList().then(function (data) {
        // console.log(data);
        _this.list = data;
      });
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this2 = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this2.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this3 = this;

      // console.log('submit')
      this._service.set({
        user_id: this.info.id,
        bank_id: this.inputInfo.branch
      }).then(function (data) {
        _this3.cancel();
        _this3._toastr.success('设置成功');
        _this3._state.reload();
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/modals/branch/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var configuration = {
  templateUrl: 'modules/account/modals/branch/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = configuration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/modals/branch/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/modals/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.branchConfig = exports.addConfig = undefined;

var _add = require('./add');

var _add2 = _interopRequireDefault(_add);

var _branch = require('./branch');

var _branch2 = _interopRequireDefault(_branch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.addConfig = _add2.default;
exports.branchConfig = _branch2.default;

},{"./add":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/modals/add/index.js","./branch":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/modals/branch/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _bootstrap = require('bootstrap');

var _bootstrap2 = _interopRequireDefault(_bootstrap);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

var _detail = require('./detail/');

var _detail2 = _interopRequireDefault(_detail);

var _list = require('./list/');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import demoService      from './services/demo.service';


exports.default = _angular2.default.module('app.modules.account', [])
// .filter('filterType', filterType)
.service('AccountService', _service2.default).component('accountList', _list2.default).component('accountDetail', _detail2.default).config(_config2.default);

},{"./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/config.js","./detail/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/detail/index.js","./list/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/list/index.js","./service":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/service.js","angular":"angular","bootstrap":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/dist/js/npm.js","jquery":"jquery"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  Service.$inject = ["$http", "httpHelper", "$rootScope", "$state", "ApiMap"];
  function Service($http, httpHelper, $rootScope, $state, ApiMap) {
    'ngInject';

    _classCallCheck(this, Service);

    this._http = $http;
    // this.$q = $q;
    this._httpHelper = httpHelper;
    this._apiMap = ApiMap;
    this._api = ApiMap.person;

    this._rootScope = $rootScope;
    this._state = $state;
  }

  _createClass(Service, [{
    key: 'list',
    value: function list(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.list, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'get',
    value: function get(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.get, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'set',
    value: function set(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.set, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'add',
    value: function add(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.add, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'getBankList',
    value: function getBankList(params) {
      this._httpHelper.blockUI.start();
      return this._http.post(this._apiMap.bank.get, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'getRoleList',
    value: function getRoleList() {
      this._httpHelper.blockUI.start();

      return this._http.get(this._apiMap.auth.get).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }]);

  return Service;
}();

exports.default = Service;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
function Config($stateProvider) {
  'ngInject';

  $stateProvider.state('bank', {
    url: '/bank',
    //abstract: true,
    template: '<ui-view><bank-list></bank-list></ui-view>',
    title: '机构管理',
    sidebarMeta: {
      icon: 'icon-sidebar_members_ic',
      order: 10
    }
  });
  // .state('bank.list', {
  //     url: '',
  //     template: '<bank-list></bank-list>',
  //     title: '机构列表'
  // })
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/list/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mcPagination = require('../../../core/components/mcPagination/mc-pagination.class');

var _mcPagination2 = _interopRequireDefault(_mcPagination);

var _modals = require('../modals');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListController = function (_Pagination) {
  ListController.$inject = ["$injector", "$state", "$location", "$stateParams", "toastr", "$uibModal", "BankService"];
  _inherits(ListController, _Pagination);

  function ListController($injector, $state, $location, $stateParams, toastr, $uibModal, BankService) {
    'ngInject';

    _classCallCheck(this, ListController);

    var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this, $injector));

    _this._state = $state;
    _this._location = $location;
    _this._stateParams = $stateParams;
    _this._modal = $uibModal;

    _this._toastr = toastr;

    _this._service = BankService;

    _this.filters = {};

    _this.oneAtATime = true;

    _this._init();
    _this.bankStateList = [{
      value: 1,
      label: '正常'
    }, {
      value: 3,
      label: '已删除'
    }];
    return _this;
  }

  _createClass(ListController, [{
    key: '_init',
    value: function _init() {
      this._initFilters();
      this._getList();
    }
  }, {
    key: '_initFilters',
    value: function _initFilters() {

      var stateParams = this._stateParams;
      //this.filters.keyword = stateParams.keyword || void(0);
    }
  }, {
    key: '_getList',
    value: function _getList() {
      var _this2 = this;

      var params = this._filterEmptyValue();
      //params.page = this.pagination.page;
      //this.pagination.pageSize = 5;
      this._service.list(params).then(function (data) {
        //this.pagination.count = 10;
        _this2.list = data;
      });
    }
  }, {
    key: 'pageChanged',
    value: function pageChanged() {
      this._getList();
    }
  }, {
    key: 'reSearch',
    value: function reSearch() {
      this._getList();
    }
  }, {
    key: 'switch',
    value: function _switch(key, value) {

      if (!key) {
        return false;
      }

      this.filters[key] = value;

      this.reSearch();
    }
  }, {
    key: 'addBank',
    value: function addBank() {
      var list = this.list;
      var resolve = {
        info: function info() {
          return {
            list: list
          };
        }
      };

      var options = _extends({}, _modals.addConfig, { resolve: resolve });

      this._modal.open(options);
    }
  }, {
    key: 'setMap',
    value: function setMap(item) {
      var resolve = {
        info: function info() {
          return item;
        }
      };

      var options = _extends({}, _modals.mapConfig, { resolve: resolve });

      var modal = this.modal;
      this._modal.open(options);
    }
  }, {
    key: 'setName',
    value: function setName(item) {
      var resolve = {
        info: function info() {
          return item;
        }
      };

      var options = _extends({}, _modals.editConfig, { resolve: resolve });

      var modal = this.modal;
      this._modal.open(options);
    }
  }, {
    key: 'delete',
    value: function _delete(item) {
      var _this3 = this;

      this._service.set({
        id: item.id,
        state: 3
      }).then(function (data) {
        _this3._toastr.success('删除成功');
        _this3._state.reload();
      });
    }
  }, {
    key: 'redelete',
    value: function redelete(item) {
      var _this4 = this;

      this._service.set({
        id: item.id,
        state: 1
      }).then(function (data) {
        _this4._toastr.success('取消删除成功');
        _this4._state.reload();
      });
    }
  }, {
    key: 'assignBranch',
    value: function assignBranch(item) {
      var resolve = {
        info: function info() {
          return item;
        }
      };

      var options = _extends({}, _modals.branchConfig, { resolve: resolve });

      this._modal.open(options);
    }
  }]);

  return ListController;
}(_mcPagination2.default);

exports.default = ListController;

},{"../../../core/components/mcPagination/mc-pagination.class":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js","../modals":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/list/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = {
  templateUrl: 'modules/bank/list/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = List;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/list/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/add/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$validation", "$uibModalInstance", "toastr", "BankService", "info"];
  function Controller($scope, $state, $validation, $uibModalInstance, toastr, BankService, info) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;
    this._state = $state;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this._service = BankService;

    this.info = info;

    this.inputInfo = {
      name: ''
    };

    this.autoCompleteOptions = {
      minimumChars: 1,
      data: function data(term) {
        term = term.toUpperCase();
        var match = _.filter(info.agencyList, function (value) {
          return value.startsWith(term);
        });
        return match;
      }
    };
  }

  _createClass(Controller, [{
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this2 = this;

      var data = this.inputInfo;
      this._service.add(data).then(function (data) {
        _this2._toastr.success('添加成功');
        _this2.cancel();
        _this2._state.reload();
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/add/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Configuration = {
  templateUrl: 'modules/bank/modals/add/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = Configuration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/add/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/branch/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$validation", "$uibModalInstance", "toastr", "BankService", "info"];
  function Controller($scope, $state, $validation, $uibModalInstance, toastr, BankService, info) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;
    this._state = $state;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this._service = BankService;

    this.info = info;

    this.inputInfo = {
      branch: info.bank && info.bank.id
    };

    this.list = null;

    this._getBankList();
  }

  _createClass(Controller, [{
    key: '_getBankList',
    value: function _getBankList() {
      var _this = this;

      this._service.list({
        state: 1
      }).then(function (data) {
        _this.list = data;
      });
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this2 = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this2.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this3 = this;

      this._service.set({
        superior_id: this.inputInfo.branch,
        id: this.info.id
      }).then(function (data) {
        _this3.cancel();
        _this3._toastr.success('设置成功');
        _this3._state.reload();
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/branch/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var configuration = {
  templateUrl: 'modules/bank/modals/branch/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = configuration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/branch/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/edit/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$validation", "$uibModalInstance", "toastr", "BankService", "info"];
  function Controller($scope, $state, $validation, $uibModalInstance, toastr, BankService, info) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;
    this._state = $state;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this._service = BankService;

    this.info = info;

    this.inputInfo = {
      name: this.info.name,
      phone: this.info.phone,
      address: this.info.address
    };

    this.autoCompleteOptions = {
      minimumChars: 1,
      data: function data(term) {
        term = term.toUpperCase();
        var match = _.filter(info.agencyList, function (value) {
          return value.startsWith(term);
        });
        return match;
      }
    };
  }

  _createClass(Controller, [{
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this2 = this;

      var data = {
        id: this.info.id,
        name: this.inputInfo.name,
        phone: this.inputInfo.phone,
        address: this.inputInfo.address
      };
      this._service.set(data).then(function (data) {
        _this2._toastr.success('修改成功');
        _this2.cancel();
        _this2._state.reload();
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/edit/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Configuration = {
  templateUrl: 'modules/bank/modals/edit/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = Configuration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/edit/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editConfig = exports.mapConfig = exports.addConfig = exports.branchConfig = undefined;

var _branch = require('./branch');

var _branch2 = _interopRequireDefault(_branch);

var _add = require('./add');

var _add2 = _interopRequireDefault(_add);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

var _edit = require('./edit');

var _edit2 = _interopRequireDefault(_edit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.branchConfig = _branch2.default;
exports.addConfig = _add2.default;
exports.mapConfig = _map2.default;
exports.editConfig = _edit2.default;

},{"./add":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/add/index.js","./branch":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/branch/index.js","./edit":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/edit/index.js","./map":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/map/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/map/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$validation", "$uibModalInstance", "toastr", "BankService", "info"];
  function Controller($scope, $state, $validation, $uibModalInstance, toastr, BankService, info) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;
    this._state = $state;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this._service = BankService;

    this.info = info;

    if (this.info.coordinates == null) {
      this.longitude = 116.331398, this.latitude = 39.897445;
    } else {
      var _info$coordinates$spl = this.info.coordinates.split(",");

      var _info$coordinates$spl2 = _slicedToArray(_info$coordinates$spl, 2);

      this.longitude = _info$coordinates$spl2[0];
      this.latitude = _info$coordinates$spl2[1];
    }

    this.opts = {
      center: {
        longitude: this.longitude,
        latitude: this.latitude
      },
      zoom: 11,
      city: 'ShenZhen',
      enableScrollWheelZoom: true
    };
  }

  _createClass(Controller, [{
    key: 'loadMap',
    value: function loadMap(map) {
      map.disableAutoResize();
      map.enableAutoResize();
      if (this.info.coordinates == null) {
        var myFun = function myFun(result) {
          var cityName = result.name;
          map.setCenter(cityName);
        };

        var myCity = new BMap.LocalCity();
        myCity.get(myFun);
      } else {
        var point = new BMap.Point(this.longitude, this.latitude);
        new BMap.Geocoder().getLocation(point, function (rs) {
          map.setCenter(rs.addressComponents.city);
        });
      }
      var that = this;
      map.addEventListener("click", function (e) {
        var pt = e.point;
        that.latitude = pt.lat;
        that.longitude = pt.lng;
        new BMap.Geocoder().getLocation(pt, function (rs) {
          var addComp = rs.addressComponents;
          var r = confirm(addComp.province + ", " + addComp.city + ", " + addComp.district + ", " + addComp.street + ", " + addComp.streetNumber);
          if (r) {
            that._service.set({
              id: that.info.id,
              address: addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber,
              coordinates: that.longitude + "," + that.latitude
            }).then(function (data) {
              that.cancel();
              that._toastr.success('设置成功');
              that._state.reload();
            });
          }
        });
      });
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/map/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Configuration = {
  templateUrl: 'modules/bank/modals/map/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = Configuration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/modals/map/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _bootstrap = require('bootstrap');

var _bootstrap2 = _interopRequireDefault(_bootstrap);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

var _list = require('./list/');

var _list2 = _interopRequireDefault(_list);

var _angularBaiduMap = require('angular-baidu-map');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import demoService      from './services/demo.service';


exports.default = _angular2.default.module('app.modules.bank', [_angularBaiduMap.ngBaiduMap])
// .filter('filterType', filterType)
.service('BankService', _service2.default).component('bankList', _list2.default).config(_config2.default)
// .config(['mapScriptServiceProvider', function(provider) {
//     provider.setKey('8BEaSdo8E7VEHjM0pxWs8gIsHhkDlOOW');
// }])
;

},{"./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/config.js","./list/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/list/index.js","./service":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/service.js","angular":"angular","angular-baidu-map":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-baidu-map/dist/angular-baidu-map.js","bootstrap":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/dist/js/npm.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  Service.$inject = ["$http", "httpHelper", "$rootScope", "$state", "ApiMap"];
  function Service($http, httpHelper, $rootScope, $state, ApiMap) {
    'ngInject';

    _classCallCheck(this, Service);

    this._http = $http;
    // this.$q = $q;
    this._httpHelper = httpHelper;

    this._api = ApiMap.bank;

    this._rootScope = $rootScope;
    this._state = $state;
  }

  _createClass(Service, [{
    key: 'list',
    value: function list(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.get, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'add',
    value: function add(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.add, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'set',
    value: function set(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.set, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }]);

  return Service;
}();

exports.default = Service;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/dashboard/dashboard.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DashboardController = exports.DashboardController = function () {
  DashboardController.$inject = ["$rootScope", "$scope", "baseService", "utilService", "AppSettings"];
  function DashboardController($rootScope, $scope, baseService, utilService, AppSettings) {
    'ngInject';

    var _this = this;

    _classCallCheck(this, DashboardController);

    this.html = '';

    this.text = '### 标题\n' + '```\nconsole.log(Array.every(classes, Boolean));\n```\n' + '```javascript\nconsole.log(Array.every(classes, Boolean));\n```\n' + '```xml\n<html>\n\t<head>\n\t</head>\n\t<body>\n\t</body>\n</html>\n```';

    var destroyWatchText = $scope.$watch('vm.text', function () {
      console.log(marked(_this.text));

      _this.html = marked(_this.text);
    });
    /*
      * $scope销毁的时候,结束监听
      */
    $scope.$on('$destroy', destroyWatchText);

    this.init();
  }

  _createClass(DashboardController, [{
    key: 'init',
    value: function init() {}
  }]);

  return DashboardController;
}();

var dashboard = exports.dashboard = {
  templateUrl: 'modules/dashboard/dashboard.html',
  controller: DashboardController,
  controllerAs: 'vm'
};

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/dashboard/dashboard.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _dashboard = require('./dashboard');

var _dashboard2 = require('./dashboard.service');

var _dashboard3 = _interopRequireDefault(_dashboard2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.modules.dashboard', [])
// .service('dashboardService', dashboardService)
.component('dashboard', _dashboard.dashboard);

},{"./dashboard":"/Users/Gavin/Documents/codes/pack/sil/app/modules/dashboard/dashboard.js","./dashboard.service":"/Users/Gavin/Documents/codes/pack/sil/app/modules/dashboard/dashboard.service.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/dashboard/dashboard.service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var dashboardService = function dashboardService(AppSettings, utilService, httpHelper, $http) {
  'ngInject';

  _classCallCheck(this, dashboardService);
};
dashboardService.$inject = ["AppSettings", "utilService", "httpHelper", "$http"];

exports.default = dashboardService;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/access/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ListController = function () {
  ListController.$inject = ["$rootScope", "$state", "toastr", "AppSettings", "ConfigService", "ProfileService"];
  function ListController($rootScope, $state, toastr, AppSettings, ConfigService, ProfileService) {
    'ngInject';

    _classCallCheck(this, ListController);

    this.$state = $state;
    this.staticMenuItems = [];
    this._isMenuCollapsed = true;

    this._service = ConfigService;
    this.roleList = ProfileService.getRoleList();

    this._scope = $rootScope;
    this._toastr = toastr;

    this.key = AppSettings.accessKey;
    this.roleKey = AppSettings.roleListKey;

    // this.roleList = [];
    this.getMenuItems();
    this._get();
  }

  _createClass(ListController, [{
    key: '_get',
    value: function _get() {
      var _this = this;

      this._service.get(this.key).then(function (data) {
        if (data) {
          _this.access = angular.fromJson(data);
        }
      });
    }
  }, {
    key: 'getMenuItems',
    value: function getMenuItems() {

      var states = this.defineMenuItemStates();
      // let menuItems = states.filter(item => item.level == 0 && !(item.accessRoleIds && item.accessRoleIds.indexOf(this._scope.accessControl.role_id) == -1) );
      // let menuItems = states.filter(item => item.level == 0);

      // menuItems.forEach( item => {
      //   var children = states.filter( child => {
      //     return child.level == 1 && child.name.indexOf(item.name) === 0;
      //   });

      //   item.subMenu = children.length ? children : null;

      //   // 用第三级的指定入口替换二级抽象路由
      //   item.subMenu && item.subMenu.forEach( (third, index) => {
      //     if(third.entry) {
      //       let entry = states.filter(x => x.name === third.entry);
      //       if(entry.length) {
      //         item.subMenu[index] = entry[0];
      //       }
      //     }
      //   });

      // });

      // this.list = menuItems.concat(this.staticMenuItems);
      var extend = this._getEnterpriseAccess();
      this.list = states.concat(extend);
    }
  }, {
    key: 'getAllStateRefsRecursive',
    value: function getAllStateRefsRecursive(item) {

      return this._iterateSubItems(item);
    }
  }, {
    key: 'defineMenuItemStates',
    value: function defineMenuItemStates() {

      return this.$state.get().filter(function (item) {
        return item.name && item.title;
      });
      //   // .filter(state => {
      //   //   return state.sidebarMeta;
      //   // })
      //   .map(state => {
      //     var meta = state.sidebarMeta;
      //     return {
      //       name: state.name,
      //       title: state.title,
      //       level: (state.name.match(/\./g) || []).length,
      //       order: meta.order,
      //       icon: meta.icon,
      //       stateRef: state.name,
      //       entry: meta.entry,
      //       accessRoleIds: meta.accessRoleIds,
      //     };
      //   })
      //   .sort((a, b) => {
      //     return (a.level - b.level) * 100 + a.order - b.order;
      //   });
    }
  }, {
    key: '_getEnterpriseAccess',
    value: function _getEnterpriseAccess() {
      return [{
        name: 'enterprise.filter.role_a_state',
        title: '主理状态筛选'
      }, {
        name: 'enterprise.list.role_show',
        title: '列表显示客户经理'
      }, {
        name: 'enterprise.assign.role',
        title: '分配客户经理'
      }, {
        name: 'enterprise.assign.branch',
        title: '分配机构'
      }];
    }
  }, {
    key: '_iterateSubItems',
    value: function _iterateSubItems(currentItem) {
      var _this2 = this;

      var result = [];
      currentItem.subMenu && currentItem.subMenu.forEach(function (subItem) {
        subItem.stateRef && result.push(subItem.stateRef);
        _this2._iterateSubItems(subItem);
      });
      return result;
    }
  }, {
    key: 'submit',
    value: function submit() {
      var _this3 = this;

      console.log('submit');
      console.log(this.access);

      this._service.set({
        key: this.key,
        value: angular.toJson(this.access)
      }).then(function (data) {
        _this3._toastr.success('添加成功');
      });
    }
  }]);

  return ListController;
}();

exports.default = ListController;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/access/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var demoList = {
  templateUrl: 'modules/demo/access/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = demoList;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/access/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/component/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function Controller() {
  'ngInject';

  _classCallCheck(this, Controller);

  this.info = {};
};

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/component/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var component = {
  templateUrl: 'modules/demo/component/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = component;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/component/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/demo.config.js":[function(require,module,exports){
'use strict';

demoConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
function demoConfig($stateProvider) {
  'ngInject';

  $stateProvider.state('access', {
    url: '/access',
    // abstract: true,
    template: '<ui-view><demo-access></demo-access></ui-view>',
    title: '权限配置',
    sidebarMeta: {
      icon: 'icon-sidebar_members_ic',
      order: 3000
    }
  })
  // .state('demo.list', {
  //     url: '/list?page&gender&keyword',
  //     template: '<demo-list></demo-list>',
  //     title: '列表',
  //     sidebarMeta: {
  //       order: 30
  //     }
  // })
  // .state('demo.component', {
  //   url: '/component',
  //   template: '<demo-component></demo-component>',
  //   title: 'Component',
  //   sidebarMeta: {
  //     order: 10
  //   }
  // })
  // .state('demo.access', {
  //   url: '/access',
  //   template: '<demo-access></demo-access>',
  //   title: 'access',
  //   sidebarMeta: {
  //     order: 10
  //   }
  // })
  ;
}

exports.default = demoConfig;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/demo.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _demo = require('./demo.config');

var _demo2 = _interopRequireDefault(_demo);

var _list = require('./list/');

var _list2 = _interopRequireDefault(_list);

var _component = require('./component');

var _component2 = _interopRequireDefault(_component);

var _access = require('./access');

var _access2 = _interopRequireDefault(_access);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import demoService      from './services/demo.service';


exports.default = _angular2.default.module('app.modules.demo', [])
// .filter('filterType', filterType)

.component('demoList', _list2.default).component('demoComponent', _component2.default).component('demoAccess', _access2.default).config(_demo2.default);

},{"./access":"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/access/index.js","./component":"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/component/index.js","./demo.config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/demo.config.js","./list/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/list/index.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/list/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mcPagination = require('../../../core/components/mcPagination/mc-pagination.class');

var _mcPagination2 = _interopRequireDefault(_mcPagination);

var _modals = require('../modals');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListController = function (_Pagination) {
  ListController.$inject = ["$injector", "$location", "$stateParams", "$uibModal", "AppSettings"];
  _inherits(ListController, _Pagination);

  function ListController($injector, $location, $stateParams, $uibModal, AppSettings) {
    'ngInject';

    _classCallCheck(this, ListController);

    var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this, $injector));

    _this._location = $location;
    _this._stateParams = $stateParams;
    _this._modal = $uibModal;

    _this.genderList = AppSettings.genderList;
    _this.filters = {};

    _this.start_date = moment();

    _this.end_date = moment();
    _this.startTimeMaxLimit = moment();
    _this.endTimeMaxLimit = moment();

    _this._init();

    return _this;
  }

  _createClass(ListController, [{
    key: '_init',
    value: function _init() {

      this._initFilters();
      this._getList();
    }
  }, {
    key: '_initFilters',
    value: function _initFilters() {
      // console.log(this._stateParams);
      var stateParams = this._stateParams;
      // this.pagination.page = +stateParams.page;
      this.filters.gender = +stateParams.gender || void 0;

      this.filters.keyword = stateParams.keyword || void 0;
    }
  }, {
    key: '_getList',
    value: function _getList() {

      var params = this._filterEmptyValue();
      params.pageSize = this.pagination.pageSize;
      params.page = this.pagination.page;

      this.list = [{ name: 'Lily', gender: 'falman', age: '16' }, { name: 'Li lei', gender: 'man', age: '26' }];
      this.pagination.count = 20;
    }
  }, {
    key: 'reSearch',
    value: function reSearch() {
      var page = 1;
      this._location.search(_extends({}, this._filterEmptyValue(), { page: page }));
    }
  }, {
    key: 'switch',
    value: function _switch(key, value) {

      if (!key) {
        return false;
      }

      this.filters[key] = value;

      this.reSearch();
    }
  }, {
    key: 'edit',
    value: function edit(item) {
      var resolve = {
        info: function info() {
          return item;
        }
      };

      var options = _extends({}, _modals.editConfiguration, { resolve: resolve });

      this._modal.open(options);
    }

    // datepicker

  }, {
    key: 'changeTime',
    value: function changeTime(type) {
      var values = {
        minDate: false,
        maxDate: false
      };
      if (type == 'start') {
        this.filters.start_date = this.start_date.format('YYYY-MM-DD');
        this.endTimeMinLimit = this.start_date;
        values.minDate = this.start_date;
        values.maxDate = moment();
      } else {
        this.filters.end_date = this.end_date.format('YYYY-MM-DD');
        this.startTimeMaxLimit = this.end_date;
        values.maxDate = this.end_date;
      }
    }
  }]);

  return ListController;
}(_mcPagination2.default);

exports.default = ListController;

},{"../../../core/components/mcPagination/mc-pagination.class":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js","../modals":"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/modals/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/list/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var demoList = {
  templateUrl: 'modules/demo/list/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = demoList;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/list/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/modals/edit/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var editController = function () {
  editController.$inject = ["$scope", "$validation", "$uibModalInstance", "toastr", "info"];
  function editController($scope, $validation, $uibModalInstance, toastr, info) {
    'ngInject';

    _classCallCheck(this, editController);

    this._scope = $scope;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this.info = info;
  }

  _createClass(editController, [{
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {}
  }]);

  return editController;
}();

exports.default = editController;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/modals/edit/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var editConfiguration = {
  templateUrl: 'modules/demo/modals/edit/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = editConfiguration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/modals/edit/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/modals/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editConfiguration = undefined;

var _edit = require('./edit');

var _edit2 = _interopRequireDefault(_edit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.editConfiguration = _edit2.default;

},{"./edit":"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/modals/edit/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
function Config($stateProvider) {
    'ngInject';

    $stateProvider.state('enterprise', {
        url: '/enterprise?page&role_a_disable&name&state&bank_name',
        // abstract: true,
        template: '<ui-view><enterprise-list></enterprise-list></ui-view>',
        title: '企业管理',
        sidebarMeta: {
            icon: 'icon-sidebar_members_ic',
            order: 400
        }
    })
    // .state('enterprise.list', {
    //     url: '?page&role_a_disable&name&state&bank_name',
    //     template: '<enterprise-list></enterprise-list>',
    //     title: '企业列表',
    //     // sidebarMeta: {
    //     //   order: 10
    //     // }
    // })
    .state('enterprise.detail', {
        url: '/detail?id',
        template: '<enterprise-detail></enterprise-detail>',
        title: '企业详情'
    });
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/detail/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import {branchConfig, manageConfig} from '../modals';

// const mock_data = {"status":"200","message":"查询成功","data":{"name":"小米科技有限责任公司","econ_kind":"有限责任公司(自然人投资或控股)","regist_capi":"185000 万人民币","scope":"手机技术开发；手机生产、手机服务。（限海淀区永捷北路2号二层经营）；技术开发；货物进出口、技术进出口、代理进出口；销售通讯设备；维修仪器仪表；维修办公设备；承办展览展示活动；会议服务；筹备、策划、组织大型庆典。（企业依法自主选择经营项目，开展经营活动；依法须经批准的项目，经相关部门批准后依批准的内容开展经营活动；不得从事本市产业政策禁止和限制类项目的经营活动。）","term_start":"2010-03-03","term_end":"2030-03-02","belong_org":"海淀分局","oper_name":"雷军","check_date":"2015-03-03","start_date":"2010-03-03","end_date":"-","status":"开业","org_no":"551385082","credit_no":"91110108551385082Q","province":"BJ","id":"534472fd-7d53-4958-8132-d6a6242423d8","abnormal_items":[],"reg_no":"110108012660422","address":"北京市海淀区清河中街68号华润五彩城购物中心二期13层","employees":[{"name":"雷军","job_title":"董事长"},{"name":"林斌","job_title":"董事"},{"name":"刘芹","job_title":"董事"},{"name":"许达来","job_title":"董事"},{"name":"雷军","job_title":"经理"},{"name":"黎万强","job_title":"监事"}],"branches":[],"changerecords":[{"change_item":"注册资本","change_date":"2016-03-24","before_content":"5000万元","after_content":"185000万元"},{"change_item":"董事（理事）、经理、监事","change_date":"2014-03-12","before_content":"（注：标有标志的为法定代表人）1 雷军 董事长 2 许达来 董事 3 刘芹 董事 4 林斌 董事 5 邝子平 董事 6 雷军 经理 7 黎万强 监事 ","after_content":"（注：标有标志的为法定代表人）1 雷军 董事长 2 许达来 董事 3 刘芹 董事 4 林斌 董事 5 雷军 经理 6 黎万强 监事 "},{"change_item":"董事（理事）、经理、监事","change_date":"2013-11-07","before_content":"（注：标有标志的为法定代表人）1 雷军 董事长 2 林斌 董事 3 刘芹 董事 4 HANS TUNG 董事 5 雷军 经理 6 黎万强 监事 ","after_content":"（注：标有标志的为法定代表人）1 雷军 董事长 2 许达来 董事 3 刘芹 董事 4 林斌 董事 5 邝子平 董事 6 雷军 经理 7 黎万强 监事 "},{"change_item":"企业名称","change_date":"2013-07-30","before_content":"北京小米科技有限责任公司","after_content":"小米科技有限责任公司"},{"change_item":"住所","change_date":"2013-07-30","before_content":"北京市海淀区永捷北路2号二层","after_content":"北京市海淀区清河中街68号华润五彩城购物中心二期13层"},{"change_item":"注册资本","change_date":"2013-06-04","before_content":"2691.5989万元","after_content":"5000万元"},{"change_item":"实收资本（金）","change_date":"2013-06-04","before_content":"2691.5989万元","after_content":"5000万元"},{"change_item":"认缴的出资额,实缴的出资额","change_date":"2013-06-04","before_content":"1 雷军 2094.17 自然人股东 2 黎万强 272.45 自然人股东 3 洪锋 270.87 自然人股东 4 刘德 54.1 自然人股东 ","after_content":"1 雷军 3890.11 自然人股东 2 黎万强 506.06 自然人股东 3 洪锋 503.33 自然人股东 4 刘德 100.5 自然人股东 "},{"change_item":"经营范围","change_date":"2012-08-29","before_content":"手机技术开发；手机生产、手机服务。技术开发；货物进出口、技术进出口、代理进出口。","after_content":"手机技术开发；手机生产、手机服务。技术开发；货物进出口、技术进出口、代理进出口；销售通讯设备；维修仪器仪表；维修办公设备；承办展览展示活动；会议服务；筹备、策划、组织大型庆典。 （未取得行政许可的项目除外）"},{"change_item":"注册资本","change_date":"2011-05-24","before_content":"2637.4978万元","after_content":"2691.5989万元"},{"change_item":"实收资本（金）","change_date":"2011-05-24","before_content":"2637.4978万元","after_content":"2691.5989万元"},{"change_item":"认缴的出资额,认缴的出资方式,认缴的出资时间,实缴的出资额,实缴的出资方式,实缴的出资时间,投资人","change_date":"2011-05-24","before_content":"1 雷军 2094.17 自然人股东 2 黎万强 272.45 自然人股东 3 洪锋 270.87 自然人股东 ","after_content":"1 雷军 2094.17 自然人股东 2 黎万强 272.45 自然人股东 3 洪锋 270.87 自然人股东 4 刘德 54.1 自然人股东 "},{"change_item":"住所","change_date":"2011-02-14","before_content":"北京市海淀区北四环西路9号807室","after_content":"北京市海淀区永捷北路2号二层"},{"change_item":"经营范围","change_date":"2011-02-14","before_content":"技术开发。（法律、行政法规、国务院决定禁止的，不得经营；法律、行政法规、国务院决定规定应经许可的，经审批机关批准并经工商行政管理机关登记注册后方可经营；法律、行政法规、国务院决定未规定许可的，自主选择经营项目开展经营活动。）","after_content":"手机技术开发；手机生产、手机服务。技术开发；货物进出口、技术进出口、代理进出口。"},{"change_item":"董事（理事）、经理、监事","change_date":"2011-02-14","before_content":"（注：标有标志的为法定代表人）1 雷军 董事长 2 林斌 董事 3 刘芹 董事 4 雷军 经理 5 黎万强 监事 ","after_content":"（注：标有标志的为法定代表人）1 雷军 董事长 2 林斌 董事 3 刘芹 董事 4 HANS TUNG 董事 5 雷军 经理 6 黎万强 监事 "},{"change_item":"认缴的出资额,认缴的出资方式,认缴的出资时间,实缴的出资额,实缴的出资方式,实缴的出资时间","change_date":"2010-09-01","before_content":"1 雷军 2457.66 自然人股东 2 洪锋 169.51 自然人股东 3 黎万强 10.33 自然人股东 ","after_content":"1 雷军 2094.17 自然人股东 2 黎万强 272.45 自然人股东 3 洪锋 270.87 自然人股东 "},{"change_item":"注册资本","change_date":"2010-07-28","before_content":"100万元","after_content":"2637.4978万元"},{"change_item":"实收资本（金）","change_date":"2010-07-28","before_content":"100万元","after_content":"2637.4978万元"},{"change_item":"认缴的出资额,实缴的出资额","change_date":"2010-07-28","before_content":"1 雷军 79.4 自然人股东 2 黎万强 10.33 自然人股东 3 洪锋 10.27 自然人股东 ","after_content":"1 雷军 2457.66 自然人股东 2 洪锋 169.51 自然人股东 3 黎万强 10.33 自然人股东 "},{"change_item":"董事（理事）、经理、监事","change_date":"2010-07-28","before_content":"（注：标有标志的为法定代表人）1 雷军 执行董事 2 雷军 经理 3 黎万强 监事 ","after_content":"（注：标有标志的为法定代表人）1 雷军 董事长 2 林斌 董事 3 刘芹 董事 4 雷军 经理 5 黎万强 监事 "},{"change_item":"经营范围","change_date":"2010-05-12","before_content":"法律、行政法规、国务院决定禁止的，不得经营；法律、行政法规、国务院决定规定应经许可的，经审批机关批准并经工商行政管理机关登记注册后方可经营；法律、行政法规、国务院决定未规定许可的，自主选择经营项目开展经营活动。","after_content":"技术开发。（法律、行政法规、国务院决定禁止的，不得经营；法律、行政法规、国务院决定规定应经许可的，经审批机关批准并经工商行政管理机关登记注册后方可经营；法律、行政法规、国务院决定未规定许可的，自主选择经营项目开展经营活动。）"},{"change_item":"投资人","change_date":"2010-05-12","before_content":"1 雷军 90 自然人股东 2 黎万强 10 自然人股东 ","after_content":"1 雷军 79.4 自然人股东 2 黎万强 10.33 自然人股东 3 洪锋 10.27 自然人股东 "}],"partners":[{"name":"洪锋","stock_type":"自然人股东","identify_type":"-","identify_no":"-","real_capi_items":[],"should_capi_items":[]},{"name":"雷军","stock_type":"自然人股东","identify_type":"-","identify_no":"-","real_capi_items":[],"should_capi_items":[]},{"name":"黎万强","stock_type":"自然人股东","identify_type":"-","identify_no":"-","real_capi_items":[],"should_capi_items":[]},{"name":"刘德","stock_type":"自然人股东","identify_type":"-","identify_no":"-","real_capi_items":[],"should_capi_items":[]}]}};

var Controller = function () {
  Controller.$inject = ["$injector", "$state", "$location", "$stateParams", "toastr", "$uibModal", "EnterpriseService"];
  function Controller($injector, $state, $location, $stateParams, toastr, $uibModal, EnterpriseService) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._state = $state;
    this._location = $location;
    this._stateParams = $stateParams;
    this._modal = $uibModal;

    this._toastr = toastr;

    this._service = EnterpriseService;

    this.id = $stateParams.id;

    this.info = null;

    this._init();
  }

  _createClass(Controller, [{
    key: '_init',
    value: function _init() {

      this._getDetail();
    }
  }, {
    key: '_getDetail',
    value: function _getDetail() {
      var _this = this;

      this._service.get(this.id).then(function (data) {
        // console.log(data);
        _this.info = data.detail;
        // this.info = mock_data.data;
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/detail/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = {
  templateUrl: 'modules/enterprise/detail/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = List;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/detail/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/filter.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterValue = filterValue;
exports.filterDistributeState = filterDistributeState;
function filterValue() {

  return function (val, list) {

    // console.log(val, list);

    var rt = list.filter(function (item) {
      return item.value == val;
    });

    if (rt.length) {
      return rt[0].label;
    }

    return '';
  };
}

function filterDistributeState() {
  var stateList = {
    1: '待分配',
    2: '已分配',
    3: '已认领'
  };
  return function (val) {
    return stateList[val] || '';
  };
}

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/list/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mcPagination = require('../../../core/components/mcPagination/mc-pagination.class');

var _mcPagination2 = _interopRequireDefault(_mcPagination);

var _modals = require('../modals');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListController = function (_Pagination) {
  ListController.$inject = ["$injector", "$state", "$location", "$stateParams", "sweet", "toastr", "$uibModal", "EnterpriseService", "ProfileService"];
  _inherits(ListController, _Pagination);

  function ListController($injector, $state, $location, $stateParams, sweet, toastr, $uibModal, EnterpriseService, ProfileService) {
    'ngInject';

    _classCallCheck(this, ListController);

    var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this, $injector));

    _this._state = $state;
    _this._location = $location;
    _this._stateParams = $stateParams;
    _this._modal = $uibModal;

    _this._sweet = sweet;
    _this._toastr = toastr;

    _this._service = EnterpriseService;

    _this.profile = ProfileService.getInfo();
    _this.access = ProfileService.access;

    _this.roleMainStatus = [{
      value: '',
      label: '全部'
    }, {
      value: 1,
      label: '离职'
    }];

    _this.enterpriseStateList = [{
      value: 1,
      label: '正常'
    }, {
      value: 2,
      label: '已冻结'
    }, {
      value: 0,
      label: '未通过筛选'
    }, {
      value: 3,
      label: '已删除'
    }];

    _this.filters = {};

    _this.oneAtATime = true;

    _this._init();

    return _this;
  }

  _createClass(ListController, [{
    key: '_init',
    value: function _init() {

      this._initFilters();
      this._getList();
    }
  }, {
    key: '_initFilters',
    value: function _initFilters() {
      // console.log(this._stateParams);
      var stateParams = this._stateParams;
      // this.pagination.page = +stateParams.page;
      this.filters.role_a_disable = stateParams.role_a_disable || '';
      this.filters.state = stateParams.state ? +stateParams.state : void 0;

      this.filters.name = stateParams.name || void 0;
    }
  }, {
    key: '_getList',
    value: function _getList() {
      var _this2 = this;

      var params = this._filterEmptyValue();
      // params.pageSize = this.pagination.pageSize;
      params.page = this.pagination.page;

      this._service.getList(params).then(function (data) {
        console.log(data);
        _this2.list = data.enterprises;
        _this2.pagination.count = data.page_count * _this2.pagination.pageSize;
      });
    }
  }, {
    key: 'reSearch',
    value: function reSearch() {
      var page = 1;
      this._location.search(_extends({}, this._filterEmptyValue(), { page: page }));
    }
  }, {
    key: 'switch',
    value: function _switch(key, value) {

      if (!key) {
        return false;
      }

      this.filters[key] = value;

      this.reSearch();
    }
  }, {
    key: 'assign',
    value: function assign(item) {
      var bank = item.bank;

      if (bank && bank.id) {
        var resolve = {
          info: function info() {
            return item;
          }
        };

        var options = _extends({}, _modals.manageConfig, { resolve: resolve });

        this._modal.open(options);
      } else {
        this._sweet.show({
          title: '请先分配机构',
          showCancelButton: false,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          closeOnConfirm: true,
          imageUrl: '/images/common/warning.png'
        }, function (sure) {
          // if (sure) {
          //   this.careList.splice(index, 1);
          //   this._toastr.success('删除成功！', '提示');
          // } else {
          //   return;
          // }
        });
      }
    }
  }, {
    key: 'assignBranch',
    value: function assignBranch(item) {
      var resolve = {
        info: function info() {
          return item;
        }
      };

      var options = _extends({}, _modals.branchConfig, { resolve: resolve });

      this._modal.open(options);
    }
  }, {
    key: 'add',
    value: function add() {
      var resolve = {
        info: function info() {
          return {};
        }
      };

      var options = _extends({}, _modals.addConfig, { resolve: resolve });

      this._modal.open(options);
    }
  }, {
    key: 'del',
    value: function del(item) {
      this.setState(item.id, 3);
    }
  }, {
    key: 'frost',
    value: function frost(item) {
      this.setState(item.id, 2);
    }
  }, {
    key: 'setState',
    value: function setState(id, state) {
      var _this3 = this;

      this._service.set({ id: id, state: state }).then(function (data) {
        _this3._toastr.success('操作成功');
        _this3._state.reload();
      });
    }

    // changeManage(type, item) {
    //   let selected = item[type] && ([{id: item[type].userid, name: item[type].name}]) || [];
    //   let options = {
    //     url: '/api/member/list',
    //     min: 1,
    //     max: 1,
    //     title: '选择客户经理',
    //     itemType: '客户经理',
    //     itemUnit: '名',
    //     itemPosition: '',
    //     searchPlaceholder: '请输入姓名搜索',
    //     selectedItems: selected,
    //     params: {},

    //     list: [
    //       {
    //         id: 12,
    //         name: '王乐乐',
    //         avatar: '/images/common/man.png'
    //       },
    //       {
    //         id: 23,
    //         name: '刘立军',
    //         avatar: '/images/common/man.png'
    //       },
    //       {
    //         id: 24,
    //         name: '王明涵',
    //         avatar: '/images/common/man.png'
    //       },
    //     ],

    //     // idKey: 'old_id'
    //   };

    //   this._pickerService.open(options, res => {
    //     if (res.data.length) {
    //       this._changeManage(res.data[0], type, item);
    //     }
    //   });
    // }

    // _changeManage(manage, type, item) {
    //   item[type] = {
    //     userid: manage.id,
    //     name: manage.name
    //   };
    // }


  }]);

  return ListController;
}(_mcPagination2.default);

exports.default = ListController;

},{"../../../core/components/mcPagination/mc-pagination.class":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js","../modals":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/list/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = {
  templateUrl: 'modules/enterprise/list/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = List;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/list/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/add/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$validation", "$uibModalInstance", "toastr", "EnterpriseService", "info"];
  function Controller($scope, $state, $validation, $uibModalInstance, toastr, EnterpriseService, info) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;
    this._state = $state;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this._service = EnterpriseService;

    this.info = info;

    this.inputInfo = {
      name: ''
    };
  }

  _createClass(Controller, [{
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this2 = this;

      var data = this.inputInfo;
      this._service.add(data).then(function (data) {
        _this2._toastr.success('添加成功');
        _this2.cancel();
        _this2._state.reload();
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/add/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Configuration = {
  templateUrl: 'modules/enterprise/modals/add/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = Configuration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/add/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/branch/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$validation", "$uibModalInstance", "toastr", "EnterpriseService", "info"];
  function Controller($scope, $state, $validation, $uibModalInstance, toastr, EnterpriseService, info) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;
    this._state = $state;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this._service = EnterpriseService;

    this.info = info;

    this.inputInfo = {
      branch: info.bank && info.bank.id
    };

    this.list = null;

    this._getBankList();
  }

  _createClass(Controller, [{
    key: '_getBankList',
    value: function _getBankList() {
      var _this = this;

      this._service.getBankList().then(function (data) {
        // console.log(data);
        _this.list = data;
      });
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this2 = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this2.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this3 = this;

      // console.log('submit')
      this._service.set({
        id: this.info.id,
        bank_id: this.inputInfo.branch
      }).then(function (data) {
        _this3.cancel();
        _this3._toastr.success('设置成功');
        _this3._state.reload();
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/branch/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var configuration = {
  templateUrl: 'modules/enterprise/modals/branch/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = configuration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/branch/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addConfig = exports.manageConfig = exports.branchConfig = undefined;

var _branch = require('./branch');

var _branch2 = _interopRequireDefault(_branch);

var _manage = require('./manage');

var _manage2 = _interopRequireDefault(_manage);

var _add = require('./add');

var _add2 = _interopRequireDefault(_add);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.branchConfig = _branch2.default;
exports.manageConfig = _manage2.default;
exports.addConfig = _add2.default;

},{"./add":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/add/index.js","./branch":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/branch/index.js","./manage":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/manage/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/manage/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$validation", "$uibModalInstance", "toastr", "EnterpriseService", "info"];
  function Controller($scope, $state, $validation, $uibModalInstance, toastr, EnterpriseService, info) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;
    this._state = $state;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this._service = EnterpriseService;

    this.info = info;

    this.inputInfo = {
      main: info.role_a && info.role_a.id,
      vice: info.role_b && info.role_b.id
    };

    this.list = null;

    this._init();
  }

  _createClass(Controller, [{
    key: '_init',
    value: function _init() {
      this._getUserList();
    }
  }, {
    key: '_getUserList',
    value: function _getUserList() {
      var _this = this;

      var bank = this.info.bank;

      var params = {
        state: 1,
        bank_id: bank.id,
        bank_name: bank.name,
        role_en_name: 'ROLE_CUSTOMER_MANAGER',
        page_limit: 1000
      };
      this._service.getUserList(params).then(function (data) {
        _this.list = data.users;
      });
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this2 = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this2.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this3 = this;

      // console.log('submit')
      this._service.set({
        id: this.info.id,
        role_a_id: this.inputInfo.main,
        role_b_id: this.inputInfo.vice
      }).then(function (data) {
        _this3.cancel();
        _this3._toastr.success('设置成功');
        _this3._state.reload();
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/manage/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var configuration = {
  templateUrl: 'modules/enterprise/modals/manage/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = configuration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/modals/manage/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

var _filter = require('./filter');

var _list = require('./list/');

var _list2 = _interopRequireDefault(_list);

var _detail = require('./detail/');

var _detail2 = _interopRequireDefault(_detail);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import demoService      from './services/demo.service';


exports.default = _angular2.default.module('app.modules.enterprise', []).filter('filterValue', _filter.filterValue).filter('filterDistributeState', _filter.filterDistributeState).service('EnterpriseService', _service2.default).component('enterpriseList', _list2.default).component('enterpriseDetail', _detail2.default).config(_config2.default);

},{"./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/config.js","./detail/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/detail/index.js","./filter":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/filter.js","./list/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/list/index.js","./service":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/service.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  Service.$inject = ["$http", "httpHelper", "$rootScope", "$state", "ApiMap"];
  function Service($http, httpHelper, $rootScope, $state, ApiMap) {
    'ngInject';

    _classCallCheck(this, Service);

    this._http = $http;
    // this.$q = $q;
    this._httpHelper = httpHelper;

    this._apiMap = ApiMap;

    this._api = ApiMap.enterprise;

    this._rootScope = $rootScope;
    this._state = $state;
  }

  _createClass(Service, [{
    key: 'get',
    value: function get(id) {

      this._httpHelper.blockUI.start();

      return this._http.get(this._api.get.replace(/\{id\}/, id)).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'getList',
    value: function getList(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.getList, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'set',
    value: function set(data) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.set, data).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'add',
    value: function add(data) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.add, data).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'getBankList',
    value: function getBankList(params) {
      this._httpHelper.blockUI.start();
      return this._http.get(this._apiMap.bank.get, { params: params }).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'getUserList',
    value: function getUserList(data) {
      this._httpHelper.blockUI.start();
      return this._http.post(this._apiMap.person.list, data).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }]);

  return Service;
}();

exports.default = Service;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/blacklist/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mcPagination = require('../../../core/components/mcPagination/mc-pagination.class');

var _mcPagination2 = _interopRequireDefault(_mcPagination);

var _modals = require('../modals');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListController = function (_Pagination) {
  ListController.$inject = ["$injector", "$state", "$location", "$stateParams", "toastr", "$uibModal", "FilterService"];
  _inherits(ListController, _Pagination);

  function ListController($injector, $state, $location, $stateParams, toastr, $uibModal, FilterService) {
    'ngInject';

    _classCallCheck(this, ListController);

    var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this, $injector));

    _this._state = $state;
    _this._location = $location;
    _this._stateParams = $stateParams;
    _this._modal = $uibModal;

    _this._toastr = toastr;

    _this._service = FilterService;

    _this.filters = {};

    _this._init();

    return _this;
  }

  _createClass(ListController, [{
    key: '_init',
    value: function _init() {

      this._initFilters();
      this._getList();
    }
  }, {
    key: '_initFilters',
    value: function _initFilters() {
      // console.log(this._stateParams);
      var stateParams = this._stateParams;
      // this.pagination.page = +stateParams.page;
      // this.filters.gender = +stateParams.gender || void(0);

      this.filters.name = stateParams.name || void 0;
    }
  }, {
    key: '_getList',
    value: function _getList() {
      var _this2 = this;

      var params = this._filterEmptyValue();
      // params.pageSize = this.pagination.pageSize;
      params.page = this.pagination.page;

      this._service.getBlackList(params).then(function (data) {
        console.log(data);
        _this2.list = data.blacklist;
        _this2.pagination.count = data.page_count * _this2.pagination.pageSize;
      });

      // this.list = [
      //             {id: 1, title: '单独的表单控件会被自动赋予一些全局样式', link: '/', content: '单独的表单控件会被自动赋予一些全局样式。所有设置了 .form-control 类的 <input>、<textarea> 和 <select> 元素都将被默认设置宽度属性为 width: 100%;。 将 label 元素和前面提到的控件包裹在 .form-group 中可以获得最好的排列。'},
      //             {id: 2, title: '单独的表单控件会被自动赋予一些全局样式', link: '/', content: '单独的表单控件会被自动赋予一些全局样式。所有设置了 .form-control 类的 <input>、<textarea> 和 <select> 元素都将被默认设置宽度属性为 width: 100%;。 将 label 元素和前面提到的控件包裹在 .form-group 中可以获得最好的排列。'},
      //           ];
      // this.pagination.count = 20;
    }
  }, {
    key: 'add',
    value: function add() {
      var resolve = {
        info: function info() {
          return {};
        }
      };

      var options = _extends({}, _modals.addConfig, { resolve: resolve });

      this._modal.open(options);
    }
  }, {
    key: 'del',
    value: function del(item) {
      var _this3 = this;

      var id = item.id;

      this._service.delBlackList({ id: id }).then(function (data) {
        // this._toastr.success('');
        _this3._toastr.success('删除成功');
        _this3._state.reload();
      });
    }
  }]);

  return ListController;
}(_mcPagination2.default);

exports.default = ListController;

},{"../../../core/components/mcPagination/mc-pagination.class":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js","../modals":"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/modals/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/blacklist/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BlackList = {
  templateUrl: 'modules/filter/blacklist/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = BlackList;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/blacklist/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/condition/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$stateParams", "$validation", "toastr", "ConfigService", "checkStateService"];
  function Controller($scope, $state, $stateParams, $validation, toastr, ConfigService, checkStateService) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;

    this._state = $state;
    this._toastr = toastr;
    this._stateParams = $stateParams;

    this._validation = $validation;

    this._checkStateService = checkStateService;

    this._service = ConfigService;

    // this.id = this._stateParams.id || null;

    this.info = null;

    this.key = 'enterprise.enter_condition';

    this.sortableConf = {
      name: 'todo',
      animation: 150
    };
    this.inputInfo = {
      content: '',
      title: ''
    };

    this.typeList = [{
      value: 'integer',
      name: '数字'
    }, {
      value: 'string',
      name: '文本'
    }];

    this.groupCondition = [{
      value: 'all',
      name: '必须全部满足'
    }, {
      value: 'one',
      name: '满足一个即可'
    }, {
      value: 'oneNot',
      name: '不同时满足'
    }, {
      value: 'allNot',
      name: '不能满足任何一个'
    }];

    this.conditionList = {
      string: [{
        value: '=',
        name: '等于'
      }, {
        value: '%=',
        name: '包含'
      }, {
        value: '!=',
        name: '不包含'
      }],
      integer: [{
        value: '=',
        name: '等于'
      }, {
        value: '>',
        name: '大于'
      }, {
        value: '>=',
        name: '大于等于'
      }, {
        value: '<',
        name: '大于'
      }, {
        value: '<=',
        name: '大于'
      }]
    };

    this._init();
  }

  _createClass(Controller, [{
    key: '_init',
    value: function _init() {

      // this.list = [{
      //   condition: 'all',
      //   list: [
      //     {
      //       title: '',
      //       type: 'integer',
      //       condition: '=',
      //       value: 1
      //     },

      //     {
      //       title: '',
      //       type: 'integer',
      //       condition: '=',
      //       value: 1
      //     }
      //   ]
      // },
      // {
      //   condition: 'all',
      //   list: [
      //     {
      //       title: '',
      //       type: 'integer',
      //       condition: '=',
      //       value: 1
      //     },

      //     {
      //       title: '',
      //       type: 'integer',
      //       condition: '=',
      //       value: 1
      //     }
      //   ]
      // }
      // ]
      this._get();
    }
  }, {
    key: '_get',
    value: function _get() {
      var _this = this;

      this._service.get(this.key).then(function (data) {
        if (data) {
          _this.list = angular.fromJson(data);
        } else {
          _this.initCollect();
        }
      }).catch(function (data) {
        _this.initCollect();
      });
    }
  }, {
    key: 'initCollect',
    value: function initCollect() {
      this.list = [];
      this.addGroup();
    }
  }, {
    key: 'addGroup',
    value: function addGroup() {
      var group = {
        condition: 'all',
        list: []
      };
      this.addItem(group);
      this.list.push(group);
    }
  }, {
    key: 'addItem',
    value: function addItem(group) {
      var item = {
        title: '',
        type: 'integer',
        condition: '=',
        value: ''
      };
      group.list.push(item);
    }
  }, {
    key: 'delGroup',
    value: function delGroup(index) {
      this.list.splice(index, 1);
    }
  }, {
    key: 'delItem',
    value: function delItem(group, index) {
      group.list.splice(index, 1);
    }
  }, {
    key: 'delete',
    value: function _delete(form) {
      var _this2 = this;

      form.$pristine = true;
      this._service.tipsSet({
        id: this.id,
        state: 3
      }).then(function (data) {
        _this2._toastr.success('删除成功!');
        _this2._state.go('process.tips');
      });
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this3 = this;

      //验证表单
      this._validation.validate(form).success(function () {
        _this3.saveFunc(form);
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc(form) {
      var _this4 = this;

      this._service.set({
        key: this.key,
        value: angular.toJson(this.list)
      }).then(function (data) {
        form.$pristine = true;
        _this4._toastr.success('添加成功');
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/condition/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var condition = {
  templateUrl: 'modules/filter/condition/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = condition;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/condition/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
function Config($stateProvider) {
  'ngInject';

  $stateProvider.state('filter', {
    url: '/filter',
    abstract: true,
    template: '<ui-view></ui-view>',
    title: '企业筛选',
    sidebarMeta: {
      icon: 'icon-sidebar_members_ic',
      order: 500
    }
  }).state('filter.blacklist', {
    url: '?page&name',
    template: '<filter-blacklist></filter-blacklist>',
    title: '黑名单',
    sidebarMeta: {
      order: 30
    }
  }).state('filter.condition', {
    url: '/condition',
    template: '<filter-condition></filter-condition>',
    title: '准入条件',
    sidebarMeta: {
      order: 50
    }
  })
  // .state('filter.add', {
  //   url: '/add?id',
  //   template: '<filter-add></filter-add>',
  //   title: '添加黑名单',
  //   sidebarMeta: {
  //     order: 30
  //   }
  // })
  ;
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/modals/add/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$validation", "$uibModalInstance", "toastr", "FilterService", "info"];
  function Controller($scope, $state, $validation, $uibModalInstance, toastr, FilterService, info) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;
    this._state = $state;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this._service = FilterService;

    this.info = info;

    this.inputInfo = {
      name: ''
    };
  }

  _createClass(Controller, [{
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this2 = this;

      var data = this.inputInfo;
      this._service.addBlackList(data).then(function (data) {
        _this2._toastr.success('添加成功');
        _this2.cancel();
        _this2._state.reload();
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/modals/add/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Configuration = {
  templateUrl: 'modules/filter/modals/add/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = Configuration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/modals/add/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/modals/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addConfig = undefined;

var _add = require('./add');

var _add2 = _interopRequireDefault(_add);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.addConfig = _add2.default;

},{"./add":"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/modals/add/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

var _condition = require('./condition/');

var _condition2 = _interopRequireDefault(_condition);

var _blacklist = require('./blacklist/');

var _blacklist2 = _interopRequireDefault(_blacklist);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import demoService      from './services/demo.service';


// import List  from './list/';
exports.default = _angular2.default.module('app.modules.filter', [])
// .filter('filterType', filterType)
.service('FilterService', _service2.default).component('filterBlacklist', _blacklist2.default).component('filterCondition', _condition2.default).config(_config2.default);

},{"./blacklist/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/blacklist/index.js","./condition/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/condition/index.js","./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/config.js","./service":"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/service.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  Service.$inject = ["$http", "httpHelper", "$rootScope", "$state", "ApiMap"];
  function Service($http, httpHelper, $rootScope, $state, ApiMap) {
    'ngInject';

    _classCallCheck(this, Service);

    this._http = $http;
    // this.$q = $q;
    this._httpHelper = httpHelper;

    this._apiMap = ApiMap;

    this._api = ApiMap.filter;

    this._rootScope = $rootScope;
    this._state = $state;
  }

  _createClass(Service, [{
    key: 'getBlackList',
    value: function getBlackList(params) {
      this._httpHelper.blockUI.start();
      return this._http.post(this._api.blacklist.list, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'addBlackList',
    value: function addBlackList(params) {
      this._httpHelper.blockUI.start();
      return this._http.post(this._api.blacklist.add, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'delBlackList',
    value: function delBlackList(params) {
      this._httpHelper.blockUI.start();
      return this._http.post(this._api.blacklist.del, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }]);

  return Service;
}();

exports.default = Service;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/information/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
function Config($stateProvider) {
    'ngInject';

    $stateProvider.state('information', {
        url: '/information',
        // abstract: true,
        template: '<ui-view><information-setting></information-setting></ui-view>',
        title: '企业采集设置',
        sidebarMeta: {
            icon: 'icon-sidebar_members_ic',
            order: 600
        }
    })
    // .state('information.list', {
    //     url: '',
    //     template: '<information-list></information-list>',
    //     title: '企业列表',
    //     sidebarMeta: {
    //       order: 10
    //     }
    // })
    // .state('information.detail', {
    //     url: '/detail?id',
    //     template: '<information-detail></information-detail>',
    //     title: '企业列表',
    //     sidebarMeta: {
    //       order: 20
    //     }
    // })
    .state('information.setting', {
        url: '/setting',
        template: '<information-setting></information-setting>',
        title: '采集设置'
    });
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/information/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _setting = require('./setting/');

var _setting2 = _interopRequireDefault(_setting);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import demoService      from './services/demo.service';


exports.default = _angular2.default.module('app.modules.information', [])
// .filter('filterType', filterType)
// .service('MessageService', service)

// .component('informationList', List)
.component('informationSetting', _setting2.default).config(_config2.default);
// import service from './service';
// import List  from './list/';

},{"./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/information/config.js","./setting/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/information/setting/index.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/information/setting/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$injector", "$state", "$location", "$validation", "$stateParams", "toastr", "$uibModal", "ConfigService"];
  function Controller($injector, $state, $location, $validation, $stateParams, toastr, $uibModal, ConfigService) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._state = $state;
    this._location = $location;
    this._stateParams = $stateParams;
    this._modal = $uibModal;

    this._validationProvider = $validation;

    this._toastr = toastr;

    this._service = ConfigService;

    this.filters = {};

    this.key = 'finding.template';

    this.typeList = [{
      type: 'input',
      title: '单行文本'
    }, {
      type: 'textarea',
      title: '多行文本'
    }, {
      type: 'img',
      title: '图片'
    }, {
      type: 'select',
      title: '下拉选择'
    }, {
      type: 'checkbox',
      title: '多选框'
    }];

    this._init();
  }

  _createClass(Controller, [{
    key: '_init',
    value: function _init() {
      this._getTemplate();
    }
  }, {
    key: '_getTemplate',
    value: function _getTemplate() {
      var _this = this;

      this._service.get(this.key).then(function (data) {
        if (data) {
          _this.collectList = angular.fromJson(data);
        } else {
          _this.initCollectInfo();
        }
      }).catch(function (e) {
        _this.initCollectInfo();
      });
    }
  }, {
    key: 'initCollectInfo',
    value: function initCollectInfo() {
      this.collectList = [];

      this.addProject();
    }
  }, {
    key: 'typeChange',
    value: function typeChange(item) {
      if (['select', 'checkbox'].indexOf(item.type) > -1) {
        item.needData = true;
      } else {
        item.needData = false;
      }
    }
  }, {
    key: 'addProject',
    value: function addProject() {
      var projectObj = {
        name: '',
        isRequired: false,
        content: []
      };
      this.collectList.push(projectObj);
      this.addItem(projectObj);
    }
  }, {
    key: 'deleteProject',
    value: function deleteProject(index) {
      this.collectList.splice(index, 1);
    }
  }, {
    key: 'addItem',
    value: function addItem(project) {
      var contentObj = {
        title: '',
        type: 'input',
        description: '',
        isRequired: false,
        needData: false,
        dataSource: []
      };

      project.content.push(contentObj);

      this.addData(contentObj);
    }
  }, {
    key: 'deleteItem',
    value: function deleteItem(proj, index) {
      proj.content.splice(index, 1);
    }
  }, {
    key: 'addData',
    value: function addData(item) {
      item.dataSource.push({
        description: ''
      });
    }
  }, {
    key: 'deleteData',
    value: function deleteData(item, index) {
      item.dataSource.splice(index, 1);
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this2 = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this2.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this3 = this;

      // console.log('submit')

      // console.log(this.collectList, JSON.stringify(this.collectList));

      this._service.set({
        key: this.key,
        value: angular.toJson(this.collectList)
      }).then(function (data) {
        _this3._toastr.success('保存成功');
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/information/setting/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var component = {
  templateUrl: 'modules/information/setting/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = component;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/information/setting/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
function Config($stateProvider) {
  'ngInject';

  $stateProvider.state('investment', {
    url: '/investment?name',
    // abstract: true,
    template: '<ui-view><investment-list></investment-list></ui-view>',
    title: '投资机构',
    sidebarMeta: {
      icon: 'icon-sidebar_members_ic',
      order: 350
    }
  })
  // .state('investment.list', {
  //     url: '',
  //     template: '<investment-list></investment-list>',
  //     title: '机构列表'
  // })
  ;
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/list/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mcPagination = require('../../../core/components/mcPagination/mc-pagination.class');

var _mcPagination2 = _interopRequireDefault(_mcPagination);

var _modals = require('../modals');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListController = function (_Pagination) {
  ListController.$inject = ["$injector", "$state", "$location", "$stateParams", "toastr", "$uibModal", "InvestmentService"];
  _inherits(ListController, _Pagination);

  function ListController($injector, $state, $location, $stateParams, toastr, $uibModal, InvestmentService) {
    'ngInject';

    _classCallCheck(this, ListController);

    var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this, $injector));

    _this._state = $state;
    _this._location = $location;
    _this._stateParams = $stateParams;
    _this._modal = $uibModal;

    _this._toastr = toastr;

    _this._service = InvestmentService;

    _this.filters = {};

    _this.agencyList = [];

    _this._init();

    return _this;
  }

  _createClass(ListController, [{
    key: '_init',
    value: function _init() {

      this._initFilters();
      this._getList();
    }
  }, {
    key: '_initFilters',
    value: function _initFilters() {
      // console.log(this._stateParams);
      var stateParams = this._stateParams;
      // this.pagination.page = +stateParams.page;
      this.filters.gender = +stateParams.gender || void 0;

      this.filters.name = stateParams.name || void 0;
    }
  }, {
    key: '_getList',
    value: function _getList() {
      var _this2 = this;

      var params = this._filterEmptyValue();
      // params.pageSize = this.pagination.pageSize;
      params.page = this.pagination.page;

      this._service.getList(params).then(function (data) {
        if (!data instanceof Array) {
          data = [];
        }
        _this2._formatAgency(data);
        _this2.list = data;
        // this.pagination.count = 1;
      });

      // this.list = [
      //             {id: 1, agency: '投资机构名称名称', sub_company: '投资子公司名称'},
      //             {id: 1, agency: '投资机构名称名称', sub_company: '投资子公司名称'},
      //             ];
      // this.pagination.count = 20;
    }
  }, {
    key: '_formatAgency',
    value: function _formatAgency(data) {
      // const tmpArr = [];
      // _.each(data, item => {
      //   tmpArr.push(item.vc_name);
      // });

      // this.agencyList = _.uniq(tmpArr)
    }
  }, {
    key: 'changeAgency',
    value: function changeAgency() {
      if (this.filters.agency === null) {
        this.filters.agency = '';
      }
    }
  }, {
    key: 'addCompany',
    value: function addCompany() {
      var agencyList = this.agencyList;
      var resolve = {
        info: function info() {
          return {
            agencyList: agencyList
          };
        }
      };

      var options = _extends({}, _modals.addConfig, { resolve: resolve });

      this._modal.open(options);
    }
  }, {
    key: 'set',
    value: function set(id, state) {
      var _this3 = this;

      this._service.set({
        id: id,
        state: state
      }).then(function (data) {
        _this3._toastr.success('操作成功');
        _this3._state.reload();
      });
    }
  }, {
    key: 'delete',
    value: function _delete(item) {
      this.set(item.id, 3);
    }
  }, {
    key: 'deleteCancel',
    value: function deleteCancel(item) {
      this.set(item.id, 1);
    }
  }]);

  return ListController;
}(_mcPagination2.default);

exports.default = ListController;

},{"../../../core/components/mcPagination/mc-pagination.class":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js","../modals":"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/modals/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/list/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = {
  templateUrl: 'modules/investment/list/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = List;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/list/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/modals/add/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$validation", "$uibModalInstance", "toastr", "InvestmentService", "info"];
  function Controller($scope, $state, $validation, $uibModalInstance, toastr, InvestmentService, info) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;
    this._state = $state;

    this._validationProvider = $validation;

    this._modalInstance = $uibModalInstance;
    this._toastr = toastr;

    this._service = InvestmentService;

    this.info = info;

    this.inputInfo = {
      name: '',
      vc_name: ''
    };

    // this.autoCompleteOptions = {
    //   minimumChars: 1,
    //   data: function (term) {
    //     term = term.toUpperCase();
    //     var match = _.filter(info.agencyList, function (value) {
    //         return value.startsWith(term);
    //     });
    //     return match;
    //   }
    // }
  }

  _createClass(Controller, [{
    key: 'cancel',
    value: function cancel() {
      this._modalInstance.close();
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this2 = this;

      var data = this.inputInfo;
      this._service.add(data).then(function (data) {
        _this2._toastr.success('添加成功');
        _this2.cancel();
        _this2._state.reload();
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/modals/add/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Configuration = {
  templateUrl: 'modules/investment/modals/add/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = Configuration;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/modals/add/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/modals/index.js":[function(require,module,exports){
arguments[4]["/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/modals/index.js"][0].apply(exports,arguments)
},{"./add":"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/modals/add/index.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

var _list = require('./list/');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import demoService      from './services/demo.service';


exports.default = _angular2.default.module('app.modules.investment', [])
// .filter('filterType', filterType)
.service('InvestmentService', _service2.default).component('investmentList', _list2.default).config(_config2.default);

},{"./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/config.js","./list/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/list/index.js","./service":"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/service.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  Service.$inject = ["$http", "httpHelper", "$rootScope", "$state", "ApiMap"];
  function Service($http, httpHelper, $rootScope, $state, ApiMap) {
    'ngInject';

    _classCallCheck(this, Service);

    this._http = $http;
    // this.$q = $q;
    this._httpHelper = httpHelper;

    this._api = ApiMap.investment;

    this._rootScope = $rootScope;
    this._state = $state;
  }

  // get(id) {

  //   this._httpHelper.blockUI.start();

  //   return this._http.get(this._api.get.replace(/\{id\}/, id)).then(this._httpHelper.verify,  this._httpHelper.error);
  // }

  _createClass(Service, [{
    key: 'getList',
    value: function getList(params) {

      this._httpHelper.blockUI.start();

      return this._http.get(this._api.getList, { params: params }).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'set',
    value: function set(data) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.set, data).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'add',
    value: function add(data) {
      this._httpHelper.blockUI.start();

      return this._http.post(this._api.add, data).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }]);

  return Service;
}();

exports.default = Service;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
function Config($stateProvider) {
    'ngInject';

    $stateProvider.state('loan', {
        url: '/loan',
        template: '<ui-view></ui-view>',
        title: '贷款决策',
        sidebarMeta: {
            icon: 'icon-sidebar_members_ic',
            order: 450
        }
    }).state('loan.setting', {
        url: '/setting',
        template: '<loan-setting></loan-setting>',
        title: '贷款决策条件设置',
        sidebarMeta: {
            order: 10
        }
    }).state('loan.list', {
        url: '/list',
        template: '<loan-list></loan-list>',
        title: '已评价企业列表',
        sidebarMeta: {
            order: 20
        }
    }).state('loan.decision', {
        url: '/decision?id',
        template: '<loan-decision></loan-decision>',
        title: '贷款辅助决策信息修正'
    });
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/decision/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$injector", "$state", "$location", "$validation", "$stateParams", "toastr", "$uibModal", "LoanService"];
  function Controller($injector, $state, $location, $validation, $stateParams, toastr, $uibModal, LoanService) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._state = $state;
    this._location = $location;
    this._stateParams = $stateParams;
    this._modal = $uibModal;

    this._validationProvider = $validation;
    this.id = this._stateParams.id;

    this._toastr = toastr;

    this._service = LoanService;

    this.filters = {};
    this.loanList = [];

    this._init();

    this.typeList = {
      'integer': '数值',
      'string': '文本'
    };
  }

  _createClass(Controller, [{
    key: '_init',
    value: function _init() {
      var data = {
        id: 1
      };
      this._getTemplate(data);
    }
  }, {
    key: 'reCount',
    value: function reCount() {
      var data = {
        id: 1,
        data: angular.toJson(this.loanList)
      };
      this._getTemplate(data, '重新计算成功');
    }
  }, {
    key: 'getTotal',
    value: function getTotal() {
      var total = 0;
      this.loanList.forEach(function (loan) {
        loan.value = loan.value + '';
        total += parseInt(loan.point);
      });
      return total;
    }
  }, {
    key: '_getTemplate',
    value: function _getTemplate(data) {
      var _this = this;

      var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      this._service.get(data).then(function (data) {
        if (data && !jQuery.isEmptyObject(data)) {
          _this.loanList = data;
          if (msg.length > 0) {
            _this._toastr.success(msg);
          }
        } else {
          _this.initCollectInfo();
        }
      });
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this2 = this;

      //验证表单
      this._validationProvider.validate(form).success(function () {
        _this2.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this3 = this;

      var data = {
        id: 1,
        data: angular.toJson(this.loanList)
      };
      this._service.get(data).then(function (data) {
        if (data && !jQuery.isEmptyObject(data)) {
          _this3.loanList = data;
          _this3._toastr.success('保存成功');
        } else {
          _this3.initCollectInfo();
        }
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/decision/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var component = {
  templateUrl: 'modules/loan/decision/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = component;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/decision/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/list/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mcPagination = require('../../../core/components/mcPagination/mc-pagination.class');

var _mcPagination2 = _interopRequireDefault(_mcPagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListController = function (_Pagination) {
  ListController.$inject = ["$injector", "$state", "$location", "$stateParams", "sweet", "toastr", "$uibModal", "LoanService"];
  _inherits(ListController, _Pagination);

  function ListController($injector, $state, $location, $stateParams, sweet, toastr, $uibModal, LoanService) {
    'ngInject';

    _classCallCheck(this, ListController);

    var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this, $injector));

    _this._state = $state;
    _this._location = $location;
    _this._stateParams = $stateParams;
    _this._modal = $uibModal;

    _this._sweet = sweet;
    _this._toastr = toastr;

    _this._service = LoanService;

    _this.roleMainStatus = [{
      value: '',
      label: '全部'
    }, {
      value: 1,
      label: '离职'
    }];

    _this.enterpriseStateList = [{
      value: 1,
      label: '正常'
    }, {
      value: 2,
      label: '已冻结'
    }, {
      value: 0,
      label: '未通过筛选'
    }, {
      value: 3,
      label: '已删除'
    }];

    _this.filters = {};

    _this.oneAtATime = true;

    _this._init();

    return _this;
  }

  _createClass(ListController, [{
    key: '_init',
    value: function _init() {

      this._initFilters();
      this._getList();
    }
  }, {
    key: '_initFilters',
    value: function _initFilters() {
      // console.log(this._stateParams);
      var stateParams = this._stateParams;
      // this.pagination.page = +stateParams.page;
      this.filters.role_a_disable = stateParams.role_a_disable || '';
      this.filters.state = stateParams.state ? +stateParams.state : void 0;

      this.filters.name = stateParams.name || void 0;
    }
  }, {
    key: '_getList',
    value: function _getList() {
      var _this2 = this;

      var params = this._filterEmptyValue();
      // params.pageSize = this.pagination.pageSize;
      params.page = this.pagination.page;
      params.only_loan_ready = 1;

      this._service.getList(params).then(function (data) {
        console.log(data);
        _this2.list = data.enterprises;
        _this2.pagination.count = data.page_count * _this2.pagination.pageSize;
      });
    }
  }, {
    key: 'reSearch',
    value: function reSearch() {
      var page = 1;
      this._location.search(_extends({}, this._filterEmptyValue(), { page: page }));
    }
  }, {
    key: 'switch',
    value: function _switch(key, value) {

      if (!key) {
        return false;
      }

      this.filters[key] = value;

      this.reSearch();
    }
  }]);

  return ListController;
}(_mcPagination2.default);

exports.default = ListController;

},{"../../../core/components/mcPagination/mc-pagination.class":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/list/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = {
  templateUrl: 'modules/loan/list/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = List;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/list/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _bootstrap = require('bootstrap');

var _bootstrap2 = _interopRequireDefault(_bootstrap);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _setting = require('./setting/');

var _setting2 = _interopRequireDefault(_setting);

var _decision = require('./decision');

var _decision2 = _interopRequireDefault(_decision);

var _list = require('./list');

var _list2 = _interopRequireDefault(_list);

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.modules.loan', []).service('LoanService', _service2.default).component('loanSetting', _setting2.default).component('loanDecision', _decision2.default).component('loanList', _list2.default).config(_config2.default);

},{"./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/config.js","./decision":"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/decision/index.js","./list":"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/list/index.js","./service":"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/service.js","./setting/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/setting/index.js","angular":"angular","bootstrap":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/dist/js/npm.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  Service.$inject = ["$http", "httpHelper", "$rootScope", "$state", "ApiMap"];
  function Service($http, httpHelper, $rootScope, $state, ApiMap) {
    'ngInject';

    _classCallCheck(this, Service);

    this._http = $http;
    // this.$q = $q;
    this._httpHelper = httpHelper;

    this._api = ApiMap.loan;
    this._eapi = ApiMap.enterprise;

    this._rootScope = $rootScope;
    this._state = $state;
  }

  _createClass(Service, [{
    key: 'get',
    value: function get(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.get, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'set',
    value: function set(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.set, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'getList',
    value: function getList(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._eapi.getList, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }]);

  return Service;
}();

exports.default = Service;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/setting/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$injector", "$state", "$location", "$validation", "$stateParams", "toastr", "$uibModal", "ConfigService"];
  function Controller($injector, $state, $location, $validation, $stateParams, toastr, $uibModal, ConfigService) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._state = $state;
    this._location = $location;
    this._stateParams = $stateParams;
    this._modal = $uibModal;

    this._validationProvider = $validation;

    this._toastr = toastr;

    this._service = ConfigService;

    this.filters = {};

    this.conditionList = {
      'string': {
        '=': '完全匹配',
        'like': '包含',
        'not_like': '不包含'
      },
      'integer': {
        '<': '<',
        '<=': '<=',
        '>': '>',
        '>=': '>=',
        '=': '='
      }
    };

    this.typeList = {
      'integer': '数值',
      'string': '文本'
    };

    this._init();
  }

  _createClass(Controller, [{
    key: '_init',
    value: function _init() {
      this._getTemplate();
    }
  }, {
    key: '_getTemplate',
    value: function _getTemplate() {
      var _this = this;

      this._service.get('loan.decision_condition').then(function (data) {
        if (data && !jQuery.isEmptyObject(data)) {
          _this.loanList = JSON.parse(data);
        } else {
          _this.initCollectInfo();
        }
      });
    }
  }, {
    key: 'initCollectInfo',
    value: function initCollectInfo() {
      this.loanList = [];

      this.addCondition();
    }
  }, {
    key: 'addCondition',
    value: function addCondition() {
      var loanObj = {
        title: '',
        point: '0',
        condition_list: []
      };
      this.loanList.push(loanObj);
      this.addProject(loanObj);
    }
  }, {
    key: 'addProject',
    value: function addProject(loanObj) {
      var projectObj = {
        title: '',
        option_type: 'integer',
        options: []
      };
      //this.loanList.push(projectObj);
      loanObj.condition_list.push(projectObj);
      this.addItem(projectObj);
    }
  }, {
    key: 'deleteProject',
    value: function deleteProject(index) {
      this.loanList.splice(index, 1);
    }
  }, {
    key: 'addItem',
    value: function addItem(project) {
      var contentObj = {
        condition: project.option_type == 'string' ? '=' : '<',
        value: '',
        point: ''
      };

      project.options.push(contentObj);
    }
  }, {
    key: 'deleteItem',
    value: function deleteItem(proj, index) {
      proj.options.splice(index, 1);
    }
  }, {
    key: 'deleteData',
    value: function deleteData(item, index) {
      item.dataSource.splice(index, 1);
    }
  }, {
    key: 'typeChange',
    value: function typeChange(project) {
      project.options.forEach(function (option) {
        if (project.option_type == 'integer') {
          option.condition = '<';
        } else {
          option.condition = '=';
        }
      });
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this2 = this;

      //验证表单
      var that = this;
      var stop = false;
      this._validationProvider.validate(form).success(function () {
        //不能超过100分数
        var point = 0;
        _this2.loanList.forEach(function (loan) {
          var loanPoint = 0;
          loan.condition_list.forEach(function (condition) {
            var maxPoint = 0;
            condition.options.forEach(function (option) {
              if (option.point > maxPoint) {
                maxPoint = parseInt(option.point);
              }
            });
            loanPoint += parseInt(maxPoint);
          });
          if (loanPoint > parseInt(loan.point)) {
            that._toastr.error(loan.title + '分类的总分超过预定分类总分');
            stop = true;
            return false;
          }
          point += parseInt(loan.point);
        });
        if (stop) {
          return;
        }
        if (point > 100) {
          _this2._toastr.error('分数不能超过100');
          return;
        }
        _this2.saveFunc();
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc() {
      var _this3 = this;

      //console.log('submit')

      //console.log(this.loanList, JSON.stringify(this.loanList));

      this._service.set({
        key: 'loan.decision_condition',
        value: angular.toJson(this.loanList)
      }).then(function (data) {
        _this3._toastr.success('保存成功');
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/setting/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var component = {
  templateUrl: 'modules/loan/setting/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = component;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/setting/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/log/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
function Config($stateProvider) {
  'ngInject';

  $stateProvider.state('log', {
    url: '/log',
    //abstract: true,
    template: '<ui-view><log-list></log-list></ui-view>',
    title: '日志管理',
    sidebarMeta: {
      icon: 'icon-sidebar_members_ic',
      order: 2000
    }
  })
  // .state('log.list', {
  //     url: '',
  //     template: '',
  //     title: '日志列表'
  // })
  ;
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/log/list/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mcPagination = require('../../../core/components/mcPagination/mc-pagination.class');

var _mcPagination2 = _interopRequireDefault(_mcPagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListController = function (_Pagination) {
  ListController.$inject = ["$injector", "$state", "$location", "$stateParams", "toastr", "$uibModal", "LogService"];
  _inherits(ListController, _Pagination);

  function ListController($injector, $state, $location, $stateParams, toastr, $uibModal, LogService) {
    'ngInject';

    _classCallCheck(this, ListController);

    var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this, $injector));

    _this._state = $state;
    _this._location = $location;
    _this._stateParams = $stateParams;
    _this._modal = $uibModal;

    _this._toastr = toastr;

    _this._service = LogService;

    _this.filters = {};

    _this.start_date = moment().add(-1, 'days');
    _this.filters.time_from = _this.start_date.unix();
    _this.end_date = moment();
    _this.filters.time_to = _this.end_date.unix();

    _this.startTimeMaxLimit = moment();
    _this.endTimeMaxLimit = moment();

    _this._init();

    return _this;
  }

  _createClass(ListController, [{
    key: '_init',
    value: function _init() {
      this._initFilters();
      this._getList();
    }
  }, {
    key: '_initFilters',
    value: function _initFilters() {

      var stateParams = this._stateParams;
      //this.filters.keyword = stateParams.keyword || void(0);
    }
  }, {
    key: '_getList',
    value: function _getList() {
      var _this2 = this;

      var params = this._filterEmptyValue();
      params.page = this.pagination.page;

      this._service.list(params).then(function (data) {
        _this2.pagination.count = data.count;
        _this2.pagination.pageSize = data.page_limit;
        _this2.list = data.logs;
      });
    }
  }, {
    key: 'pageChanged',
    value: function pageChanged() {
      this._getList();
    }
  }, {
    key: 'reSearch',
    value: function reSearch() {
      this._getList();
    }

    // datepicker

  }, {
    key: 'changeTime',
    value: function changeTime(type) {
      var values = {
        minDate: false,
        maxDate: false
      };
      if (type == 'start') {
        this.filters.time_from = this.start_date.unix();
        this.endTimeMinLimit = this.start_date;
        values.minDate = this.start_date;
        values.maxDate = moment();
      } else {
        this.filters.time_to = this.end_date.unix();
        this.startTimeMaxLimit = this.end_date;
        values.maxDate = this.end_date;
      }
      this.reSearch();
    }
  }]);

  return ListController;
}(_mcPagination2.default);

exports.default = ListController;

},{"../../../core/components/mcPagination/mc-pagination.class":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/log/list/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = {
  templateUrl: 'modules/log/list/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = List;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/log/list/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/log/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _bootstrap = require('bootstrap');

var _bootstrap2 = _interopRequireDefault(_bootstrap);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

var _list = require('./list/');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.modules.log', [])
// .filter('filterType', filterType)
.service('LogService', _service2.default).component('logList', _list2.default).config(_config2.default);

},{"./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/log/config.js","./list/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/log/list/index.js","./service":"/Users/Gavin/Documents/codes/pack/sil/app/modules/log/service.js","angular":"angular","bootstrap":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/dist/js/npm.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/log/service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  Service.$inject = ["$http", "httpHelper", "$rootScope", "$state", "ApiMap"];
  function Service($http, httpHelper, $rootScope, $state, ApiMap) {
    'ngInject';

    _classCallCheck(this, Service);

    this._http = $http;
    // this.$q = $q;
    this._httpHelper = httpHelper;

    this._api = ApiMap.log;

    this._rootScope = $rootScope;
    this._state = $state;
  }

  _createClass(Service, [{
    key: 'list',
    value: function list(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.list, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }]);

  return Service;
}();

exports.default = Service;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
function Config($stateProvider) {
    'ngInject';

    $stateProvider.state('message', {
        url: '/message',
        abstract: true,
        template: '<ui-view></ui-view>',
        title: '提示消息'
    }).state('message.list', {
        url: '?page',
        template: '<message-list></message-list>',
        title: '消息列表'
    }).state('message.detail', {
        url: '/detail?id',
        template: '<message-detail></message-detail>',
        title: '消息详情'
    });
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/detail/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$state", "$stateParams", "toastr", "MessageService"];
  function Controller($state, $stateParams, toastr, MessageService) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._state = $state;
    this._toastr = toastr;
    this._stateParams = $stateParams;

    this._service = MessageService;

    this.id = this._stateParams.id;

    this.info = null;

    this._get();
  }

  _createClass(Controller, [{
    key: '_get',
    value: function _get() {
      var _this = this;

      this._service.get(this.id).then(function (data) {
        _this.info = data;
        if (data.state === 0) {
          _this._read();
        }
      });
    }
  }, {
    key: '_read',
    value: function _read() {
      this._service.set({
        id: this.id,
        state: 1
      }).then(function (data) {});
    }
  }, {
    key: 'delete',
    value: function _delete() {
      var _this2 = this;

      this._service.set({
        id: this.id,
        state: 2
      }).then(function (data) {
        _this2._toastr.success('删除成功!');
        _this2._state.go('message.list');
      });
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/detail/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var detail = {
  templateUrl: 'modules/message/detail/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = detail;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/detail/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/list/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mcPagination = require('../../../core/components/mcPagination/mc-pagination.class');

var _mcPagination2 = _interopRequireDefault(_mcPagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListController = function (_Pagination) {
  ListController.$inject = ["$injector", "$state", "$location", "$stateParams", "toastr", "$uibModal", "MessageService"];
  _inherits(ListController, _Pagination);

  function ListController($injector, $state, $location, $stateParams, toastr, $uibModal, MessageService) {
    'ngInject';

    _classCallCheck(this, ListController);

    var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this, $injector));

    _this._state = $state;
    _this._location = $location;
    _this._stateParams = $stateParams;
    _this._modal = $uibModal;

    _this._toastr = toastr;

    _this._service = MessageService;

    _this.filters = {};

    _this.oneAtATime = true;

    _this._init();

    return _this;
  }

  _createClass(ListController, [{
    key: '_init',
    value: function _init() {

      this._initFilters();
      this._getList();
    }
  }, {
    key: '_initFilters',
    value: function _initFilters() {
      // console.log(this._stateParams);
      var stateParams = this._stateParams;
      // this.pagination.page = +stateParams.page;
      // this.filters.gender = +stateParams.gender || void(0);

      this.filters.keyword = stateParams.keyword || void 0;
    }
  }, {
    key: '_getList',
    value: function _getList() {
      var _this2 = this;

      var params = this._filterEmptyValue();
      // params.pageSize = this.pagination.pageSize;
      params.page = this.pagination.page;

      this._service.getList(params).then(function (data) {
        console.log(data);
        _this2.list = data.messages;
        _this2.pagination.count = data.page_count * _this2.pagination.pageSize;
      });

      // this.list = [
      //             {id: 1, title: '单独的表单控件会被自动赋予一些全局样式', link: '/', content: '单独的表单控件会被自动赋予一些全局样式。所有设置了 .form-control 类的 <input>、<textarea> 和 <select> 元素都将被默认设置宽度属性为 width: 100%;。 将 label 元素和前面提到的控件包裹在 .form-group 中可以获得最好的排列。'},
      //             {id: 2, title: '单独的表单控件会被自动赋予一些全局样式', link: '/', content: '单独的表单控件会被自动赋予一些全局样式。所有设置了 .form-control 类的 <input>、<textarea> 和 <select> 元素都将被默认设置宽度属性为 width: 100%;。 将 label 元素和前面提到的控件包裹在 .form-group 中可以获得最好的排列。'},
      //           ];
      // this.pagination.count = 20;
    }
  }, {
    key: 'toggleAll',
    value: function toggleAll() {
      var _this3 = this;

      if (this.list) {
        this.list.forEach(function (item) {
          return item.checked = _this3.selectAll;
        });
      }
    }
  }, {
    key: 'checkAll',
    value: function checkAll() {
      if (this.list) {
        var uncheckedList = this.list.filter(function (item) {
          return !item.checked;
        });
        var len = uncheckedList.length;

        if (len > 0) {
          this.selectAll = false;
        } else if (len = this.list.length) {
          this.selectAll = true;
        }
      }
    }
  }, {
    key: 'batchMarkedRead',
    value: function batchMarkedRead() {
      if (this.list) {
        var checkedList = this.list.filter(function (item) {
          return item.checked;
        });

        checkedList.forEach(function (item) {
          return item.isRead = true;
        });
      }
    }
  }, {
    key: 'batchRemove',
    value: function batchRemove() {
      if (this.list) {
        this.list = this.list.filter(function (item) {
          return !item.checked;
        });

        // checkedList.forEach(item => item.isRead = true);
        this._toastr.success('删除成功!');
        this._state.reload();
      }
    }
  }, {
    key: 'getCheckedIds',
    value: function getCheckedIds() {
      if (this.list) {
        var checkedList = this.list.filter(function (item) {
          return item.checked;
        });

        return checkedList.map(function (item) {
          return item.id;
        });
      }

      return false;
    }
  }, {
    key: 'markedRead',
    value: function markedRead() {
      var _this4 = this;

      var ids = this.getCheckedIds();

      if (ids && ids.length) {
        console.log(ids);

        this._service.read({ ids: ids }).then(function (data) {
          // this._toastr.success('');
          _this4.batchMarkedRead();
        });
      }
    }
  }, {
    key: 'delete',
    value: function _delete() {
      var _this5 = this;

      var ids = this.getCheckedIds();

      if (ids && ids.length) {
        console.log(ids);
        this._service.delete({ ids: ids }).then(function (data) {
          // this._toastr.success('');
          _this5.batchRemove();
        });
      }
    }
  }]);

  return ListController;
}(_mcPagination2.default);

exports.default = ListController;

},{"../../../core/components/mcPagination/mc-pagination.class":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/list/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = {
  templateUrl: 'modules/message/list/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = List;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/list/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

var _list = require('./list/');

var _list2 = _interopRequireDefault(_list);

var _detail = require('./detail/');

var _detail2 = _interopRequireDefault(_detail);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import demoService      from './services/demo.service';


exports.default = _angular2.default.module('app.modules.message', [])
// .filter('filterType', filterType)
.service('MessageService', _service2.default).component('messageList', _list2.default).component('messageDetail', _detail2.default).config(_config2.default);

},{"./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/config.js","./detail/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/detail/index.js","./list/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/list/index.js","./service":"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/service.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  Service.$inject = ["$http", "httpHelper", "$rootScope", "$state", "ApiMap"];
  function Service($http, httpHelper, $rootScope, $state, ApiMap) {
    'ngInject';

    _classCallCheck(this, Service);

    this._http = $http;
    // this.$q = $q;
    this._httpHelper = httpHelper;

    this._api = ApiMap.message;

    this._rootScope = $rootScope;
    this._state = $state;
  }

  _createClass(Service, [{
    key: 'get',
    value: function get(id) {

      this._httpHelper.blockUI.start();

      return this._http.get(this._api.get.replace(/\{id\}/, id)).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'getList',
    value: function getList(params, hideLoading) {

      !hideLoading && this._httpHelper.blockUI.start();

      return this._http.post(this._api.getList, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'set',
    value: function set(data) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.set, data).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }]);

  return Service;
}();

exports.default = Service;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/modules.module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _dashboard = require('./dashboard/dashboard.module');

var _dashboard2 = _interopRequireDefault(_dashboard);

var _demo = require('./demo/demo.module');

var _demo2 = _interopRequireDefault(_demo);

var _module = require('./message/module');

var _module2 = _interopRequireDefault(_module);

var _module3 = require('./investment/module');

var _module4 = _interopRequireDefault(_module3);

var _module5 = require('./enterprise/module');

var _module6 = _interopRequireDefault(_module5);

var _module7 = require('./information/module');

var _module8 = _interopRequireDefault(_module7);

var _module9 = require('./person/module');

var _module10 = _interopRequireDefault(_module9);

var _module11 = require('./account/module');

var _module12 = _interopRequireDefault(_module11);

var _module13 = require('./log/module');

var _module14 = _interopRequireDefault(_module13);

var _module15 = require('./bank/module');

var _module16 = _interopRequireDefault(_module15);

var _module17 = require('./sysconfig/module');

var _module18 = _interopRequireDefault(_module17);

var _module19 = require('./process/module');

var _module20 = _interopRequireDefault(_module19);

var _module21 = require('./loan/module');

var _module22 = _interopRequireDefault(_module21);

var _module23 = require('./filter/module');

var _module24 = _interopRequireDefault(_module23);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.modules', [_dashboard2.default.name, _demo2.default.name, _module2.default.name, _module4.default.name, _module6.default.name, _module8.default.name, _module10.default.name, _module12.default.name, _module14.default.name, _module16.default.name, _module20.default.name, _module18.default.name, _module22.default.name, _module24.default.name]);

},{"./account/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/account/module.js","./bank/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/bank/module.js","./dashboard/dashboard.module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/dashboard/dashboard.module.js","./demo/demo.module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/demo/demo.module.js","./enterprise/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/enterprise/module.js","./filter/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/filter/module.js","./information/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/information/module.js","./investment/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/investment/module.js","./loan/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/loan/module.js","./log/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/log/module.js","./message/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/message/module.js","./person/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/person/module.js","./process/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/module.js","./sysconfig/module":"/Users/Gavin/Documents/codes/pack/sil/app/modules/sysconfig/module.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/person/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
function Config($stateProvider) {
    'ngInject';

    $stateProvider.state('person', {
        url: '/person',
        abstract: true,
        template: '<ui-view></ui-view>',
        title: '个人中心'
    }).state('person.detail', {
        url: '',
        template: '<person-detail></person-detail>',
        title: '资料详情'
    });
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/person/detail/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DetailController = function () {
  DetailController.$inject = ["$state", "toastr", "PersonService", "AppSettings", "ConfigService", "ProfileService"];
  function DetailController($state, toastr, PersonService, AppSettings, ConfigService, ProfileService) {
    'ngInject';

    _classCallCheck(this, DetailController);

    this._state = $state;
    this._toastr = toastr;

    this._service = PersonService;
    this._configService = ConfigService;

    this.roleList = ProfileService.getRoleList();
    this.roleKey = AppSettings.roleListKey;

    this._init();
  }

  _createClass(DetailController, [{
    key: '_init',
    value: function _init() {
      var _this = this;

      var params = {
        id: window.localStorage.getItem('SIL_UID')
      };
      this.stateArr = {
        0: '未激活',
        1: '正常',
        2: '已冻结',
        3: '已删除'
      };

      this._service.get(params).then(function (data) {
        _this.person = data;
      });
    }
  }, {
    key: 'setUser',
    value: function setUser() {
      var params = {
        user_id: window.localStorage.getItem('SIL_UID'),
        new_password: this.person.new_password,
        true_name: this.person.true_name,
        phone: this.person.phone,
        role_name: this.person.role_name,
        role: this.person.role,
        state: this.person.state
      };
      this._service.set(params).then(function (data) {
        location.href = '/';
      });
    }
  }]);

  return DetailController;
}();

exports.default = DetailController;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/person/detail/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var detail = {
  templateUrl: 'modules/person/detail/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = detail;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/person/detail/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/person/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _bootstrap = require('bootstrap');

var _bootstrap2 = _interopRequireDefault(_bootstrap);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

var _detail = require('./detail/');

var _detail2 = _interopRequireDefault(_detail);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import demoService      from './services/demo.service';


exports.default = _angular2.default.module('app.modules.person', [])
// .filter('filterType', filterType)
.service('PersonService', _service2.default).component('personDetail', _detail2.default).config(_config2.default);

},{"./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/person/config.js","./detail/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/person/detail/index.js","./service":"/Users/Gavin/Documents/codes/pack/sil/app/modules/person/service.js","angular":"angular","bootstrap":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/dist/js/npm.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/person/service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  Service.$inject = ["$http", "httpHelper", "$rootScope", "$state", "ApiMap"];
  function Service($http, httpHelper, $rootScope, $state, ApiMap) {
    'ngInject';

    _classCallCheck(this, Service);

    this._http = $http;
    // this.$q = $q;
    this._httpHelper = httpHelper;

    this._api = ApiMap.person;
    this._apiMap = ApiMap;

    this._rootScope = $rootScope;
    this._state = $state;
  }

  _createClass(Service, [{
    key: 'get',
    value: function get(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.get, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'set',
    value: function set(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.set, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'getRoleList',
    value: function getRoleList() {
      this._httpHelper.blockUI.start();

      return this._http.get(this._apiMap.auth.get).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }]);

  return Service;
}();

exports.default = Service;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/add/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function () {
  Controller.$inject = ["$scope", "$state", "$stateParams", "$validation", "toastr", "ProcessService", "checkStateService"];
  function Controller($scope, $state, $stateParams, $validation, toastr, ProcessService, checkStateService) {
    'ngInject';

    _classCallCheck(this, Controller);

    this._scope = $scope;

    this._state = $state;
    this._toastr = toastr;
    this._stateParams = $stateParams;

    this._validation = $validation;

    this._checkStateService = checkStateService;

    this._service = ProcessService;

    this.id = this._stateParams.id || null;

    this.info = null;
    this.inputInfo = {
      content: '',
      title: ''
    };

    this._init();
  }

  _createClass(Controller, [{
    key: '_init',
    value: function _init() {
      var _this = this;

      var destroyWatchText = this._scope.$watch('vm.inputInfo.content', function () {
        if (_this.inputInfo.content) {
          // console.log(marked(this.inputInfo.content));
          _this.html = marked(_this.inputInfo.content);
        } else {
          _this.html = '';
        }
      });
      /*
      * $scope销毁的时候,结束监听
      */
      this._scope.$on('$destroy', destroyWatchText);

      this._checkStateService.formStateChange(this._scope, 'vm.Form');

      this._get();
    }
  }, {
    key: '_get',
    value: function _get() {
      var _this2 = this;

      if (this.id) {
        this._service.tipsGet(this.id).then(function (data) {
          _this2.info = data;

          _this2.inputInfo = _extends({}, data);

          _this2.defaultContent = data.content;
        }).catch(function (data) {
          _this2.id = null;
        });
      }
    }
  }, {
    key: '_read',
    value: function _read() {
      this._service.set({
        id: this.id,
        state: 1
      }).then(function (data) {});
    }
  }, {
    key: 'delete',
    value: function _delete(form) {
      var _this3 = this;

      form.$pristine = true;
      this._service.tipsSet({
        id: this.id,
        state: 3
      }).then(function (data) {
        _this3._toastr.success('删除成功!');
        _this3._state.go('process.tips');
      });
    }
  }, {
    key: 'submit',
    value: function submit(form) {
      var _this4 = this;

      //验证表单
      this._validation.validate(form).success(function () {
        _this4.saveFunc(form);
      });
    }
  }, {
    key: 'saveFunc',
    value: function saveFunc(form) {
      var _this5 = this;

      var data = this.inputInfo;
      if (this.id) {
        this._service.tipsSet(data).then(function (data) {
          form.$pristine = true;
          _this5._toastr.success('保存成功');
          _this5._state.go('process.tips');
        });
      } else {
        this._service.tipsAdd(data).then(function (data) {
          form.$pristine = true;
          _this5._toastr.success('添加成功');
          _this5._state.go('process.tips');
        });
      }
    }
  }]);

  return Controller;
}();

exports.default = Controller;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/add/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var add = {
  templateUrl: 'modules/process/add/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = add;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/add/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
function Config($stateProvider) {
  'ngInject';

  $stateProvider.state('process', {
    url: '/process',
    abstract: true,
    template: '<ui-view></ui-view>',
    title: '贷款流程',
    sidebarMeta: {
      icon: 'icon-sidebar_members_ic',
      order: 600
    }
  }).state('process.tips', {
    url: '?page',
    template: '<process-tips></process-tips>',
    title: '提示话术',
    sidebarMeta: {
      order: 30
    }
  }).state('process.add', {
    url: '/add?id',
    template: '<process-add></message-add>',
    title: '添加话术',
    sidebarMeta: {
      order: 30
    }
  });
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

var _add = require('./add/');

var _add2 = _interopRequireDefault(_add);

var _tips = require('./tips/');

var _tips2 = _interopRequireDefault(_tips);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import demoService      from './services/demo.service';


// import List  from './list/';
exports.default = _angular2.default.module('app.modules.process', [])
// .filter('filterType', filterType)
.service('ProcessService', _service2.default).component('processTips', _tips2.default).component('processAdd', _add2.default).config(_config2.default);

},{"./add/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/add/index.js","./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/config.js","./service":"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/service.js","./tips/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/tips/index.js","angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/service.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  Service.$inject = ["$http", "httpHelper", "$rootScope", "$state", "ApiMap"];
  function Service($http, httpHelper, $rootScope, $state, ApiMap) {
    'ngInject';

    _classCallCheck(this, Service);

    this._http = $http;
    // this.$q = $q;
    this._httpHelper = httpHelper;

    this._api = ApiMap.process;

    this._rootScope = $rootScope;
    this._state = $state;
  }

  _createClass(Service, [{
    key: 'get',
    value: function get(id) {

      this._httpHelper.blockUI.start();

      return this._http.get(this._api.get.replace(/\{id\}/, id)).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'getList',
    value: function getList(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.getList, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'set',
    value: function set(data) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.set, data).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'tipsGet',
    value: function tipsGet(id) {

      this._httpHelper.blockUI.start();

      return this._http.get(this._api.tipsGet.replace(/\{id\}/, id)).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'tipsList',
    value: function tipsList(params) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.tipsList, params).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'tipsSet',
    value: function tipsSet(data) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.tipsSet, data).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }, {
    key: 'tipsAdd',
    value: function tipsAdd(data) {

      this._httpHelper.blockUI.start();

      return this._http.post(this._api.tipsAdd, data).then(this._httpHelper.verify, this._httpHelper.error);
    }
  }]);

  return Service;
}();

exports.default = Service;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/tips/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mcPagination = require('../../../core/components/mcPagination/mc-pagination.class');

var _mcPagination2 = _interopRequireDefault(_mcPagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListController = function (_Pagination) {
  ListController.$inject = ["$injector", "$state", "$location", "$stateParams", "toastr", "$uibModal", "ProcessService"];
  _inherits(ListController, _Pagination);

  function ListController($injector, $state, $location, $stateParams, toastr, $uibModal, ProcessService) {
    'ngInject';

    _classCallCheck(this, ListController);

    var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this, $injector));

    _this._state = $state;
    _this._location = $location;
    _this._stateParams = $stateParams;
    _this._modal = $uibModal;

    _this._toastr = toastr;

    _this._service = ProcessService;

    _this.filters = {};

    _this._init();

    return _this;
  }

  _createClass(ListController, [{
    key: '_init',
    value: function _init() {

      this._initFilters();
      this._getList();
    }
  }, {
    key: '_initFilters',
    value: function _initFilters() {
      // console.log(this._stateParams);
      var stateParams = this._stateParams;
      // this.pagination.page = +stateParams.page;
      // this.filters.gender = +stateParams.gender || void(0);

      this.filters.keyword = stateParams.keyword || void 0;
    }
  }, {
    key: '_getList',
    value: function _getList() {
      var _this2 = this;

      var params = this._filterEmptyValue();
      // params.pageSize = this.pagination.pageSize;
      params.page = this.pagination.page;

      this._service.tipsList(params).then(function (data) {
        console.log(data);
        _this2.list = data.cm_tips;
        _this2.pagination.count = data.page_count * _this2.pagination.pageSize;
      });

      // this.list = [
      //             {id: 1, title: '单独的表单控件会被自动赋予一些全局样式', link: '/', content: '单独的表单控件会被自动赋予一些全局样式。所有设置了 .form-control 类的 <input>、<textarea> 和 <select> 元素都将被默认设置宽度属性为 width: 100%;。 将 label 元素和前面提到的控件包裹在 .form-group 中可以获得最好的排列。'},
      //             {id: 2, title: '单独的表单控件会被自动赋予一些全局样式', link: '/', content: '单独的表单控件会被自动赋予一些全局样式。所有设置了 .form-control 类的 <input>、<textarea> 和 <select> 元素都将被默认设置宽度属性为 width: 100%;。 将 label 元素和前面提到的控件包裹在 .form-group 中可以获得最好的排列。'},
      //           ];
      // this.pagination.count = 20;
    }
  }, {
    key: 'toggleAll',
    value: function toggleAll() {
      var _this3 = this;

      if (this.list) {
        this.list.forEach(function (item) {
          return item.checked = _this3.selectAll;
        });
      }
    }
  }, {
    key: 'checkAll',
    value: function checkAll() {
      if (this.list) {
        var uncheckedList = this.list.filter(function (item) {
          return !item.checked;
        });
        var len = uncheckedList.length;

        if (len > 0) {
          this.selectAll = false;
        } else if (len = this.list.length) {
          this.selectAll = true;
        }
      }
    }
  }, {
    key: 'batchMarkedRead',
    value: function batchMarkedRead() {
      if (this.list) {
        var checkedList = this.list.filter(function (item) {
          return item.checked;
        });

        checkedList.forEach(function (item) {
          return item.isRead = true;
        });
      }
    }
  }, {
    key: 'batchRemove',
    value: function batchRemove() {
      if (this.list) {
        this.list = this.list.filter(function (item) {
          return !item.checked;
        });

        // checkedList.forEach(item => item.isRead = true);
        this._toastr.success('删除成功!');
        this._state.reload();
      }
    }
  }, {
    key: 'getCheckedIds',
    value: function getCheckedIds() {
      if (this.list) {
        var checkedList = this.list.filter(function (item) {
          return item.checked;
        });

        return checkedList.map(function (item) {
          return item.id;
        });
      }

      return false;
    }
  }, {
    key: 'markedRead',
    value: function markedRead() {
      var _this4 = this;

      var ids = this.getCheckedIds();

      if (ids && ids.length) {
        console.log(ids);

        this._service.read({ ids: ids }).then(function (data) {
          // this._toastr.success('');
          _this4.batchMarkedRead();
        });
      }
    }
  }, {
    key: 'delete',
    value: function _delete() {
      var _this5 = this;

      var ids = this.getCheckedIds();

      if (ids && ids.length) {
        console.log(ids);
        this._service.delete({ ids: ids }).then(function (data) {
          // this._toastr.success('');
          _this5.batchRemove();
        });
      }
    }
  }]);

  return ListController;
}(_mcPagination2.default);

exports.default = ListController;

},{"../../../core/components/mcPagination/mc-pagination.class":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/tips/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Tips = {
  templateUrl: 'modules/process/tips/template.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = Tips;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/process/tips/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/sysconfig/config.js":[function(require,module,exports){
'use strict';

Config.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
function Config($stateProvider) {
  'ngInject';

  $stateProvider.state('sysconfig', {
    url: '/sysconfig',
    abstract: true,
    template: '<ui-view></ui-view>',
    title: '系统设置',
    sidebarMeta: {
      icon: 'icon-sidebar_members_ic',
      order: 1000
    }
  }).state('sysconfig.time', {
    url: '/time',
    template: '<time-view></time-view>',
    title: '刷新时间设置',
    sidebarMeta: {
      order: 10
    }
  });
}

exports.default = Config;

},{}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/sysconfig/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _bootstrap = require('bootstrap');

var _bootstrap2 = _interopRequireDefault(_bootstrap);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _time = require('./time/');

var _time2 = _interopRequireDefault(_time);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('app.modules.sysconfig', [])
// .filter('filterType', filterType)
//.service('sysconfigService', service)

.component('timeView', _time2.default).config(_config2.default);
//import service from './service';

},{"./config":"/Users/Gavin/Documents/codes/pack/sil/app/modules/sysconfig/config.js","./time/":"/Users/Gavin/Documents/codes/pack/sil/app/modules/sysconfig/time/index.js","angular":"angular","bootstrap":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/dist/js/npm.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/sysconfig/time/ctrl.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mcPagination = require('../../../core/components/mcPagination/mc-pagination.class');

var _mcPagination2 = _interopRequireDefault(_mcPagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListController = function (_Pagination) {
  ListController.$inject = ["$injector", "$state", "$location", "$stateParams", "toastr", "$uibModal", "ConfigService"];
  _inherits(ListController, _Pagination);

  function ListController($injector, $state, $location, $stateParams, toastr, $uibModal, ConfigService) {
    'ngInject';

    _classCallCheck(this, ListController);

    var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this, $injector));

    _this._state = $state;
    _this._location = $location;
    _this._stateParams = $stateParams;
    _this._modal = $uibModal;

    _this._toastr = toastr;

    _this._service = ConfigService;

    _this.filters = {};
    _this._init();

    return _this;
  }

  _createClass(ListController, [{
    key: '_init',
    value: function _init() {
      this._get();
    }
  }, {
    key: '_get',
    value: function _get() {
      var _this2 = this;

      //let params = this._filterEmptyValue();

      this._service.get('refresh_time').then(function (data) {
        if (typeof data == 'string') {
          _this2.keyValue = data;
        }
      });
    }
  }, {
    key: 'setConfig',
    value: function setConfig() {
      var _this3 = this;

      var data = {
        key: "refresh_time",
        value: this.keyValue
      };
      this._service.set(data).then(function (data) {
        _this3._toastr.success('设置成功');
        _this3.cancel();
        _this3._state.reload();
      });
    }
  }]);

  return ListController;
}(_mcPagination2.default);

exports.default = ListController;

},{"../../../core/components/mcPagination/mc-pagination.class":"/Users/Gavin/Documents/codes/pack/sil/app/core/components/mcPagination/mc-pagination.class.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/modules/sysconfig/time/index.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ctrl = require('./ctrl');

var _ctrl2 = _interopRequireDefault(_ctrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var List = {
  templateUrl: 'modules/sysconfig/time/index.html',
  controller: _ctrl2.default,
  controllerAs: 'vm'
};

exports.default = List;

},{"./ctrl":"/Users/Gavin/Documents/codes/pack/sil/app/modules/sysconfig/time/ctrl.js"}],"/Users/Gavin/Documents/codes/pack/sil/app/templates.js":[function(require,module,exports){
"use strict";

angular.module("app.templates", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("modules/dashboard/dashboard.html", "<section class=\"content body-content body-content-compact block-ui block-ui-message-custom dashboard-container\">\n\nindex\n\n</section>\n");
  $templateCache.put("common/components/back-top/back-top.html", "<div class=\"back-to-top\"><i></i></div>\n");
  $templateCache.put("common/components/inline-nav/inline-nav.html", "<section class=\"content-header inline-navigation\">\n  <h4 ng-if=\"$ctrl.title\">{{ $ctrl.title }}</h4>\n  <ul class=\"clearfix\">\n    <li ng-repeat=\"item in $ctrl.navList\" class=\"nav-item\">\n      <a ui-sref=\"{{ item.stateRef }}\" ui-sref-active=\"active\">{{ item.title }}</a>\n    </li>\n\n    <li ng-repeat=\"item in $ctrl.btnList\" class=\"btn-item pull-right\">\n      <a ui-sref=\"{{ item.stateRef }}\" class=\"btn {{ item.btnClass || \'btn-success\' }} m-l-md\" ng-click=\"$ctrl.handleClick(item, $event);\">{{ item.title }}</a>\n    </li>\n\n    <li ng-if=\"$ctrl.backBtn\" class=\"btn-item pull-right\">\n      <a href ng-click=\"$root.back()\" class=\"btn btn-default\">返回</a>\n    </li>\n  </ul>\n</section>\n\n<div block-ui=\"main\" class=\"block-ui-main\">\n  <div ui-view></div>\n</div>\n");
  $templateCache.put("common/components/mc-step/template.html", "<ul class=\"mc-step clearfix center-block\">\n  <li ng-repeat=\"item in vm.stepList\" ng-class=\"{active: item.value <= vm.currentStep }\">\n    <p>{{item.name}}</p>\n    <div class=\"step-arrow\"></div>\n  </li>\n</ul>\n");
  $templateCache.put("common/directives/filter-list/filter-list.html", "<div class=\"option-item {{clazz}}\">\n  <span class=\"item-title\">{{title}}：</span>\n  <ul class=\"clearfix\">\n    <li>\n      <a href=\"javascript:;\" class=\"btn btn-toggle\" ng-click=\"clearKeywordFilter(null)\"\n          ng-class=\"{active: !filters[filterKey]}\">全部</a>\n    </li>\n    <li ng-repeat=\"type in list\">\n      <a href=\"javascript:;\" ng-click=\"clearKeywordFilter(type[itemId || \'id\'])\" title=\"{{type[itemName || \'name\']}}\" class=\"btn btn-toggle\"\n          ng-class=\"{active: filters[filterKey] == type[itemId || \'id\']}\">{{type[itemName || \'name\']}}</a>\n    </li>\n  </ul>\n</div>\n");
  $templateCache.put("common/directives/mcBatchUploadBank/error.html", "<div class=\"modal-body\">\n  <h4>导入结果</h4>\n\n  <p class=\"m-t-lg\">\n    导入成功<span class=\"text-success\">{{vm.count}}</span>条，失败<span class=\"text-danger\">{{vm.errorList.length}}</span>条。\n  </p>\n  <div class=\"panel\" ng-if=\"vm.errorList.length\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"text-center col-sm-1\">机构名称</th>\n        <th class=\"text-center col-sm-1\">上级机构</th>\n        <th class=\"text-center col-sm-1\">失败原因</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.errorList\">\n        <td>{{item.data[0]}}</td>\n        <td>{{item.data[1]}}</td>\n        <td><span class=\"text-danger\">{{item.reason}}</span></td>\n      </tr>\n    </table>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.cancel()\">确定</button>\n  </div>\n</div>\n\n\n");
  $templateCache.put("common/directives/mcBatchUploadBank/template.html", "<div class=\"modal-body\">\n  <h4>如何批量导入</h4>\n\n  <p class=\"m-t-lg\">1.下载《机构数据导入模板》。\n    <a target=\"_blank\" ng-href=\"{{ vm.download_url }}\">点我下载</a>\n  </p>\n\n  <p>2.将机构数据填入模板中保存。</p>\n\n  <p>3.点击上传。</p>\n\n  <button class=\"btn btn-success center-block\" id=\"upload_button\" ng-click=\"vm.uploadFile($event)\">上传</button>\n  <form class=\"dropzone\" ng-hide=\"1\" method=\"post\" enctype=\"multipart/form-data\" ng-dropzone dropzone=\"dropzone\"\n        dropzone-config=\"vm.dropzoneConfig\">\n    <input type=\"hidden\" name=\"extra\" value=\"{{AUTHORIZATION_TOKEN}}\">\n    <input name=\"file\" type=\"file\" multiple/>\n  </form>\n</div>\n\n\n");
  $templateCache.put("common/directives/mcBatchUploadUser/error.html", "<div class=\"modal-body\">\n  <h4>导入结果</h4>\n\n  <p class=\"m-t-lg\">\n    导入成功<span class=\"text-success\">{{vm.count}}</span>条，失败<span class=\"text-danger\">{{vm.errorList.length}}</span>条。\n  </p>\n  <div class=\"panel\" ng-if=\"vm.errorList.length\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"text-center col-sm-1\">手机号</th>\n        <th class=\"text-center col-sm-1\">姓名</th>\n        <th class=\"text-center col-sm-1\">失败原因</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.errorList\">\n        <td>{{item.data[0]}}</td>\n        <td>{{item.data[1]}}</td>\n        <td><span class=\"text-danger\">{{item.reason}}</span></td>\n      </tr>\n    </table>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.cancel()\">确定</button>\n  </div>\n</div>\n\n\n");
  $templateCache.put("common/directives/mcBatchUploadUser/template.html", "<div class=\"modal-body\">\n\n  <h4>如何批量导入</h4>\n\n  <p class=\"m-t-lg\">1.下载《用户导入模板》。\n    <a target=\"_blank\" ng-href=\"{{ vm.download_url }}\">点我下载</a>\n  </p>\n\n  <p>2.将用户数据填入模板中保存。</p>\n\n  <p>3.点击上传。</p>\n\n  <button class=\"btn btn-success center-block\" id=\"upload_button\" ng-click=\"vm.uploadFile($event)\">上传</button>\n  <form class=\"dropzone\" ng-hide=\"1\" method=\"post\" enctype=\"multipart/form-data\" ng-dropzone dropzone=\"dropzone\"\n        dropzone-config=\"vm.dropzoneConfig\">\n    <input type=\"hidden\" name=\"extra\" value=\"{{AUTHORIZATION_TOKEN}}\">\n    <input name=\"file\" type=\"file\" multiple/>\n  </form>\n\n</div>\n");
  $templateCache.put("common/directives/mcBatchUploadVc/error.html", "<div class=\"modal-body\">\n  <h4>导入结果</h4>\n\n  <p class=\"m-t-lg\">\n    导入成功<span class=\"text-success\">{{vm.count}}</span>条，失败<span class=\"text-danger\">{{vm.errorList.length}}</span>条。\n  </p>\n  <div class=\"panel\" ng-if=\"vm.errorList.length\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"text-center col-sm-1\">公司名称</th>\n        <th class=\"text-center col-sm-1\">公司简称</th>\n        <th class=\"text-center col-sm-1\">失败原因</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.errorList\">\n        <td>{{item.data[0]}}</td>\n        <td>{{item.data[1]}}</td>\n        <td><span class=\"text-danger\">{{item.reason}}</span></td>\n      </tr>\n    </table>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.cancel()\">确定</button>\n  </div>\n</div>\n\n\n");
  $templateCache.put("common/directives/mcBatchUploadVc/template.html", "<div class=\"modal-body\">\n  <h4>如何批量导入</h4>\n\n  <p class=\"m-t-lg\">1.下载《投资机构数据导入模板》。\n    <a target=\"_blank\" ng-href=\"{{ vm.download_url }}\">点我下载</a>\n  </p>\n\n  <p>2.将投资机构数据填入模板中保存。</p>\n\n  <p>3.点击上传。</p>\n\n  <button class=\"btn btn-success center-block\" id=\"upload_button\" ng-click=\"vm.uploadFile($event)\">上传</button>\n  <form class=\"dropzone\" ng-hide=\"1\" method=\"post\" enctype=\"multipart/form-data\" ng-dropzone dropzone=\"dropzone\"\n        dropzone-config=\"vm.dropzoneConfig\">\n    <input type=\"hidden\" name=\"extra\" value=\"{{AUTHORIZATION_TOKEN}}\">\n    <input name=\"file\" type=\"file\" multiple/>\n  </form>\n</div>\n\n\n");
  $templateCache.put("core/components/mcContentHeader/mcContentHeader.html", "<section class=\"content-header\">\n  header\n</section>\n");
  $templateCache.put("core/components/mcMainHeader/mcMainHeader.html", "<header class=\"main-header clearfix\">\n  <nav class=\"navbar navbar-static-top\">\n    <ul class=\"nav navbar-nav pull-right\">\n      <li>\n        <a href=\"javascript:;\" ui-sref=\"message.list\" ui-sref-active=\"active\" class=\"mc-message\">\n          <i class=\"icon-header_message_ic\"></i>\n          <span class=\"backen\" ng-if=\"vm.msg_count\">{{vm.msg_count}}</span>\n        </a>\n      </li>\n      <li><a href=\"javascript:;\" ng-click=\"vm.logout()\"><i class=\"icon-header_exit_ic\"></i></a></li>\n      <li class=\"divider\"></li>\n      <li class=\"user-profile\">\n        <a href=\"javascript:;\" ui-sref=\"person.detail\">\n          <!-- <img ng-src=\"{{vm.info.avatar}}\" alt=\"{{vm.info.name}}\"> -->\n          <span>您好，{{vm.info.name}}</span>\n        </a>\n      </li>\n    </ul>\n  </nav>\n</header>\n");
  $templateCache.put("core/components/mcPagination/index.html", "\n<div class=\"row text-center\" ng-if=\"vm.totalItems\">\n  <uib-pagination total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" max-size=\"5\" ng-model=\"vm.currentPage\" ng-change=\"vm.pageChanged()\" first-text=\"首页\" last-text=\"尾页\" previous-text=\"&lt;&lt;\" next-text=\"&gt;&gt;\" boundary-links=\"true\"></uib-pagination>\n</div>\n");
  $templateCache.put("core/components/mcPicker/template.html", "<div class=\"modal-picker\">\n  <div class=\"modal-header\">\n    <div class=\"picker-header-info pull-right\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n      共 {{vm.list.length}} {{vm.options.itemUnit}}{{vm.options.itemType}}\n    </div>\n\n\n    <h4 class=\"modal-title\">{{vm.options.title}}</h4>\n  </div>\n  <div class=\"modal-picker-body clearfix\">\n    <div class=\"picker-items\">\n      <div class=\"item-search\">\n        <div class=\"input-group search-box\">\n          <input type=\"text\" placeholder=\"{{vm.options.searchPlaceholder}}\" ng-model=\"vm.keyword\" class=\"form-control\">\n          <span class=\"input-group-btn\">\n            <button class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n          </span>\n        </div>\n      </div>\n      <dl>\n        <!-- <dt>A</dt> -->\n        <dd>\n          <label class=\"item clearfix\" ng-repeat=\"item in vm.list | filter: vm.keyword\">\n            <img ng-src=\"{{item.avatar}}\" alt=\"{{item.name}}\" class=\"img-circle avatar-small\">\n            <p>{{item.name}}</p>\n            <span class=\"mc-radio\">\n              <input type=\"checkbox\" name=\"items[]\" value=\"{{item.id}}\" ng-click=\"vm.toggleItemSelected(item)\" ng-checked=\"item.selected\">\n              <i class=\"icon-check\"></i>\n            </span>\n          </label>\n        </dd>\n        <!-- <dt>C</dt>\n        <dd>\n        </dd> -->\n      </dl>\n    </div>\n    <div class=\"picker-result\">\n      <h6>已选择 {{vm.selectionItem.length}} {{vm.options.itemUnit}}{{vm.options.itemPosition}} <span ng-if=\"vm.options.max > 0\">（最多可选择{{vm.options.max}} {{vm.options.itemUnit}}）</span></h6>\n      <ul ng-if=\"vm.selectionItem.length > 0\">\n        <li class=\"item clearfix\" ng-repeat=\"item in vm.selectionItem\">\n          <img ng-src=\"{{item.avatar}}\" alt=\"{{item.name}}\" class=\"img-circle avatar-small\">\n          <p>{{item.name}}</p>\n          <p>{{vm.options.itemPosition}}</p>\n          <i class=\"icon-close\" ng-click=\"vm.toggleItemSelected(item)\"></i>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-class=\"{disabled: (vm.selectionItem.length < vm.options.min || (vm.options.max && vm.selectionItem.length > vm.options.max))}\" ng-click=\"vm.ok()\">确定</button>\n  </div>\n</div>\n");
  $templateCache.put("core/components/mcSidebar/mcSidebar.html", "<aside class=\"main-sidebar\">\n  <div class=\"header text-center\">\n    <img ng-src=\"{{sidebar.info.avatar}}\" class=\"avatar-middle img-circle sidebar-logo\" alt=\"{{sidebar.info.name}}\" style=\"background: #2f3746;\">\n    <h6 class=\"m-t\">{{sidebar.info.name}}</h6>\n  </div>\n\n  <!-- left sidebar menu -->\n  <ul class=\"sidebar-list\" slimscroll=\"{height: \'{{menuHeight}}px\'}\" slimscroll-watch=\"menuHeight\">\n    <li ng-repeat=\"item in sidebar.menuItems\" class=\"sidebar-list-item\" ng-class=\"{\'with-sub-menu\': item.subMenu}\"\n        ui-sref-active=\"selected\" mc-sidebar-toggling-item=\"item\" ng-if=\"sidebar.access[item.name]\">\n\n      <a ng-if=\"!item.subMenu\" ui-state=\"item.stateRef || \'\'\" ng-href=\"{{(item.fixedHref ? item.fixedHref: \'\')}}\"\n         class=\"sidebar-list-link\">\n        <i class=\"icon {{ item.icon }}\"></i><span>{{ item.title }}</span>\n      </a>\n\n      <a ng-if=\"item.subMenu\" class=\"sidebar-list-link\" mc-ui-sref-toggler>\n        <i class=\"icon {{ item.icon }}\"></i>\n        <span>{{ item.title }}</span>\n        <i ng-if=\"item.subMenu\" class=\"icon-angle-right\" ui-sref-active=\"icon-angle-down\"></i>\n      </a>\n\n      <!-- submenu -->\n      <ul ng-if=\"item.subMenu\" class=\"sidebar-sublist\" ng-class=\"{\'slide-right\': item.slideRight}\" mc-ui-sref-toggling-submenu>\n        <li ng-repeat=\"subitem in item.subMenu\" ng-class=\"{\'with-sub-menu\': subitem.subMenu}\" ui-sref-active=\"selected\"\n            mc-sidebar-toggling-item=\"subitem\" class=\"sidebar-sublist-item\" ng-if=\"sidebar.access[subitem.name]\">\n          <a ng-if=\"subitem.subMenu\" mc-ui-sref-toggler class=\"sidebar-list-link subitem-submenu-link\">\n            <span>{{ subitem.title }}</span>\n            <i ng-if=\"subitem.subMenu\" ng-class=\"{\'icon-angle-down\': subitem.expanded, \'icon-angle-right\': !subitem.expanded}\"></i>\n          </a>\n          <a ng-if=\"(!subitem.subMenu && subitem.disabled)\" href class=\"sidebar-list-link\">{{ subitem.title }}</a>\n          <a ng-if=\"(!subitem.subMenu && !subitem.disabled)\" ui-state=\"subitem.stateRef || \'\'\"\n             ng-href=\"{{(subitem.fixedHref ? subitem.fixedHref: \'\')}}\">\n             {{ subitem.title}}\n          </a>\n        </li>\n      </ul><!-- /submenu -->\n    </li>\n  </ul><!-- /left sidebar menu -->\n</aside>\n");
  $templateCache.put("core/directives/mcDatePicker/datepicker.html", "<div class=\"btn-group mc-datepicker\" ng-click=\"showDatePicker($event)\">\n  <button type=\"button\" class=\"btn btn-default\" ng-show=\"startDate\">\n        <span>{{startDate.format(\'YYYY\') + \'年\'}}</span>\n        <span ng-if=\"minView != \'year\' \">{{startDate.format(\'MM\') + \'月\'}}</span>\n        <span ng-if=\"minView != \'year\' && minView != \'month\' \">{{startDate.format(\'DD\') + \'日\'}}</span>\n        <span ng-if=\"minView != \'year\' && minView != \'month\' && minView != \'date\' \">{{ \' \' + startDate.format(\'HH\') }}</span>\n        <span ng-if=\"minView != \'year\' && minView != \'month\' && minView != \'date\' && minView != \'hours\' \">{{ \': \' + startDate.format(\'mm\') }}</span>\n  </button>\n  <button type=\"button\" class=\"btn btn-default\" ng-hide=\"startDate\">\n    <span> — </span>\n  </button>\n  <button type=\"button\" class=\"btn btn-default dropdown-toggle\" aria-haspopup=\"true\"\n          aria-expanded=\"false\">\n    <span class=\"caret\"></span>\n  </button>\n  <div class=\"dropdown-menu\" ng-click=\"$event.stopPropagation();\" ng-mouseleave=\"mouseLeave($event)\">\n    <!-- 注：此处的min-view由父controller定义,考虑到兼容以前的页面，所以给了一个默认的month -->\n    <div id=\"{{id}}\" date-picker=\"startDate\" min-date=\"minDate\" view=\"{{view}}\" max-date=\"maxDate\" min-view=\"{{minView || \'month\'}}\" auto-close=\"true\" watch-direct-changes=\"true\"></div>\n  </div>\n</div>\n");
  $templateCache.put("core/directives/mcUploadAvatar/upload-image.html", "<div class=\"upload-content\">\n\n  <div class=\"crop-warpper\">\n      <img ng-if=\"dataUrl\" ng-src=\"{{dataUrl}}\" width=\"800\"\n      ng-cropper\n      ng-cropper-proxy=\"cropperProxy\"\n      ng-cropper-show=\"showEvent\"\n      ng-cropper-hide=\"hideEvent\"\n      ng-cropper-options=\"options\">\n\n      <div class=\"upload-progress clearfix\" ng-show=\"dynamic > 0 && !uploaded\">\n          <div class=\"progress-box\">\n              <div class=\"progress-bar progress-bar-success progress-bar-striped active\" style=\"width: {{dynamic}}%;\"></div>\n          </div>\n          <span class=\"process-percent\">{{dynamic}}%</span>\n      </div>\n\n      <div class=\"upload-progress success\" ng-show=\"uploaded\">\n          <i class=\'icon-check_circle\'></i> 上传成功！\n      </div>\n\n  </div>\n\n  <div class=\"preview-warpper\">\n      <div class=\"preview-avatar\">\n        <div>\n          <img ng-src=\"{{preview.dataUrl || imgUrl || \'/dist/images/common/man.png\'}}\" id=\"JS_preview_image\" class=\"img-circle avatar-middle\">\n        </div>\n      </div>\n      <p>选择 png/jpg 图片100*100</p>\n      <a class=\"btn btn-default\" href=\"javascript:;\" ng-click=\"avatarVm.selectFile()\">上传图片 --{{isEditing}}</a>\n  </div>\n\n  <form class=\"dropzone\" ng-hide=\"1\" method=\"post\" enctype=\"multipart/form-data\" ng-dropzone dropzone=\"dropzone\"\n      dropzone-config=\"dropzoneConfig\">\n    <input name=\"pension_id\" type=\"hidden\" value=\"{{ pensionInfo.pension_id}}\"/>\n    <input type=\"file\" name=\"{{fileName || \'file\'}}\" id=\"JS_avatar_input\">\n    <input type=\"hidden\" name=\"x\" value=\"{{data.x}}\">\n    <input type=\"hidden\" name=\"y\" value=\"{{data.y}}\">\n    <input type=\"hidden\" name=\"width\" value=\"{{data.width}}\">\n    <input type=\"hidden\" name=\"height\" value=\"{{data.height}}\">\n    <input type=\"hidden\" name=\"Rotate\" value=\"{{data.Rotate}}\">\n    <input type=\"hidden\" name=\"ScaleX\" value=\"{{data.ScaleX}}\">\n    <input type=\"hidden\" name=\"ScaleY\" value=\"{{data.ScaleY}}\">\n    <input ng-repeat=\"param in params\" name=\"{{param.name}}\" type=\"hidden\" value=\"{{param.value}}\">\n  </form>\n\n</div>\n\n");
  $templateCache.put("core/directives/mcUploadAvatar/upload.html", "<div class=\"upload-content\">\n\n  <div class=\"crop-warpper\">\n      <img ng-if=\"dataUrl\" ng-src=\"{{dataUrl}}\" width=\"800\"\n      ng-cropper\n      ng-cropper-proxy=\"cropperProxy\"\n      ng-cropper-show=\"showEvent\"\n      ng-cropper-hide=\"hideEvent\"\n      ng-cropper-options=\"options\">\n\n      <div class=\"upload-progress clearfix\" ng-show=\"dynamic > 0 && !uploaded\">\n          <div class=\"progress-box\">\n              <div class=\"progress-bar progress-bar-success progress-bar-striped active\" style=\"width: {{dynamic}}%;\"></div>\n          </div>\n          <span class=\"process-percent\">{{dynamic}}%</span>\n      </div>\n\n      <div class=\"upload-progress success\" ng-show=\"uploaded\">\n          <i class=\'icon-check_circle\'></i> 上传成功！\n      </div>\n\n  </div>\n\n  <div class=\"preview-warpper\">\n      <div class=\"preview-avatar\">\n        <div>\n          <img ng-src=\"{{preview.dataUrl || imgUrl || \'/dist/images/common/man.png\'}}\" id=\"JS_preview_image\" class=\"img-circle avatar-middle\">\n        </div>\n      </div>\n      <p>选择 png/jpg 图片100*100</p>\n      <a class=\"btn btn-default\" href=\"javascript:;\" ng-click=\"avatarVm.selectFile()\">上传头像</a>\n  </div>\n\n  <form class=\"dropzone\" ng-hide=\"1\" method=\"post\" enctype=\"multipart/form-data\" ng-dropzone dropzone=\"dropzone\"\n      dropzone-config=\"dropzoneConfig\">\n    <input name=\"pension_id\" type=\"hidden\" value=\"{{ pensionInfo.pension_id}}\"/>\n    <input type=\"file\" name=\"{{fileName || \'file\'}}\" id=\"JS_avatar_input\">\n    <input type=\"hidden\" name=\"x\" value=\"{{data.x}}\">\n    <input type=\"hidden\" name=\"y\" value=\"{{data.y}}\">\n    <input type=\"hidden\" name=\"width\" value=\"{{data.width}}\">\n    <input type=\"hidden\" name=\"height\" value=\"{{data.height}}\">\n    <input type=\"hidden\" name=\"Rotate\" value=\"{{data.Rotate}}\">\n    <input type=\"hidden\" name=\"ScaleX\" value=\"{{data.ScaleX}}\">\n    <input type=\"hidden\" name=\"ScaleY\" value=\"{{data.ScaleY}}\">\n    <input ng-repeat=\"param in params\" name=\"{{param.name}}\" type=\"hidden\" value=\"{{param.value}}\">\n  </form>\n\n</div>\n\n");
  $templateCache.put("core/directives/mcUploadImage/upload.html", "<div class=\"upload-content\">\n\n  <div class=\"crop-warpper\">\n      <img ng-if=\"dataUrl\" ng-src=\"{{dataUrl}}\" width=\"800\"\n      ng-cropper\n      ng-cropper-proxy=\"cropperProxy\"\n      ng-cropper-show=\"showEvent\"\n      ng-cropper-hide=\"hideEvent\"\n      ng-cropper-options=\"options\">\n\n      <div class=\"upload-progress clearfix\" ng-show=\"dynamic > 0 && !uploaded\">\n          <div class=\"progress-box\">\n              <div class=\"progress-bar progress-bar-success progress-bar-striped active\" style=\"width: {{dynamic}}%;\"></div>\n          </div>\n          <span class=\"process-percent\">{{dynamic}}%</span>\n      </div>\n\n      <div class=\"upload-progress success\" ng-show=\"uploaded\">\n          <i class=\'icon-check_circle\'></i> 上传成功！\n      </div>\n\n  </div>\n\n  <div class=\"preview-warpper\">\n      <div class=\"preview-avatar\">\n        <div style=\"border-radius: initial;width: 100px;height: 100px;\">\n          <img ng-src=\"{{preview.dataUrl || imgUrl || \'/dist/images/common/bg_avatar.png\'}}\" id=\"JS_preview_image\" class=\"avatar-middle\"\n            style=\"width: 100px;height: 100px;\">\n        </div>\n      </div>\n      <a class=\"btn btn-default\" href=\"javascript:;\" ng-click=\"avatarVm.selectFile()\">上传图片</a>\n  </div>\n\n  <form class=\"dropzone\" ng-hide=\"1\" method=\"post\" enctype=\"multipart/form-data\" ng-dropzone dropzone=\"dropzone\"\n      dropzone-config=\"dropzoneConfig\">\n    <input name=\"pension_id\" type=\"hidden\" value=\"{{ pensionInfo.pension_id}}\"/>\n    <input type=\"file\" name=\"{{fileName || \'file\'}}\" id=\"JS_avatar_input\">\n    <input type=\"hidden\" name=\"x\" value=\"{{data.x}}\">\n    <input type=\"hidden\" name=\"y\" value=\"{{data.y}}\">\n    <input type=\"hidden\" name=\"width\" value=\"{{data.width}}\">\n    <input type=\"hidden\" name=\"height\" value=\"{{data.height}}\">\n    <input type=\"hidden\" name=\"Rotate\" value=\"{{data.Rotate}}\">\n    <input type=\"hidden\" name=\"ScaleX\" value=\"{{data.ScaleX}}\">\n    <input type=\"hidden\" name=\"ScaleY\" value=\"{{data.ScaleY}}\">\n    <input ng-repeat=\"param in params\" name=\"{{param.name}}\" type=\"hidden\" value=\"{{param.value}}\">\n  </form>\n\n</div>\n\n");
  $templateCache.put("modules/account/detail/index.html", "<section class=\"content-header clearfix\">\n    <h4>资料设置</h4>\n    <a href=\"javascript:void(0)\" class=\"btn btn-default pull-right\" ng-click=\"$root.back();\">返回</a>\n</section>\n<section class=\"content body-content\" block-ui=\"main\">\n\n    <div class=\"form-horizontal\">\n        <div class=\"form-group\">\n            <label for=\"inputName\" class=\"col-sm-2 control-label\">姓名</label>\n            <div class=\"col-sm-2\">\n                <input type=\"text\" class=\"form-control\" id=\"inputName\" ng-model=\"vm.person.true_name\" placeholder=\"\">\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"inputPhone\" class=\"col-sm-2 control-label\">手机号</label>\n            <div class=\"col-sm-4\">\n                <input type=\"text\" class=\"form-control\" id=\"inputPhone\" ng-model=\"vm.person.phone\" placeholder=\"\">\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"inputPwd\" class=\"col-sm-2 control-label\">新密码</label>\n            <div class=\"col-sm-4\">\n                <input type=\"text\" class=\"form-control\" id=\"inputPwd\" ng-model=\"vm.person.new_password\" placeholder=\"\">\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"\" class=\"col-sm-2 control-label\">角色信息</label>\n            <div class=\"btn-group col-sm-2\">\n              <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                {{vm.person.role_name}}\n                <span class=\"caret\"></span>\n              </button>\n              <ul class=\"dropdown-menu\">\n                <li ng-repeat=\"role in vm.roleList\"><a ng-click=\"vm.person.role_name=role.name;vm.person.role=role.value\" href=\"javascript:void(0)\">{{role.name}}</a></li>\n              </ul>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"\" class=\"col-sm-2 control-label\">用户状态</label>\n            <div class=\"btn-group col-sm-2\">\n              <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                {{vm.stateArr[vm.person.state]}}\n                <span class=\"caret\"></span>\n              </button>\n              <ul class=\"dropdown-menu\">\n                <li><a ng-click=\"vm.person.state=0\" href=\"javascript:void(0)\">未激活</a></li>\n                <li><a ng-click=\"vm.person.state=1\" href=\"javascript:void(0)\">正常</a></li>\n                <li><a ng-click=\"vm.person.state=2\" href=\"javascript:void(0)\">已冻结</a></li>\n                <li><a ng-click=\"vm.person.state=3\" href=\"javascript:void(0)\">已删除</a></li>\n              </ul>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <button type=\"button\" ng-click=\"vm.setUser()\" class=\"btn btn-success\">提交</button>\n        </div>\n    </div>\n</section>");
  $templateCache.put("modules/account/list/index.html", "<section class=\"content-header\">\n  <div class=\"options\">\n    <div class=\"option-item option-time\">\n      <ul class=\"clearfix\">\n        <li>\n          <div class=\"input-group search-box\">\n            <input ng-model=\"vm.filters.true_name\" type=\"text\" placeholder=\"请输姓名查询\" class=\"form-control\"\n                    code=\"13\" key-event=\"vm.reSearch();\">\n            <span class=\"input-group-btn\">\n              <button ng-click=\"vm.reSearch()\" class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n            </span>\n          </div>\n        </li>\n        <li>\n          <div class=\"input-group search-box\">\n            <input ng-model=\"vm.filters.phone\" type=\"text\" placeholder=\"请输手机号查询\" class=\"form-control\"\n                    code=\"13\" key-event=\"vm.reSearch();\">\n            <span class=\"input-group-btn\">\n              <button ng-click=\"vm.reSearch()\" class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n            </span>\n          </div>\n        </li>\n        <li>\n          <div class=\"input-group search-box\">\n            <input ng-model=\"vm.filters.bank_name\" type=\"text\" placeholder=\"请输机构查询\" class=\"form-control\"\n                    code=\"13\" key-event=\"vm.reSearch();\">\n            <span class=\"input-group-btn\">\n              <button ng-click=\"vm.reSearch()\" class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n            </span>\n          </div>\n        </li>\n        <li>\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                {{vm.filters.state?vm.stateArr[vm.filters.state]:\'全部\'}}\n                <span class=\"caret\"></span>\n              </button>\n              <ul class=\"dropdown-menu\">\n                <li><a ng-click=\"vm.filters.state=undefined;vm.reSearch()\" href=\"javascript:void(0)\">全部</a></li>\n                <li><a ng-click=\"vm.filters.state=0;vm.reSearch()\" href=\"javascript:void(0)\">未激活</a></li>\n                <li><a ng-click=\"vm.filters.state=1;vm.reSearch()\" href=\"javascript:void(0)\">正常</a></li>\n                <li><a ng-click=\"vm.filters.state=2;vm.reSearch()\" href=\"javascript:void(0)\">已冻结</a></li>\n                <li><a ng-click=\"vm.filters.state=3;vm.reSearch()\" href=\"javascript:void(0)\">已删除</a></li>\n              </ul>\n            </div>\n        </li>\n        <li>\n          <button type=\"button\" class=\"btn btn-success pull-right m-l-sm\" style=\"position: relative; z-index: 2;\"\n                  ng-click=\"vm.addUser()\"><i class=\"icon-Plus\"></i> 添加\n          </button>\n\n          <button type=\"button\" class=\"btn btn-info pull-right\" style=\"position: relative; z-index: 2;\" data-toggle=\"modal\" data-target=\".pop-player\"\n                  ng-click=\"$emit(\'batchUploadUser\');\"><i class=\"icon-Plus\"></i> 批量录入\n          </button>\n        </li>\n      </ul>\n    </div>\n    <div>\n      <mc-batch-upload-user></mc-batch-upload-user>\n    </div>\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\" ng-if=\"vm.list.length > 0\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-1 text-center\">id</th>\n        <th class=\"col-m-1 text-center\">姓名</th>\n        <th class=\"col-m-1 text-center\">手机号</th>\n        <th class=\"col-m-1 text-center\">所属角色</th>\n        <th class=\"col-m-1 text-center\">机构名称</th>\n        <th class=\"col-m-1 text-center\">状态</th>\n        <th class=\"col-m-1 text-center\">操作</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>{{item.id}}</td>\n        <td>{{item.true_name}}</td>\n        <td>{{item.phone}}</td>\n        <td>{{item.role_name}}</td>\n        <td>{{item.bank_name}}</td>\n        <td>\n          <span class=\"text-muted\" ng-if=\"item.state==0\">未激活</span>\n          <span class=\"text-success\" ng-if=\"item.state==1\">正常</span>\n          <span class=\"text-danger\" ng-if=\"item.state==2\">已冻结</span>\n          <span class=\"text-danger\" ng-if=\"item.state==3\">已删除</span>\n        </td>\n        <td>\n          <a href=\"javascript:void(0)\" ng-click=\"vm.assignBranch(item)\">分配机构</a>\n          <a ui-sref=\"account.detail({id: item.id})\">查看<i class=\"icon-angle-right\"></i></a>\n        </td>\n      </tr>\n    </table>\n  </div>\n\n  <mc-pagination total-items=\"vm.pagination.count\" items-per-page=\"vm.pagination.pageSize\" current-page=\"vm.pagination.page\" page-change=\"vm.pageChanged()\"></mc-pagination>\n\n</section>\n");
  $templateCache.put("modules/bank/list/index.html", "<section class=\"content-header\">\n  <button type=\"button\" class=\"btn btn-success pull-right m-l-sm\" style=\"position: relative; z-index: 2;\"\n    ng-click=\"vm.addBank()\"><i class=\"icon-Plus\"></i> 添加机构\n  </button>\n\n  <button type=\"button\" class=\"btn btn-info pull-right\" style=\"position: relative; z-index: 2;\" data-toggle=\"modal\" data-target=\".pop-player\"\n    ng-click=\"$emit(\'batchUploadBank\');\"><i class=\"icon-Plus\"></i> 批量录入\n  </button>\n  <div class=\"options\">\n    <div class=\"option-item option-time\">\n      <ul class=\"clearfix\">\n        <li>\n          <div class=\"input-group search-box\">\n            <input ng-model=\"vm.filters.name\" type=\"text\" placeholder=\"请输机构名称查询\" class=\"form-control\"\n                    code=\"13\" key-event=\"vm.reSearch();\">\n            <span class=\"input-group-btn\">\n              <button ng-click=\"vm.reSearch()\" class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n            </span>\n          </div>\n        </li>\n      </ul>\n    </div>\n    <div class=\"option-item large\">\n      <span class=\"item-title text-right\">机构状态：</span>\n      <ul class=\"clearfix\">\n          <li>\n              <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.state, \'btn-toggle\': !vm.filters.state, \'active\': !vm.filters.state}\" ng-click=\"vm.switch(\'state\')\">\n                  全部\n              </a>\n          </li>\n          <li ng-repeat=\"item in vm.bankStateList\">\n              <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.state != item.value, \'btn-toggle\': vm.filters.state == item.value, \'active\': vm.filters.state == item.value}\" ng-click=\"vm.switch(\'state\', item.value)\">\n                  {{ item.label }}\n              </a>\n          </li>\n      </ul>\n    </div>\n    <div>\n      <mc-batch-upload-bank></mc-batch-upload-bank>\n    </div>\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\" ng-if=\"vm.list.length > 0\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-1 text-center\">id</th>\n        <th class=\"col-m-1 text-center\">机构</th>\n        <th class=\"col-m-1 text-center\">地址</th>\n        <th class=\"col-m-1 text-center\">联系电话</th>\n        <th class=\"col-m-1 text-center\">上级机构</th>\n        <th class=\"col-m-1 text-center\" colspan=\"3\">操作</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>{{item.id}}</td>\n        <td>{{item.name}}</td>\n        <td>{{item.address}}</td>\n        <td>{{item.phone}}</td>\n        <td>{{item.superior_name}}</td>\n        <!-- <td width=\"90px\">\n          <a href=\"javascript:void(0)\" ng-click=\"vm.setMap(item)\">选取地址</a>\n        </td> -->\n        <td width=\"90px\">\n          <a href=\"javascript:void(0)\" ng-click=\"vm.setName(item)\">更改资料</a>\n        </td>\n        <td width=\"110px\">\n          <a href=\"javascript:void(0)\" ng-click=\"vm.assignBranch(item)\">选择上级机构</a>\n        </td>\n        <td width=\"90px\">\n          <a href=\"javascript:void(0)\" class=\"text-danger\" ng-show=\"item.state == 1\" ng-click=\"vm.delete(item)\">删除</a>\n          <a href=\"javascript:void(0)\" class=\"text-danger\" ng-show=\"item.state == 3\" ng-click=\"vm.redelete(item)\">取消删除</a>\n        </td>\n      </tr>\n    </table>\n  </div>\n\n</section>\n\n");
  $templateCache.put("modules/demo/access/template.html", "<section class=\"content-header\">\n  权限设置\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom\" block-ui=\"main\">\n\n\n  <div class=\"panel\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-1 text-center\">姓名</th>\n        <th class=\"col-m-1 text-center\">性别</th>\n        <th class=\"col-m-1 text-center\" ng-repeat=\"item in vm.roleList\">{{item.name}}</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>{{item.name}}</td>\n        <td>{{item.title}}</td>\n        <td ng-repeat=\"role in vm.roleList\">\n          <label class=\"mc-radio\">\n            <input type=\"checkbox\" ng-model=\"vm.access[role.value][item.name]\" />\n            <i class=\"icon-check\"></i>\n          </label>\n        </td>\n      </tr>\n    </table>\n  </div>\n  \n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit()\"> 保存</button>\n  </div>\n</section>\n");
  $templateCache.put("modules/demo/component/index.html", "<header class=\"navbar navbar-static-top bs-docs-nav\" id=\"top\" role=\"banner\">\n    <div class=\"container\">\n      <div class=\"navbar-header\">\n        <button class=\"navbar-toggle collapsed\" type=\"button\" data-toggle=\"collapse\" data-target=\"#bs-navbar\" aria-controls=\"bs-navbar\" aria-expanded=\"false\">\n          <span class=\"sr-only\">Toggle navigation</span>\n          <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n        </button>\n        <a href=\"../\" class=\"navbar-brand\">MC-bootstrap</a>\n      </div>\n      <nav id=\"bs-navbar\" class=\"collapse navbar-collapse\">\n        <ul class=\"nav navbar-nav\" style=\"display:none\">\n          <li>\n            <a href=\"../getting-started/\" onclick=\"_hmt.push([\'_trackEvent\', \'docv3-navbar\', \'click\', \'V3导航-起步\'])\">起步</a>\n          </li>\n          <li>\n            <a href=\"../css/\" onclick=\"_hmt.push([\'_trackEvent\', \'docv3-navbar\', \'click\', \'V3导航-全局CSS样式\'])\">全局 CSS 样式</a>\n          </li>\n          <li class=\"active\">\n            <a href=\"../components/\" onclick=\"_hmt.push([\'_trackEvent\', \'docv3-navbar\', \'click\', \'V3导航-组件\'])\">组件</a>\n          </li>\n          <li>\n            <a href=\"../javascript/\" onclick=\"_hmt.push([\'_trackEvent\', \'docv3-navbar\', \'click\', \'V3导航-JavaScript插件\'])\">JavaScript 插件</a>\n          </li>\n          <li>\n            <a href=\"../customize/\" onclick=\"_hmt.push([\'_trackEvent\', \'docv3-navbar\', \'click\', \'V3导航-定制\'])\">定制</a>\n          </li>\n          <li><a href=\"http://expo.bootcss.com\" onclick=\"_hmt.push([\'_trackEvent\', \'docv3-navbar\', \'click\', \'V3导航-网站实例\'])\" target=\"_blank\">网站实例</a></li>\n        </ul>\n        <ul class=\"nav navbar-nav navbar-right\">\n          <li><a href=\"http://www.bootcss.com/\" onclick=\"_hmt.push([\'_trackEvent\', \'docv3-navbar\', \'click\', \'V3导航-Bootstrap中文网\'])\" target=\"_blank\">Bootstrap中文网</a></li>\n        </ul>\n      </nav>\n    </div>\n  </header>\n  <div class=\"bs-docs-header\" tabindex=\"-1\">\n    <div class=\"container\">\n      <h1>组件</h1>\n      <p>无数可复用的组件，包括字体图标、下拉菜单、导航、警告框、弹出框等更多功能。</p>\n    </div>\n  </div>\n\n  <div class=\"container bs-docs-container\">\n    <div class=\"row\">\n      <div class=\"col-md-9\" role=\"main\">\n\n        <div class=\"bs-docs-section\">\n          <h2 id=\"avatars\"><a class=\"anchorjs-link \" href=\"#thumbnails-default\" aria-label=\"Anchor link for: thumbnails default\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>头像样式</h2>\n          <p>目前预定了3种规格的头像样式。</p>\n          <div class=\"bs-example\" data-example-id=\"simple-thumbnails\">\n            <img src=\"...\" alt=\"...\" class=\"img-circle avatar-larger\">\n            <img src=\"...\" alt=\"...\" class=\"img-circle avatar-middle\">\n            <img src=\"...\" alt=\"...\" class=\"img-circle avatar-small\">\n          </div>\n          <div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"...\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"...\"</span> <span class=\"na\">class=</span><span class=\"s\">\"img-circle avatar-larger\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"...\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"...\"</span> <span class=\"na\">class=</span><span class=\"s\">\"img-circle avatar-middle\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"...\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"...\"</span> <span class=\"na\">class=</span><span class=\"s\">\"img-circle avatar-small\"</span><span class=\"nt\">&gt;</span></code></pre></div>\n        </div>\n\n        <div class=\"bs-docs-section\">\n          <h1 id=\"buttons\" class=\"page-header\"><a class=\"anchorjs-link \" href=\"#buttons\" aria-label=\"Anchor link for: buttons\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>按钮</h1>\n          <h2 id=\"buttons-tags\"><a class=\"anchorjs-link \" href=\"#buttons-tags\" aria-label=\"Anchor link for: buttons tags\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>可作为按钮使用的标签或元素</h2>\n          <h2 id=\"buttons-sizes\"><a class=\"anchorjs-link \" href=\"#buttons-sizes\" aria-label=\"Anchor link for: buttons sizes\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>尺寸</h2>\n          <div class=\"bs-example\" data-example-id=\"btn-sizes\">\n            <p>\n              <button type=\"button\" class=\"btn btn-primary btn-lg\">（大按钮）Large button</button>\n              <button type=\"button\" class=\"btn btn-default btn-lg\">（大按钮）Large button</button>\n            </p>\n            <p>\n              <button type=\"button\" class=\"btn btn-primary\">（默认尺寸）Default button</button>\n              <button type=\"button\" class=\"btn btn-default\">（默认尺寸）Default button</button>\n            </p>\n          </div>\n          <div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;p&gt;</span>\n  <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-primary btn-lg\"</span><span class=\"nt\">&gt;</span>（大按钮）Large button<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-default btn-lg\"</span><span class=\"nt\">&gt;</span>（大按钮）Large button<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p&gt;</span>\n  <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-primary\"</span><span class=\"nt\">&gt;</span>（默认尺寸）Default button<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-default\"</span><span class=\"nt\">&gt;</span>（默认尺寸）Default button<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div>\n          <h2 id=\"buttons-options\"><a class=\"anchorjs-link \" href=\"#buttons-options\" aria-label=\"Anchor link for: buttons options\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>预定义样式</h2>\n\n          <p>使用下面列出的类可以快速创建一个带有预定义样式的按钮。</p>\n          <div class=\"bs-example\">\n            <button type=\"button\" class=\"btn btn-default\">（默认样式）Default</button>\n            <button type=\"button\" class=\"btn btn-primary\">（首选项）Primary</button>\n            <button type=\"button\" class=\"btn btn-success\">（成功）Success</button>\n            <button type=\"button\" class=\"btn btn-info\">（一般信息）Info</button>\n            <button type=\"button\" class=\"btn btn-warning\">（警告）Warning</button>\n            <button type=\"button\" class=\"btn btn-danger\">（危险）Danger</button>\n            <button type=\"button\" class=\"btn btn-link\">（链接）Link</button>\n          </div>\n          <div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"c\">&lt;!-- Standard button --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-default\"</span><span class=\"nt\">&gt;</span>（默认样式）Default<span class=\"nt\">&lt;/button&gt;</span>\n\n<span class=\"c\">&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-primary\"</span><span class=\"nt\">&gt;</span>（首选项）Primary<span class=\"nt\">&lt;/button&gt;</span>\n\n<span class=\"c\">&lt;!-- Indicates a successful or positive action --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-success\"</span><span class=\"nt\">&gt;</span>（成功）Success<span class=\"nt\">&lt;/button&gt;</span>\n\n<span class=\"c\">&lt;!-- Contextual button for informational alert messages --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-info\"</span><span class=\"nt\">&gt;</span>（一般信息）Info<span class=\"nt\">&lt;/button&gt;</span>\n\n<span class=\"c\">&lt;!-- Indicates caution should be taken with this action --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-warning\"</span><span class=\"nt\">&gt;</span>（警告）Warning<span class=\"nt\">&lt;/button&gt;</span>\n\n<span class=\"c\">&lt;!-- Indicates a dangerous or potentially negative action --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-danger\"</span><span class=\"nt\">&gt;</span>（危险）Danger<span class=\"nt\">&lt;/button&gt;</span>\n\n<span class=\"c\">&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-link\"</span><span class=\"nt\">&gt;</span>（链接）Link<span class=\"nt\">&lt;/button&gt;</span></code></pre></div>\n\n          <p>禁用的按钮样式</p>\n          <div class=\"bs-example\">\n            <button type=\"button\" class=\"btn btn-default\" disabled>（默认样式）Default</button>\n            <button type=\"button\" class=\"btn btn-primary\" disabled>（首选项）Primary</button>\n            <button type=\"button\" class=\"btn btn-success\" disabled>（成功）Success</button>\n            <button type=\"button\" class=\"btn btn-info\" disabled>（一般信息）Info</button>\n            <button type=\"button\" class=\"btn btn-warning\" disabled>（警告）Warning</button>\n            <button type=\"button\" class=\"btn btn-danger\" disabled>（危险）Danger</button>\n            <button type=\"button\" class=\"btn btn-link\" disabled>（链接）Link</button>\n          </div>\n\n          <p>简单的切换选项按钮</p>\n          <div class=\"bs-example\" data-example-id=\"single-button-dropdown\">\n            <button class=\"btn btn-toggle\">空模板</button>\n            <button class=\"btn btn-toggle active\">介护一级</button>\n            <button class=\"btn btn-toggle active arrow\">每周</button>\n          </div>\n          <div>\n            <code>\n              <pre>&lt;div class=&quot;bs-example&quot; data-example-id=&quot;single-button-dropdown&quot;&gt;\n            &lt;button class=&quot;btn btn-toggle&quot;&gt;&#31354;&#27169;&#26495;&lt;/button&gt;\n            &lt;button class=&quot;btn btn-toggle active&quot;&gt;&#20171;&#25252;&#19968;&#32423;&lt;/button&gt;\n            &lt;button class=&quot;btn btn-toggle active arrow&quot;&gt;&#27599;&#21608;&lt;/button&gt;\n          &lt;/div&gt;</pre>\n            </code>\n          </div>\n\n          <h2 id=\"btn-dropdowns-single\"><a class=\"anchorjs-link \" href=\"#btn-dropdowns-single\" aria-label=\"Anchor link for: btn dropdowns single\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>分裂式按钮下拉菜单</h2>\n          <p>相似地，分裂式按钮下拉菜单也需要同样的改变一些标记，但只是多一个分开的按钮。</p>\n          <div class=\"bs-example\" data-example-id=\"split-button-dropdown\">\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-default\">Default</button>\n              <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span class=\"caret\"></span>\n                <span class=\"sr-only\">Toggle Dropdown</span>\n              </button>\n              <ul class=\"dropdown-menu\">\n                <li><a href=\"#\">Action</a></li>\n                <li><a href=\"#\">Another action</a></li>\n                <li><a href=\"#\">Something else here</a></li>\n                <li role=\"separator\" class=\"divider\"></li>\n                <li><a href=\"#\">Separated link</a></li>\n              </ul>\n            </div><!-- /btn-group -->\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-primary\">Primary</button>\n              <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span class=\"caret\"></span>\n                <span class=\"sr-only\">Toggle Dropdown</span>\n              </button>\n              <ul class=\"dropdown-menu\">\n                <li><a href=\"#\">Action</a></li>\n                <li><a href=\"#\">Another action</a></li>\n                <li><a href=\"#\">Something else here</a></li>\n                <li role=\"separator\" class=\"divider\"></li>\n                <li><a href=\"#\">Separated link</a></li>\n              </ul>\n            </div><!-- /btn-group -->\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-success\">Success</button>\n              <button type=\"button\" class=\"btn btn-success dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span class=\"caret\"></span>\n                <span class=\"sr-only\">Toggle Dropdown</span>\n              </button>\n              <ul class=\"dropdown-menu\">\n                <li><a href=\"#\">Action</a></li>\n                <li><a href=\"#\">Another action</a></li>\n                <li><a href=\"#\">Something else here</a></li>\n                <li role=\"separator\" class=\"divider\"></li>\n                <li><a href=\"#\">Separated link</a></li>\n              </ul>\n            </div><!-- /btn-group -->\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-info\">Info</button>\n              <button type=\"button\" class=\"btn btn-info dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span class=\"caret\"></span>\n                <span class=\"sr-only\">Toggle Dropdown</span>\n              </button>\n              <ul class=\"dropdown-menu\">\n                <li><a href=\"#\">Action</a></li>\n                <li><a href=\"#\">Another action</a></li>\n                <li><a href=\"#\">Something else here</a></li>\n                <li role=\"separator\" class=\"divider\"></li>\n                <li><a href=\"#\">Separated link</a></li>\n              </ul>\n            </div><!-- /btn-group -->\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-warning\">Warning</button>\n              <button type=\"button\" class=\"btn btn-warning dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span class=\"caret\"></span>\n                <span class=\"sr-only\">Toggle Dropdown</span>\n              </button>\n              <ul class=\"dropdown-menu\">\n                <li><a href=\"#\">Action</a></li>\n                <li><a href=\"#\">Another action</a></li>\n                <li><a href=\"#\">Something else here</a></li>\n                <li role=\"separator\" class=\"divider\"></li>\n                <li><a href=\"#\">Separated link</a></li>\n              </ul>\n            </div><!-- /btn-group -->\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-danger\">Danger</button>\n              <button type=\"button\" class=\"btn btn-danger dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span class=\"caret\"></span>\n                <span class=\"sr-only\">Toggle Dropdown</span>\n              </button>\n              <ul class=\"dropdown-menu\">\n                <li><a href=\"#\">Action</a></li>\n                <li><a href=\"#\">Another action</a></li>\n                <li><a href=\"#\">Something else here</a></li>\n                <li role=\"separator\" class=\"divider\"></li>\n                <li><a href=\"#\">Separated link</a></li>\n              </ul>\n            </div><!-- /btn-group -->\n          </div>\n          <div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"c\">&lt;!-- Split button --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"btn-group\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-danger\"</span><span class=\"nt\">&gt;</span>Action<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-danger dropdown-toggle\"</span> <span class=\"na\">data-toggle=</span><span class=\"s\">\"dropdown\"</span> <span class=\"na\">aria-haspopup=</span><span class=\"s\">\"true\"</span> <span class=\"na\">aria-expanded=</span><span class=\"s\">\"false\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"caret\"</span><span class=\"nt\">&gt;&lt;/span&gt;</span>\n    <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"sr-only\"</span><span class=\"nt\">&gt;</span>Toggle Dropdown<span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"dropdown-menu\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span><span class=\"nt\">&gt;</span>Action<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span><span class=\"nt\">&gt;</span>Another action<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span><span class=\"nt\">&gt;</span>Something else here<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li</span> <span class=\"na\">role=</span><span class=\"s\">\"separator\"</span> <span class=\"na\">class=</span><span class=\"s\">\"divider\"</span><span class=\"nt\">&gt;&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span><span class=\"nt\">&gt;</span>Separated link<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span></code></pre></div>\n\n        </div>\n\n        <div class=\"bs-docs-section\">\n          <h1 id=\"btn-groups\" class=\"page-header\"><a class=\"anchorjs-link \" href=\"#btn-groups\" aria-label=\"Anchor link for: btn groups\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>按钮组</h1>\n          <p class=\"lead\">通过按钮组容器把一组按钮放在同一行里。</p>\n          <div class=\"bs-example\" data-example-id=\"simple-button-group\">\n            <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n              <button type=\"button\" class=\"btn btn-default\">Left</button>\n              <button type=\"button\" class=\"btn btn-default\">Middle</button>\n              <button type=\"button\" class=\"btn btn-default\">Right</button>\n            </div>\n            <div class=\"btn-group btn-group-success\" role=\"group\" aria-label=\"Basic example\">\n              <button type=\"button\" class=\"btn btn-default\">Left</button>\n              <button type=\"button\" class=\"btn btn-default active\">Middle</button>\n              <button type=\"button\" class=\"btn btn-default\">Right</button>\n            </div>\n          </div>\n          <div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"btn-group\"</span> <span class=\"na\">role=</span><span class=\"s\">\"group\"</span> <span class=\"na\">aria-label=</span><span class=\"s\">\"...\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-default\"</span><span class=\"nt\">&gt;</span>Left<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-default\"</span><span class=\"nt\">&gt;</span>Middle<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-default\"</span><span class=\"nt\">&gt;</span>Right<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span></code></pre></div>\n\n        </div>\n\n        <div class=\"bs-docs-section\">\n          <h1 id=\"forms\" class=\"page-header\"><a class=\"anchorjs-link \" href=\"#forms\" aria-label=\"Anchor link for: forms\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>表单</h1>\n          <h2 id=\"forms-example\"><a class=\"anchorjs-link \" href=\"#forms-example\" aria-label=\"Anchor link for: forms example\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>基本实例</h2>\n          <p>单独的表单控件会被自动赋予一些全局样式。所有设置了 <code>.form-control</code> 类的 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 元素都将被默认设置宽度属性为 <code>width: 100%;</code>。 将 <code>label</code> 元素和前面提到的控件包裹在 <code>.form-group</code> 中可以获得最好的排列。</p>\n\n          <div class=\"bs-example\">\n            <div class=\"page-header\"><h4>基本设置</h4></div>\n            <div class=\"form-horizontal\">\n                <div class=\"form-group\">\n                    <label for=\"inputEmail3\" class=\"col-sm-2 control-label\">文本框</label>\n                    <div class=\"col-sm-8\">\n                      <input type=\"email\" class=\"form-control\" id=\"inputEmail3\" placeholder=\"\">\n                    </div>\n                    <div class=\"col-sm-2\">\n\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"inputSelect\" class=\"col-sm-2 control-label\">下拉框</label>\n                    <div class=\"col-sm-8\">\n                      <select class=\"form-control c-select\" id=\"inputSelect\">\n                        <option value=\"0\">全部区域</option>\n                        <option value=\"1\">区域一</option>\n                        <option value=\"2\">区域二</option>\n                      </select>\n                    </div>\n                    <div class=\"col-sm-2\">\n\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"inputEmail4\" class=\"col-sm-2 control-label\">单选/复选框</label>\n                    <div class=\"col-sm-8\">\n                        <label class=\"mc-radio\">\n                            <input type=\"radio\" name=\"radio1\">\n                            <span></span>\n                            radio\n                        </label>\n                        <label class=\"mc-radio\">\n                            <input type=\"radio\" name=\"radio1\" checked>\n                            <span></span>\n                            radio\n                        </label>\n                        <label class=\"mc-radio\">\n                            <input type=\"checkbox\" name=\"checkbox1\">\n                            <i class=\"icon-check\"></i>\n                            checkbox\n                        </label>\n                        <label class=\"mc-radio\">\n                            <input type=\"checkbox\" name=\"checkbox1\" checked>\n                            <i class=\"icon-check\"></i>\n                            checkbox\n                        </label>\n\n                    </div>\n                    <div class=\"col-sm-2\">\n\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"inputSelect\" class=\"col-sm-2 control-label\">邮箱</label>\n                    <div class=\"col-sm-8\">\n                      <p class=\"form-control-static\">123456789@qq.com</p>\n                    </div>\n                    <div class=\"col-sm-2 text-right\">\n                        <a href=\"\" class=\"btn btn-link\">编辑 <i class=\"icon-arrow-down small\"></i></a>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"inputSelect\" class=\"col-sm-2 control-label\">下拉框</label>\n                    <div class=\"col-sm-8\">\n\n                    </div>\n                    <div class=\"col-sm-2 text-right\">\n                        <a href=\"\" class=\"btn btn-link\">收起 <i class=\"icon-arrow-up small\"></i></a>\n                    </div>\n                    <div class=\"clearfix\"></div>\n                    <div class=\"cols-edit\">\n                        <div class=\"col-sm-8 col-sm-offset-2 col-sm-offset-2\">\n                          <select class=\"form-control c-select\" id=\"inputSelect\">\n                            <option value=\"0\">全部区域</option>\n                            <option value=\"1\">区域一</option>\n                            <option value=\"2\">区域二</option>\n                          </select>\n                        </div>\n                        <div class=\"col-sm-8 col-sm-offset-2 col-sm-offset-2\">\n                          <button class=\"btn btn-success\">保存</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n          </div>\n\n            <p>带样式的表单：</p>\n            <div class=\"bs-example\">\n              <div class=\"page-header\"><h4>基本设置</h4></div>\n              <div class=\"form-horizontal\">\n                  <div class=\"form-group has-success\">\n                      <label for=\"inputEmail3\" class=\"col-sm-2 control-label text-left\">文本框<span class=\"text-tip\">*</span></label>\n                      <div class=\"col-sm-8\">\n                        <input type=\"email\" class=\"form-control\" id=\"inputEmail3\" placeholder=\"\">\n                      </div>\n                      <div class=\"col-sm-2\">\n\n                      </div>\n                  </div>\n                  <div class=\"form-group has-error\">\n                      <label for=\"inputSelect\" class=\"col-sm-2 control-label text-left\">下拉框</label>\n                      <div class=\"col-sm-8\">\n                        <select class=\"form-control c-select\" id=\"inputSelect\">\n                          <option value=\"0\">全部区域</option>\n                          <option value=\"1\">区域一</option>\n                          <option value=\"2\">区域二</option>\n                        </select>\n                      </div>\n                      <div class=\"col-sm-2\">\n\n                      </div>\n                  </div>\n                  <div class=\"form-group has-error\">\n                      <label for=\"inputEmail4\" class=\"col-sm-2 control-label text-left\">单选/复选框</label>\n                      <div class=\"col-sm-8\">\n                          <label class=\"mc-radio\">\n                              <input type=\"radio\" name=\"s-radio1\">\n                              <span></span>\n                              radio\n                          </label>\n                          <label class=\"mc-radio\">\n                              <input type=\"radio\" name=\"s-radio1\" checked>\n                              <span></span>\n                              radio\n                          </label>\n                          <label class=\"mc-radio\">\n                              <input type=\"checkbox\" name=\"s-checkbox1\">\n                              <i class=\"icon-check\"></i>\n                              checkbox\n                          </label>\n                          <label class=\"mc-radio\">\n                              <input type=\"checkbox\" name=\"s-checkbox1\" checked>\n                              <i class=\"icon-check\"></i>\n                              checkbox\n                          </label>\n\n                      </div>\n                      <div class=\"col-sm-2\">\n\n                      </div>\n                  </div>\n                  <div class=\"form-group\">\n                      <label for=\"inputSelect\" class=\"col-sm-2 control-label text-left\">邮箱</label>\n                      <div class=\"col-sm-8\">\n                        <p class=\"form-control-static\">123456789@qq.com</p>\n                      </div>\n                      <div class=\"col-sm-2 text-right\">\n                          <a href=\"\" class=\"btn btn-link\">编辑 <i class=\"icon-arrow-down small\"></i></a>\n                      </div>\n                  </div>\n                  <div class=\"form-group has-error\">\n                      <label for=\"inputSelect\" class=\"col-sm-2 control-label text-left\">下拉框</label>\n                      <div class=\"col-sm-8\">\n\n                      </div>\n                      <div class=\"col-sm-2 text-right\">\n                          <a href=\"\" class=\"btn btn-link\">收起 <i class=\"icon-arrow-up small\"></i></a>\n                      </div>\n                      <div class=\"clearfix\"></div>\n                      <div class=\"cols-edit\">\n                          <div class=\"col-sm-8 col-sm-offset-2 col-sm-offset-2\">\n                            <select class=\"form-control c-select\" id=\"inputSelect\">\n                              <option value=\"0\">全部区域</option>\n                              <option value=\"1\">区域一</option>\n                              <option value=\"2\">区域二</option>\n                            </select>\n                          </div>\n                          <div class=\"col-sm-8 col-sm-offset-2 col-sm-offset-2\">\n                            <button class=\"btn btn-success\">保存</button>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n            </div>\n\n            <p>angular验证表格：</p>\n            <div class=\"bs-example\">\n              <div class=\"page-header\"><h4>基本设置</h4></div>\n              <div class=\"form-horizontal\">\n                  <div class=\"form-group\">\n                      <label for=\"inputEmail3\" class=\"col-sm-2 control-label text-left\">文本框<span class=\"text-tip\">*</span></label>\n                      <div class=\"col-sm-8\">\n                        <input type=\"email\" class=\"form-control ng-valid\" id=\"inputEmail3\" placeholder=\"\">\n                      </div>\n                      <div class=\"col-sm-2\">\n\n                      </div>\n                  </div>\n                  <div class=\"form-group\">\n                      <label for=\"inputSelect\" class=\"col-sm-2 control-label text-left\">下拉框</label>\n                      <div class=\"col-sm-8\">\n                        <select class=\"form-control c-select ng-invalid\" id=\"inputSelect\">\n                          <option value=\"0\">全部区域</option>\n                          <option value=\"1\">区域一</option>\n                          <option value=\"2\">区域二</option>\n                        </select>\n                        <span><p class=\"validation-invalid\">格式不对！</p></span>\n                      </div>\n                      <div class=\"col-sm-2\">\n\n                      </div>\n                  </div>\n                  <div class=\"form-group\">\n                      <label for=\"inputEmail4\" class=\"col-sm-2 control-label text-left\">单选/复选框</label>\n                      <div class=\"col-sm-8\">\n                          <label class=\"mc-radio ng-valid\">\n                              <input type=\"radio\" name=\"radio1\">\n                              <span></span>\n                              radio\n                          </label>\n                          <label class=\"mc-radio ng-valid\">\n                              <input type=\"radio\" name=\"radio1\" checked >\n                              <span></span>\n                              radio\n                          </label>\n                          <label class=\"mc-radio ng-valid\">\n                              <input type=\"checkbox\" name=\"checkbox1\">\n                              <i class=\"icon-check\"></i>\n                              checkbox\n                          </label>\n                          <label class=\"mc-radio ng-valid\">\n                              <input type=\"checkbox\" name=\"checkbox1\" checked>\n                              <i class=\"icon-check\"></i>\n                              checkbox\n                          </label>\n\n                      </div>\n                      <div class=\"col-sm-2\">\n\n                      </div>\n                  </div>\n                  <div class=\"form-group\">\n                      <label for=\"inputEmail4\" class=\"col-sm-2 control-label text-left\">单选/复选框</label>\n                      <div class=\"col-sm-8\">\n                          <label class=\"mc-radio ng-invalid\">\n                              <input type=\"radio\" name=\"a-radio1\">\n                              <span></span>\n                              radio\n                          </label>\n                          <label class=\"mc-radio ng-invalid\">\n                              <input type=\"radio\" name=\"a-radio1\" checked >\n                              <span></span>\n                              radio\n                          </label>\n                          <label class=\"mc-radio ng-invalid\">\n                              <input type=\"checkbox\" name=\"a-checkbox1\">\n                              <i class=\"icon-check\"></i>\n                              checkbox\n                          </label>\n                          <label class=\"mc-radio ng-invalid\">\n                              <input type=\"checkbox\" name=\"a-checkbox1\" checked>\n                              <i class=\"icon-check\"></i>\n                              checkbox\n                          </label>\n\n                      </div>\n                      <div class=\"col-sm-2\">\n\n                      </div>\n                  </div>\n                  <div class=\"form-group\">\n                      <label for=\"inputSelect\" class=\"col-sm-2 control-label text-left\">邮箱</label>\n                      <div class=\"col-sm-8\">\n                        <p class=\"form-control-static\">123456789@qq.com</p>\n                      </div>\n                      <div class=\"col-sm-2 text-right\">\n                          <a href=\"\" class=\"btn btn-link\">编辑 <i class=\"icon-arrow-down small\"></i></a>\n                      </div>\n                  </div>\n                  <div class=\"form-group\">\n                      <label for=\"inputSelect\" class=\"col-sm-2 control-label text-left\">下拉框</label>\n                      <div class=\"col-sm-8\">\n\n                      </div>\n                      <div class=\"col-sm-2 text-right\">\n                          <a href=\"\" class=\"btn btn-link\">收起 <i class=\"icon-arrow-up small\"></i></a>\n                      </div>\n                      <div class=\"clearfix\"></div>\n                      <div class=\"cols-edit\">\n                          <div class=\"col-sm-8 col-sm-offset-2 col-sm-offset-2\">\n                            <select class=\"form-control c-select\" id=\"inputSelect\">\n                              <option value=\"0\">全部区域</option>\n                              <option value=\"1\">区域一</option>\n                              <option value=\"2\">区域二</option>\n                            </select>\n                          </div>\n                          <div class=\"col-sm-8 col-sm-offset-2 col-sm-offset-2\">\n                            <button class=\"btn btn-success\">保存</button>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n            </div>\n\n        </div>\n\n        <div class=\"bs-docs-section\">\n\n            <h1 id=\"helper-classes\" class=\"page-header\"><a class=\"anchorjs-link \" href=\"#helper-classes\" aria-label=\"Anchor link for: helper classes\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>辅助类</h1>\n            <h3 id=\"helper-classes-colors\"><a class=\"anchorjs-link \" href=\"#helper-classes-colors\" aria-label=\"Anchor link for: helper classes colors\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>情境文本颜色</h3>\n            <p>通过颜色来展示意图，Bootstrap 提供了一组工具类。这些类可以应用于链接，并且在鼠标经过时颜色可以还可以加深，就像默认的链接一样。</p>\n            <div class=\"bs-example\" data-example-id=\"contextual-colors-helpers\">\n                <p class=\"text-muted\">Fusce dapibus, tellus ac cursus commodo, tortor mauris nibh.</p>\n                <p class=\"text-primary\">Nullam id dolor id nibh ultricies vehicula ut id elit.</p>\n                <p class=\"text-success\">Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p>\n                <p class=\"text-info\">Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n                <p class=\"text-warning\">Etiam porta sem malesuada magna mollis euismod.</p>\n                <p class=\"text-danger\">Donec ullamcorper nulla non metus auctor fringilla.</p>\n                <p class=\"text-tip\">Donec ullamcorper nulla non metus auctor fringilla.</p>\n            </div>\n            <div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"text-muted\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"text-primary\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"text-success\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"text-info\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"text-warning\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"text-danger\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"text-tip\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span></code></pre></div>\n\n            <h3 id=\"helper-classes-backgrounds\"><a class=\"anchorjs-link \" href=\"#helper-classes-backgrounds\" aria-label=\"Anchor link for: helper classes backgrounds\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>情境背景色</h3>\n            <p>和情境文本颜色类一样，使用任意情境背景色类就可以设置元素的背景。链接组件在鼠标经过时颜色会加深，就像上面所讲的情境文本颜色类一样。</p>\n            <div class=\"bs-example bs-example-bg-classes\" data-example-id=\"contextual-backgrounds-helpers\">\n                <p class=\"bg-primary\">Nullam id dolor id nibh ultricies vehicula ut id elit.</p>\n                <p class=\"bg-success\">Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p>\n                <p class=\"bg-info\">Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n                <p class=\"bg-warning\">Etiam porta sem malesuada magna mollis euismod.</p>\n                <p class=\"bg-danger\">Donec ullamcorper nulla non metus auctor fringilla.</p>\n            </div>\n            <div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"bg-primary\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"bg-success\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"bg-info\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"bg-warning\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"bg-danger\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/p&gt;</span></code></pre></div>\n\n        </div>\n\n        <div class=\"bs-docs-section\">\n            <h1 id=\"tables\" class=\"page-header\"><a class=\"anchorjs-link \" href=\"#tables\" aria-label=\"Anchor link for: tables\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>表格</h1>\n            <p>为任意 <code>&lt;table&gt;</code> 标签添加 <code>.table</code> 类可以为其赋予基本的样式 — 少量的内补（padding）和水平方向的分隔线。这种方式看起来很多余！？但是我们觉得，表格元素使用的很广泛，如果我们为其赋予默认样式可能会影响例如日历和日期选择之类的插件，所以我们选择将此样式独立出来。</p>\n\n            <div class=\"bs-example\" data-example-id=\"simple-table\">\n                <table class=\"table\">\n                  <caption>Optional table caption.</caption>\n                  <thead>\n                    <tr>\n                      <th>#</th>\n                      <th>First Name</th>\n                      <th>Last Name</th>\n                      <th>Username</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <th scope=\"row\">1</th>\n                      <td>Mark</td>\n                      <td>Otto</td>\n                      <td>@mdo</td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">2</th>\n                      <td>Jacob</td>\n                      <td>Thornton</td>\n                      <td>@fat</td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">3</th>\n                      <td><input type=\"email\" class=\"form-control \" placeholder=\"\"><span><p class=\"validation-invalid\">格式不对！</p></span></td>\n                      <td>the Bird</td>\n                      <td>@twitter</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n\n                <div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;table</span> <span class=\"na\">class=</span><span class=\"s\">\"table\"</span><span class=\"nt\">&gt;</span>\n  ...\n<span class=\"nt\">&lt;/table&gt;</span></code></pre></div>\n\n        </div>\n\n        <div class=\"bs-docs-section\">\n            <h1 id=\"type\" class=\"page-header\"><a class=\"anchorjs-link \" href=\"#type\" aria-label=\"Anchor link for: type\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>排版</h1>\n            <h2 id=\"type-headings\"><a class=\"anchorjs-link \" href=\"#type-headings\" aria-label=\"Anchor link for: type headings\" data-anchorjs-icon=\"\" style=\"font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; position: absolute; margin-left: -1em; padding-right: 0.5em;\"></a>标题</h2>\n            <p>HTML 中的所有标题标签，<code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code> 均可使用。另外，还提供了 <code>.h1</code> 到 <code>.h6</code> 类，为的是给内联（inline）属性的文本赋予标题的样式。</p>\n            <div class=\"bs-example bs-example-type\" data-example-id=\"simple-headings\">\n                <table class=\"table\">\n                  <tbody>\n                    <tr>\n                      <td><h1>h1. Bootstrap heading</h1></td>\n                      <td class=\"type-info\">Semibold 36px</td>\n                    </tr>\n                    <tr>\n                      <td><h2>h2. Bootstrap heading</h2></td>\n                      <td class=\"type-info\">Semibold 30px</td>\n                    </tr>\n                    <tr>\n                      <td><h3>h3. Bootstrap heading</h3></td>\n                      <td class=\"type-info\">Semibold 24px</td>\n                    </tr>\n                    <tr>\n                      <td><h4>h4. Bootstrap heading</h4></td>\n                      <td class=\"type-info\">Semibold 18px</td>\n                    </tr>\n                    <tr>\n                      <td><h5>h5. Bootstrap heading</h5></td>\n                      <td class=\"type-info\">Semibold 16px</td>\n                    </tr>\n                    <tr>\n                      <td><h6>h6. Bootstrap heading</h6></td>\n                      <td class=\"type-info\">Semibold 14px</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            <div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;h1&gt;</span>h1. Bootstrap heading<span class=\"nt\">&lt;/h1&gt;</span>\n<span class=\"nt\">&lt;h2&gt;</span>h2. Bootstrap heading<span class=\"nt\">&lt;/h2&gt;</span>\n<span class=\"nt\">&lt;h3&gt;</span>h3. Bootstrap heading<span class=\"nt\">&lt;/h3&gt;</span>\n<span class=\"nt\">&lt;h4&gt;</span>h4. Bootstrap heading<span class=\"nt\">&lt;/h4&gt;</span>\n<span class=\"nt\">&lt;h5&gt;</span>h5. Bootstrap heading<span class=\"nt\">&lt;/h5&gt;</span>\n<span class=\"nt\">&lt;h6&gt;</span>h6. Bootstrap heading<span class=\"nt\">&lt;/h6&gt;</span></code></pre></div>\n        </div>\n\n      </div>\n      <div class=\"col-md-3\" role=\"complementary\">\n        <nav class=\"bs-docs-sidebar hidden-print hidden-xs hidden-sm affix-top\">\n          <ul class=\"nav bs-docs-sidenav\">\n\n            <li class=\"\">\n              <a href=\"#glyphicons\">Glyphicons 字体图标</a>\n              <ul class=\"nav\">\n                <li class=\"\"><a href=\"#glyphicons-glyphs\">所有可用的图标</a></li>\n                <li class=\"\"><a href=\"#glyphicons-how-to-use\">如何使用</a></li>\n                <li class=\"\"><a href=\"#glyphicons-examples\">实例</a></li>\n              </ul>\n            </li>\n            <li class=\"\">\n              <a href=\"#dropdowns\">下拉菜单</a>\n              <ul class=\"nav\">\n                <li class=\"\"><a href=\"#dropdowns-example\">实例</a></li>\n                <li class=\"\"><a href=\"#dropdowns-alignment\">对齐</a></li>\n                <li><a href=\"#dropdowns-headers\">标题</a></li>\n                <li><a href=\"#dropdowns-divider\">分割线</a></li>\n                <li class=\"\"><a href=\"#dropdowns-disabled\">禁用的菜单项</a></li>\n              </ul>\n            </li>\n            <li class=\"\">\n              <a href=\"#btn-groups\">按钮组</a>\n              <ul class=\"nav\">\n                <li class=\"\"><a href=\"#btn-groups-single\">基本实例</a></li>\n                <li><a href=\"#btn-groups-toolbar\">按钮工具栏</a></li>\n                <li><a href=\"#btn-groups-sizing\">尺寸</a></li>\n                <li><a href=\"#btn-groups-nested\">嵌套</a></li>\n                <li><a href=\"#btn-groups-vertical\">垂直排列</a></li>\n                <li class=\"\"><a href=\"#btn-groups-justified\">两端对齐排列的按钮组</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#btn-dropdowns\">按钮式下拉菜单</a>\n              <ul class=\"nav\">\n                <li><a href=\"#btn-dropdowns-single\">单按钮下拉菜单</a></li>\n                <li><a href=\"#btn-dropdowns-split\">分裂式按钮下拉菜单</a></li>\n                <li><a href=\"#btn-dropdowns-sizing\">尺寸</a></li>\n                <li><a href=\"#btn-dropdowns-dropup\">向上弹出式菜单</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#input-groups\">输入框组</a>\n              <ul class=\"nav\">\n                <li><a href=\"#input-groups-basic\">基本实例</a></li>\n                <li><a href=\"#input-groups-sizing\">尺寸</a></li>\n                <li><a href=\"#input-groups-checkboxes-radios\">作为额外元素的多选框和单选框</a></li>\n                <li><a href=\"#input-groups-buttons\">作为额外元素的按钮</a></li>\n                <li><a href=\"#input-groups-buttons-dropdowns\">作为额外元素的按钮式下拉菜单</a></li>\n                <li><a href=\"#input-groups-buttons-segmented\">作为额外元素的分裂式按钮下拉菜单</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#nav\">导航</a>\n              <ul class=\"nav\">\n                <li><a href=\"#nav-tabs\">标签页</a></li>\n                <li><a href=\"#nav-pills\">胶囊式标签页</a></li>\n                <li><a href=\"#nav-justified\">两端对齐</a></li>\n                <li><a href=\"#nav-disabled-links\">禁用的链接</a></li>\n                <li><a href=\"#nav-dropdowns\">添加下拉菜单</a></li>\n              </ul>\n            </li>\n            <li class=\"\">\n              <a href=\"#navbar\">导航条</a>\n              <ul class=\"nav\">\n                <li><a href=\"#navbar-default\">默认样式的导航条</a></li>\n                <li><a href=\"#navbar-brand-image\">品牌图标</a></li>\n                <li><a href=\"#navbar-forms\">表单</a></li>\n                <li><a href=\"#navbar-buttons\">按钮</a></li>\n                <li><a href=\"#navbar-text\">文本</a></li>\n                <li><a href=\"#navbar-links\">非导航的链接</a></li>\n                <li class=\"\"><a href=\"#navbar-component-alignment\">组件排列</a></li>\n                <li><a href=\"#navbar-fixed-top\">固定在顶部</a></li>\n                <li><a href=\"#navbar-fixed-bottom\">固定在底部</a></li>\n                <li><a href=\"#navbar-static-top\">静止在顶部</a></li>\n                <li><a href=\"#navbar-inverted\">反色的导航条</a></li>\n              </ul>\n            </li>\n            <li><a href=\"#breadcrumbs\">路径导航</a></li>\n            <li>\n              <a href=\"#pagination\">分页</a>\n              <ul class=\"nav\">\n                <li><a href=\"#pagination-default\">默认分页</a></li>\n                <li><a href=\"#pagination-pager\">翻页</a></li>\n              </ul>\n            </li>\n            <li><a href=\"#labels\">标签</a></li>\n            <li><a href=\"#badges\">徽章</a></li>\n            <li><a href=\"#jumbotron\">巨幕</a></li>\n            <li><a href=\"#page-header\">页头</a></li>\n            <li>\n              <a href=\"#thumbnails\">缩略图</a>\n              <ul class=\"nav\">\n                <li><a href=\"#thumbnails-default\">默认样式的实例</a></li>\n                <li><a href=\"#thumbnails-custom-content\">自定义内容</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#alerts\">警告框</a>\n              <ul class=\"nav\">\n                <li><a href=\"#alerts-examples\">实例</a></li>\n                <li><a href=\"#alerts-dismissible\">可关闭的警告框</a></li>\n                <li><a href=\"#alerts-links\">警告框中的链接</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#progress\">进度条</a>\n              <ul class=\"nav\">\n                <li><a href=\"#progress-basic\">基本实例</a></li>\n                <li><a href=\"#progress-label\">带有提示标签的进度条</a></li>\n                <li><a href=\"#progress-alternatives\">根据情境变化效果</a></li>\n                <li><a href=\"#progress-striped\">条纹效果</a></li>\n                <li><a href=\"#progress-animated\">动画效果</a></li>\n                <li><a href=\"#progress-stacked\">堆叠效果</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#media\">媒体对象</a>\n              <ul class=\"nav\">\n                <li><a href=\"#media-default\">默认样式</a></li>\n                <li><a href=\"#media-list\">媒体对象列表</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#list-group\">列表组</a>\n              <ul class=\"nav\">\n                <li><a href=\"#list-group-basic\">基本实例</a></li>\n                <li><a href=\"#list-group-badges\">徽章</a></li>\n                <li><a href=\"#list-group-linked\">链接</a></li>\n                <li><a href=\"#list-group-buttons\">Button items</a></li>\n                <li><a href=\"#list-group-disabled\">被禁用的条目</a></li>\n                <li><a href=\"#list-group-contextual-classes\">情境类</a></li>\n                <li><a href=\"#list-group-custom-content\">定制内容</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#panels\">面板</a>\n              <ul class=\"nav\">\n                <li><a href=\"#panels-basic\">基本实例</a></li>\n                <li><a href=\"#panels-heading\">带标题的面版</a></li>\n                <li><a href=\"#panels-footer\">带注脚的面板</a></li>\n                <li><a href=\"#panels-alternatives\">情境效果</a></li>\n                <li><a href=\"#panels-tables\">带表格的面版</a>\n                </li><li><a href=\"#panels-list-group\">带列表组的面版</a>\n              </li></ul>\n            </li>\n            <li><a href=\"#responsive-embed\">具有响应式特性的嵌入内容</a></li>\n            <li><a href=\"#wells\">Well</a></li>\n\n\n          </ul>\n          <a class=\"back-to-top\" href=\"#top\">\n            返回顶部\n          </a>\n\n          <a href=\"#\" class=\"bs-docs-theme-toggle\" role=\"button\">\n            主题预览\n          </a>\n\n        </nav>\n      </div>\n    </div>\n  </div>\n");
  $templateCache.put("modules/demo/list/template.html", "<section class=\"content-header\">\n  <div class=\"options\">\n    <div class=\"option-item option-time\">\n      <ul class=\"clearfix\">\n        <li>\n          <div class=\"input-group search-box\">\n            <input ng-model=\"vm.filters.keyword\" type=\"text\" placeholder=\"请输查询\" class=\"form-control\"\n                    code=\"13\" key-event=\"vm.reSearch();\">\n            <span class=\"input-group-btn\">\n              <button ng-click=\"vm.reSearch()\" class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n            </span>\n          </div>\n        </li>\n      </ul>\n    </div>\n    <div class=\"option-item large\">\n      <span class=\"item-title text-right\">性别：</span>\n      <ul class=\"clearfix\">\n            <li>\n                <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.gender, \'btn-toggle\': !vm.filters.gender, \'active\': !vm.filters.gender}\" ng-click=\"vm.switch(\'gender\')\">\n                    全部\n                </a>\n            </li>\n            <li ng-repeat=\"item in vm.genderList\">\n                <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.gender !== item.value, \'btn-toggle\': vm.filters.gender == item.value, \'active\': vm.filters.gender == item.value}\" ng-click=\"vm.switch(\'gender\', item.value)\">\n                    {{ item.name }}\n                </a>\n            </li>\n        </ul>\n    </div>\n    \n    <div class=\"option-item large\">\n        <span class=\"item-title\">时间选择：</span>\n           \n        <div class=\"item-content\">\n             <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': true, \'btn-toggle active\': !vm.filters.start_date && !vm.filters.end_date}\" ng-click=\"vm.showAllTime()\">\n                    全部\n            </a>\n            <mc-datepicker id=\"startDatePicker\" start-date=\"vm.start_date\" max-date=\"vm.startTimeMaxLimit\" time-source=\"\" ctrl-alias=\"vm\" min-view=\"\'minutes\'\" change-by=\"close\"></mc-datepicker> --\n            <mc-datepicker id=\"endDatePicker\" start-date=\"vm.end_date\" min-date=\"vm.endTimeMinLimit\" max-date=\"vm.endTimeMaxLimit\" time-source=\"\" ctrl-alias=\"vm\" min-view=\"\'minutes\'\" change-time=\"vm.changeTime(\'end\')\" change-by=\"close\"></mc-datepicker>\n        </div>\n    </div>\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-1 text-center\">姓名</th>\n        <th class=\"col-m-1 text-center\">性别</th>\n        <th class=\"col-m-1 text-center\">年龄</th>\n        <th class=\"col-m-2 text-center\">备注</th>\n        <th class=\"col-m-1 text-center\">操作</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>{{item.name}}</td>\n        <td>{{item.gender}}</td>\n        <td>{{item.age}}</td>\n        <td>{{item.note}}</td>\n        <td><a href=\"javascript:void(0)\" ng-click=\"vm.edit(item)\">编辑</a></td>\n      </tr>\n    </table>\n  </div>\n\n  <mc-pagination total-items=\"vm.pagination.count\" items-per-page=\"vm.pagination.pageSize\" current-page=\"vm.pagination.page\" page-change=\"vm.pageChanged()\"></mc-pagination>\n\n</section>\n");
  $templateCache.put("modules/enterprise/detail/index.html", "<section class=\"content-header\">\n  <a href=\"javascript:void(0)\" class=\"btn btn-default pull-right\" ng-click=\"$root.back();\">返回</a>\n  <h4 class=\"title\">{{vm.info.name}}</h4>\n</section>\n\n<section class=\"content body-content\" block-ui=\"main\">\n\n  <div class=\"page-header\">\n      <h4>工商信息</h4>\n  </div>\n\n  <div class=\"item-content\">\n    <div class=\"panel\">\n      <table class=\"table table-striped\">\n        <tr>\n          <th class=\"col-sm-1\">企业名称：</th>\n          <td class=\"col-sm-3\">{{vm.info.name}}</td>\n          <th class=\"col-sm-1\">社会信用代码：</th>\n          <td class=\"col-sm-3\">{{vm.info.credit_no}}</td>\n        </tr>\n        <tr>\n          <th class=\"col-sm-1\">工商注册号：</th>\n          <td class=\"col-sm-3\">{{vm.info.reg_no}}</td>\n          <th class=\"col-sm-1\">组织机构代码</th>\n          <td class=\"col-sm-3\">{{vm.info.org_no}}</td>\n        </tr>\n        <tr>\n          <th class=\"col-sm-1\">法定代表人：</th>\n          <td class=\"col-sm-3\">{{vm.info.oper_name}}</td>\n          <th class=\"col-sm-1\">成立时间：</th>\n          <td class=\"col-sm-3\">{{vm.info.start_date}}</td>\n        </tr>\n        <tr>\n          <th class=\"col-sm-1\">企业类型：</th>\n          <td class=\"col-sm-3\">{{vm.info.econ_kind}}</td>\n          <th class=\"col-sm-1\">经营状态：</th>\n          <td class=\"col-sm-3\">{{vm.info.status}}</td>\n        </tr>\n        <tr>\n          <th>注册资本：</th>\n          <td colspan=\"3\">{{vm.info.regist_capi}}</td>\n        </tr>\n        <tr>\n          <th>注册地址：</th>\n          <td colspan=\"3\">{{vm.info.address}}</td>\n        </tr>\n        <tr>\n          <th>营业期限：</th>\n          <td colspan=\"3\">自{{vm.info.term_start}}至{{vm.info.term_end}}止</td>\n        </tr>\n        <tr>\n          <th>营业范围：</th>\n          <td colspan=\"3\">{{vm.info.scope}}</td>\n        </tr>\n        <tr>\n          <th class=\"col-sm-1\">登记机关：</th>\n          <td class=\"col-sm-3\">{{vm.info.belong_org}}</td>\n          <th class=\"col-sm-1\">发照日期：</th>\n          <td class=\"col-sm-3\">{{vm.info.check_date}}</td>\n        </tr>\n      </table>\n    </div>\n  </div>\n\n</section>\n\n<section class=\"content body-content\" block-ui=\"main\">\n\n  <div class=\"page-header\">\n      <h4>管理团队</h4>\n  </div>\n\n  <div class=\"item-content\">\n    <div class=\"panel\">\n      <table class=\"table table-striped text-center\">\n        <tr>\n          <th class=\"col-sm-1 text-center\">序号</th>\n          <th class=\"col-sm-4 text-center\">姓名</th>\n          <th class=\"col-sm-7 text-center\">职位</th>\n        </tr>\n        <tr ng-repeat=\"item in vm.info.employees\">\n          <td>{{$index+1}}</td>\n          <td>{{item.name}}</td>\n          <td>{{item.job_title}}</td>\n        </tr>\n      </table>\n    </div>\n  </div>\n\n</section>\n\n<section class=\"content body-content\" block-ui=\"main\">\n  <div class=\"page-header\">\n      <h4>注册信息变更</h4>\n  </div>\n\n  <div class=\"item-content\">\n    <div class=\"panel\">\n      <table class=\"table table-striped\">\n        <tr>\n          <th class=\"col-sm-1\">变更日期</th>\n          <th class=\"col-sm-1\">变更项</th>\n          <th class=\"col-sm-4\">变更前</th>\n          <th class=\"col-sm-4\">变更后</th>\n        </tr>\n        <tr ng-repeat=\"item in vm.info.changerecords\">\n          <td>{{item.change_date}}</td>\n          <td>{{item.change_item}}</td>\n          <td>{{item.before_content}}</td>\n          <td>{{item.after_content}}</td>\n        </tr>\n      </table>\n    </div>\n  </div>\n\n</section>\n\n<section class=\"content body-content\" block-ui=\"main\">\n  <div class=\"page-header\">\n      <h4>股东及出资信息</h4>\n  </div>\n\n  <div class=\"item-content\">\n    <div class=\"panel\">\n      <table class=\"table table-striped text-center\">\n        <tr>\n          <th class=\"col-sm-1 text-center\">序号</th>\n          <th class=\"col-sm-4 text-center\">股东</th>\n          <th class=\"col-sm-4 text-center\"></th>\n        </tr>\n        <tr ng-repeat=\"item in vm.info.partners\">\n          <td>{{$index+1}}</td>\n          <td>{{item.name}}</td>\n          <td>{{item.stock_type}}</td>\n        </tr>\n      </table>\n    </div>\n  </div>\n\n</section>\n");
  $templateCache.put("modules/enterprise/list/index.html", "<section class=\"content-header\">\n  <button type=\"button\" class=\"btn btn-success pull-right m-l-sm\" style=\"position: relative; z-index: 2;\"\n          ng-click=\"vm.add()\"><i class=\"icon-Plus\"></i> 添加\n  </button>\n  <div class=\"options\">\n    <div class=\"option-item option-time\">\n      <ul class=\"clearfix\">\n        <li>\n          <div class=\"input-group search-box\">\n            <input ng-model=\"vm.filters.name\" type=\"text\" placeholder=\"请输查询\" class=\"form-control\"\n                    code=\"13\" key-event=\"vm.reSearch();\">\n            <span class=\"input-group-btn\">\n              <button ng-click=\"vm.reSearch()\" class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n            </span>\n          </div>\n        </li>\n      </ul>\n    </div>\n    <div class=\"option-item large\" ng-if=\"vm.access[\'enterprise.filter.role_a_state\']\">\n      <span class=\"item-title text-right\">主理状态：</span>\n      <ul class=\"clearfix\">\n          <!-- <li>\n              <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.gender, \'btn-toggle\': !vm.filters.gender, \'active\': !vm.filters.gender}\" ng-click=\"vm.switch(\'gender\')\">\n                  全部\n              </a>\n          </li> -->\n          <li ng-repeat=\"item in vm.roleMainStatus\">\n              <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.role_a_disable != item.value, \'btn-toggle\': vm.filters.role_a_disable == item.value, \'active\': vm.filters.role_a_disable == item.value}\" ng-click=\"vm.switch(\'role_a_disable\', item.value)\">\n                  {{ item.label }}\n              </a>\n          </li>\n      </ul>\n    </div>\n    <div class=\"option-item large\">\n      <span class=\"item-title text-right\">企业状态：</span>\n      <ul class=\"clearfix\">\n          <li>\n              <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.state !== undefined, \'btn-toggle\': vm.filters.state === undefined, \'active\': vm.filters.state === undefined}\" ng-click=\"vm.switch(\'state\')\">\n                  全部\n              </a>\n          </li>\n          <li ng-repeat=\"item in vm.enterpriseStateList\">\n              <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.state != item.value, \'btn-toggle\': vm.filters.state == item.value, \'active\': vm.filters.state == item.value}\" ng-click=\"vm.switch(\'state\', item.value)\">\n                  {{ item.label }}\n              </a>\n          </li>\n      </ul>\n    </div>\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\" ng-if=\"vm.list.length > 0\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-1 text-center\">企业名称</th>\n        <th class=\"col-m-1 text-center\">企业地址</th>\n        <th class=\"col-m-1 text-center\">所属机构</th>\n        <th class=\"col-m-1 text-center\" ng-if=\"vm.access[\'enterprise.list.role_show\']\">主理</th>\n        <th class=\"col-m-2 text-center\" ng-if=\"vm.access[\'enterprise.list.role_show\']\">协理</th>\n        <th class=\"col-m-1 text-center\">企业状态</th>\n        <th class=\"col-m-1 text-center\">分配状态</th>\n        <th class=\"col-m-1 text-center\">操作</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>{{item.name}}</td>\n        <td>{{item.address}}</td>\n        <td>{{item.bank.name}}</td>\n        <td ng-if=\"vm.access[\'enterprise.list.role_show\']\">{{item.role_a.true_name}}</td>\n        <td ng-if=\"vm.access[\'enterprise.list.role_show\']\">{{item.role_b.true_name}}</td>\n        <td>{{item.state | filterValue: vm.enterpriseStateList}}</td>\n        <td>{{item.distribute_state | filterDistributeState}}</td>\n        <td>\n        <!-- ng-if=\"vm.profile.role == \'ROLE_BRANCH_PRESIDENT\'\" -->\n         <!-- ng-if=\"vm.profile.role == \'ROLE_END_PRESIDENT\'\" -->\n          <a href=\"javascript:void(0)\" ng-click=\"vm.assignBranch(item)\" ng-if=\"vm.access[\'enterprise.assign.branch\']\">分配机构</a>\n          <a href=\"javascript:void(0)\" ng-click=\"vm.assign(item)\" ng-if=\"vm.access[\'enterprise.assign.role\']\">分配客户经理</a>\n          <a ui-sref=\"enterprise.detail({id: item.id})\">查看详情</a>\n          <!-- <a href=\"javascript:void(0)\" ng-click=\"vm.del(item)\">删除</a>\n          <a href=\"javascript:void(0)\" ng-click=\"vm.frost(item)\">冻结</a> -->\n        </td>\n      </tr>\n    </table>\n  </div>\n\n  <mc-pagination total-items=\"vm.pagination.count\" items-per-page=\"vm.pagination.pageSize\" current-page=\"vm.pagination.page\" page-change=\"vm.pageChanged()\"></mc-pagination>\n\n</section>\n");
  $templateCache.put("modules/filter/blacklist/template.html", "<section class=\"content-header\">\n  <button type=\"button\" class=\"btn btn-success pull-right m-l-sm\" style=\"position: relative; z-index: 2;\"\n          ng-click=\"vm.add()\"><i class=\"icon-Plus\"></i> 添加\n  </button>\n\n  <div class=\"options\">\n    <div class=\"option-item option-time\">\n      <ul class=\"clearfix\">\n        <li>\n          <div class=\"input-group search-box\">\n            <input ng-model=\"vm.filters.name\" type=\"text\" placeholder=\"请输公司名查询\" class=\"form-control\"\n                    code=\"13\" key-event=\"vm.reSearch();\">\n            <span class=\"input-group-btn\">\n              <button ng-click=\"vm.reSearch()\" class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n            </span>\n          </div>\n        </li>\n      </ul>\n    </div>\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\" ng-if=\"vm.list.length > 0\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-3 text-center\">公司名称</th>\n        <th class=\"col-m-3 text-center\">信息来源</th>\n        <th class=\"col-m-4 text-center\">备注</th>\n        <th class=\"col-m-2 text-center\">操作</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>{{item.name}}</td>\n        <td>{{item.source}}</td>\n        <td>{{item.note}}</td>\n        <!-- <td>\n          <span class=\"text-success\" ng-if=\"item.state==1\">正常</span>\n          <span class=\"text-danger\" ng-if=\"item.state==3\">已删除</span>\n        </td> -->\n        <td>\n          <a href=\"javascript:void(0)\" class=\"text-danger\" ng-click=\"vm.del(item)\">删除</a>\n        </td>\n      </tr>\n    </table>\n  </div>\n\n  <mc-pagination total-items=\"vm.pagination.count\" items-per-page=\"vm.pagination.pageSize\" current-page=\"vm.pagination.page\" page-change=\"vm.pageChanged()\"></mc-pagination>\n\n</section>\n\n");
  $templateCache.put("modules/filter/condition/index.html", "<section class=\"content-header clearfix\">\n  <h4 class=\"title\">\n    设置准入条件\n  </h4>\n  <!-- <a href=\"javascript:void(0)\" class=\"btn btn-default pull-right\" ng-click=\"$root.back();\">返回</a> -->\n</section>\n<section class=\"content body-content block-ui block-ui-message-custom message-detail p-m\" block-ui=\"main\">\n	<form class=\"form-horizontal\" name=\"vm.Form\">\n    <!-- <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-1 control-label\">标题：</label>\n      <div class=\"col-sm-5\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.title\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n	    <div class=\"clearfix\">\n	      <label for=\"noteInput\" class=\"col-sm-1 control-label\">内容：</label>\n      </div>\n    	<div class=\"col-sm-6\">\n				<mdeditor default-text=\"vm.defaultContent\" text=\"vm.inputInfo.content\"></mdeditor>\n				<input type=\"hidden\" ng-model=\"vm.inputInfo.content\" validator=\"required\" />\n			</div>\n			<div class=\"col-sm-6\">\n				<h5>内容预览</h5>\n				<p ng-bind-html=\"vm.html\" style=\"background: #fff; height: 306px; overflow: auto; border: 1px solid #ddd; padding: 5px;\"></p>\n			</div>\n    </div> -->\n    <div class=\"panel text-center\">\n      \n      <div class=\"form-group clearfix\">\n        <div class=\"col-sm-1 text-center\">分组号</div>\n        <div class=\"col-sm-11\">\n          <div class=\"col-sm-4\">项目</div>\n          <div class=\"col-sm-1\">类型</div>\n          <div class=\"col-sm-1\">条件</div>\n          <div class=\"col-sm-4\">值</div>\n          <div class=\"col-sm-2\">操作</div>\n        </div>\n      </div>\n      <div class=\"form-group clearfix\" ng-repeat=\"group in vm.list\">\n        <div class=\"col-sm-1\">{{$index + 1}}</div>\n        <div class=\"col-sm-11\">\n          <div class=\"form-group clearfix\" ng-repeat=\"item in group.list\">\n            <div class=\"col-sm-4\"><input type=\"text\" class=\"form-control\" ng-model=\"item.title\" placeholder=\"请输入名称\"\n            validator=\"required\"></div>\n            <div class=\"col-sm-1\">\n              <select class=\"form-control c-select\" ng-model=\"item.type\" ng-options=\"c.value as c.name for c in vm.typeList\" validator=\"required\">\n              </select>\n            </div>\n            <div class=\"col-sm-1\">\n              <select class=\"form-control c-select\" ng-model=\"item.condition\" ng-options=\"c.value as c.name for c in vm.conditionList[item.type]\" validator=\"required\">\n              </select>\n            </div>\n            <div class=\"col-sm-4\"><input type=\"text\" class=\"form-control\" ng-model=\"item.value\" placeholder=\"请输入值\"\n            validator=\"notNull\"></div>\n            <div class=\"col-sm-2\">\n              <a href=\"javascript:void(0);\" class=\"text-danger\" ng-click=\"vm.delItem(group, $index)\">删除</a>\n            </div>\n          </div>\n          <div class=\"form-group clearfix\">\n              <label class=\"control-label pull-left\">分组条件关系设置：</label>\n              <div class=\"col-sm-3\">\n                <select class=\"form-control c-select\" ng-model=\"group.condition\" ng-options=\"c.value as c.name for c in vm.groupCondition\" validator=\"required\">\n                </select>\n              </div>\n          </div>\n          <div class=\"m-t-md m-b-md m-l-xl text-left\">\n            <button class=\"btn btn-sm btn-default\" ng-click=\"vm.addItem(group)\">组内添加</button>\n            <button class=\"btn btn-sm btn-danger\" ng-click=\"vm.delGroup($index)\">删除组</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"m-l-xl m-t-sm text-left\">\n      <button class=\"btn btn-default\" ng-click=\"vm.addGroup();\">添加组</button>\n    </div>\n    \n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(vm.Form)\"> 保存</button>\n  </div>\n</section>");
  $templateCache.put("modules/information/list/index.html", "<section class=\"content-header\">\n  <div class=\"options\">\n    <div class=\"option-item option-time\">\n      <ul class=\"clearfix\">\n        <li>\n          <div class=\"input-group search-box\">\n            <input ng-model=\"vm.filters.keyword\" type=\"text\" placeholder=\"请输查询\" class=\"form-control\"\n                    code=\"13\" key-event=\"vm.reSearch();\">\n            <span class=\"input-group-btn\">\n              <button ng-click=\"vm.reSearch()\" class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n            </span>\n          </div>\n        </li>\n      </ul>\n    </div>\n    <!-- <div class=\"option-item large\">\n      <span class=\"item-title text-right\">性别：</span>\n      <ul class=\"clearfix\">\n            <li>\n                <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.gender, \'btn-toggle\': !vm.filters.gender, \'active\': !vm.filters.gender}\" ng-click=\"vm.switch(\'gender\')\">\n                    全部\n                </a>\n            </li>\n            <li ng-repeat=\"item in vm.genderList\">\n                <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.gender !== item.value, \'btn-toggle\': vm.filters.gender == item.value, \'active\': vm.filters.gender == item.value}\" ng-click=\"vm.switch(\'gender\', item.value)\">\n                    {{ item.name }}\n                </a>\n            </li>\n        </ul>\n    </div> -->\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-1 text-center\">企业名称</th>\n        <th class=\"col-m-1 text-center\">企业地址</th>\n        <th class=\"col-m-1 text-center\">支行</th>\n        <th class=\"col-m-1 text-center\">主理</th>\n        <th class=\"col-m-2 text-center\">协理</th>\n        <th class=\"col-m-1 text-center\">操作</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>{{item.company}}</td>\n        <td>{{item.company_address}}</td>\n        <td>{{item.company_address}}</td>\n        <td>{{item.manage_a.name}}<!-- <button class=\"btn btn-info m-l-sm\" ng-click=\"vm.changeManage(\'manage_a\', item)\">{{item.manage_a && item.manage_a.userid? \'变更\': \'分配\'}}</button> --></td>\n        <td>{{item.manage_b.name}}<!-- <button class=\"btn btn-info m-l-sm\" ng-click=\"vm.changeManage(\'manage_b\', item)\">{{item.manage_b && item.manage_b.userid? \'变更\': \'分配\'}}</button> --></td>\n        <td>\n          <a href=\"javascript:void(0)\" ng-click=\"vm.assignBranch(item)\">分配支行</a>\n          <a href=\"javascript:void(0)\" ng-click=\"vm.assign(item)\">分配</a>\n        </td>\n      </tr>\n    </table>\n  </div>\n\n  <mc-pagination total-items=\"vm.pagination.count\" items-per-page=\"vm.pagination.pageSize\" current-page=\"vm.pagination.page\" page-change=\"vm.pageChanged()\"></mc-pagination>\n\n</section>\n");
  $templateCache.put("modules/information/setting/index.html", "<section class=\"content-header\">\n  <h4 class=\"title\">采集信息设置</h4>\n</section>\n\n<section class=\"content body-content block-ui block-ui-message-custom\" block-ui=\"main\">\n  <form name=\"Form\" class=\"form-horizontal\">\n\n    <div class=\"form-group\" ng-repeat=\"project in vm.collectList\">\n      <div class=\"col-sm-1\">\n        <label class=\"control-label\">采集项目</label>\n        <p>\n          <label class=\"mc-radio\">\n            <input type=\"checkbox\" name=\"checkbox1\" ng-model=\"project.isRequired\">\n            <i class=\"icon-check\"></i>\n            必填\n          </label>\n        </p>\n      </div>\n      <div class=\"col-sm-2\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"project.name\" validator=\"required\">\n      </div>\n      <div class=\"col-sm-6\">\n        <div class=\"clearfix\">\n          <label class=\"col-sm-2 control-label\">采集内容</label>\n        </div>\n        <div class=\"form-group\" ng-repeat=\"item in project.content\">\n          <div class=\"clearfix m-b-sm\">\n            <label class=\"col-sm-1 control-label\">名称</label>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" class=\"form-control\" ng-model=\"item.title\" validator=\"required\">\n            </div>\n            <label class=\"col-sm-1 control-label\">类型</label>\n            <div class=\"col-sm-4\">\n              <select class=\"form-control c-select\" ng-model=\"item.type\" \n                ng-options=\"type.type as type.title for type in vm.typeList\" validator=\"required\" \n                ng-change=\"vm.typeChange(item)\"\n                uib-tooltip=\"请在下方填写选项内容\" tooltip-placement=\"top\" tooltip-trigger=\"none\" \n                tooltip-enable=\"item.needData\" tooltip-is-open=\"item.needData\">\n              </select>\n            </div>\n            <div class=\"col-sm-2 control-label text-center pull-right\">\n              <a href=\"javascript:void(0);\" class=\"text-danger\" ng-click=\"vm.deleteItem(project, $index)\">删除</a>\n            </div>\n          </div>\n          <div class=\"clearfix m-b-sm\">\n            <label class=\"col-sm-1 control-label\">描述</label>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" class=\"form-control\" ng-model=\"item.description\">\n            </div>\n            <label class=\"mc-radio col-sm-5\">\n              <input type=\"checkbox\" name=\"checkbox1\" ng-model=\"item.isRequired\">\n              <i class=\"icon-check\"></i>\n              必填\n            </label>\n          </div>\n          <div class=\"clearfix\" ng-if=\"item.needData\">\n            <p class=\"text-tips\">下拉框/多选框必须填写选项内容</p>\n            <div class=\"clearfix m-b-sm\" ng-repeat=\"term in item.dataSource track by $index\">\n              <label class=\"col-sm-3 control-label\">选项{{$index + 1}}</label>\n              <div class=\"col-sm-6\">\n                <input type=\"text\" class=\"form-control\" ng-model=\"term.name\" validator=\"required\">\n              </div>\n              <div class=\"col-sm-2 text-center\">\n                <a href=\"javascript:void(0);\" class=\"btn btn-link\" ng-if=\"$index == 0\" ng-click=\"vm.addData(item)\">添加</a>\n                <a href=\"javascript:void(0);\" class=\"btn btn-link text-danger\" ng-if=\"$index > 0\" ng-click=\"vm.deleteData(item, $index)\">删除</a>\n              </div>\n            </div>\n            <!-- <label class=\"col-sm-3 control-label \">选项1</label>\n            <div class=\"col-sm-6 m-b-sm\">\n              <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.name\" validator=\"required\">\n            </div>\n            <div class=\"col-sm-2 text-center m-b-sm\">\n              <a href=\"javascript:void(0);\" class=\"btn btn-link text-danger\">删除</a>\n            </div>\n            <label class=\"col-sm-3 control-label m-b-sm\">选项1</label>\n            <div class=\"col-sm-6 m-b-sm\">\n              <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.name\" validator=\"required\">\n            </div>\n            <div class=\"col-sm-2 text-center m-b-sm\">\n              <a href=\"javascript:void(0);\" class=\"btn btn-link text-danger\">删除</a>\n            </div> -->\n          </div>\n        </div>\n\n        <div class=\"m-l-xl m-t-xs\">\n          <a href=\"javascript:void(0);\" class=\"btn btn-sm btn-default\" ng-click=\"vm.addItem(project)\">添加字段</a>\n        </div>\n      </div>\n      <div class=\"col-sm-1\">\n        <button class=\"btn btn-danger\" ng-click=\"vm.deleteProject($index)\">删除项目</button>\n      </div>\n    </div>\n  </form>\n  <div class=\"m-l-xl m-b-md\">\n    <button class=\"btn btn-default\" ng-click=\"vm.addProject()\">添加项目</button>\n  </div>\n  <div class=\"m-l-xl m-b-md text-center\">\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\">保存</button>\n  </div>\n</section>\n");
  $templateCache.put("modules/investment/list/index.html", "<section class=\"content-header\">\n    <button type=\"button\" class=\"btn btn-success pull-right m-l-sm\" style=\"position: relative; z-index: 2;\"\n            ng-click=\"vm.addCompany()\"><i class=\"icon-Plus\"></i> 添加\n    </button>\n\n    <button type=\"button\" class=\"btn btn-info pull-right\" style=\"position: relative; z-index: 2;\" data-toggle=\"modal\" data-target=\".pop-player\"\n            ng-click=\"$emit(\'batchUploadVc\');\"><i class=\"icon-Plus\"></i> 批量录入\n    </button>\n    <div>\n      <mc-batch-upload-vc></mc-batch-upload-vc>\n    </div>\n\n  <div class=\"options\">\n    <div class=\"option-item option-time\">\n      <ul class=\"clearfix\">\n        <li>\n          <div class=\"input-group search-box\">\n            <input ng-model=\"vm.filters.name\" type=\"text\" placeholder=\"请输查询\" class=\"form-control\"\n                    code=\"13\" key-event=\"vm.reSearch();\">\n            <span class=\"input-group-btn\">\n              <button ng-click=\"vm.reSearch()\" class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n            </span>\n          </div>\n        </li>\n      </ul>\n    </div>\n    <!-- <div class=\"option-item large\">\n      <span class=\"item-title text-right\">所属机构：</span>\n      <ul class=\"clearfix\">\n            <li>\n                <select name=\"\" id=\"\" class=\"form-control c-select\" \n                  ng-model=\"vm.filters.agency\" ng-options=\"item for item in vm.agencyList\" ng-change=\"vm.changeAgency()\">\n                  <option value=\"\">全部</option>\n                </select>\n            </li>\n        </ul>\n    </div> -->\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\" ng-if=\"vm.list.length > 0\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-5 text-center\">公司名称</th>\n        <th class=\"col-m-5 text-center\">公司简称</th>\n        <th class=\"col-m-1 text-center\">状态</th>\n        <!-- <th class=\"col-m-2 text-center\">备注</th> -->\n        <th class=\"col-m-2 text-center\">操作</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>{{item.name}}</td>\n        <td>{{item.vc_name}}</td>\n        <!-- <td>{{item.agency}}</td> -->\n        <td>\n          <span class=\"text-success\" ng-if=\"item.state==1\">正常</span>\n          <span class=\"text-danger\" ng-if=\"item.state==3\">已删除</span>\n        </td>\n        <td>\n          <a href=\"javascript:void(0)\" class=\"text-danger\" ng-click=\"vm.delete(item)\" ng-if=\"item.state==1\">删除</a>\n          <a href=\"javascript:void(0)\" ng-click=\"vm.deleteCancel(item)\" ng-if=\"item.state==3\">取消删除</a>\n        </td>\n      </tr>\n    </table>\n  </div>\n\n  <mc-pagination total-items=\"vm.pagination.count\" items-per-page=\"vm.pagination.pageSize\" current-page=\"vm.pagination.page\" page-change=\"vm.pageChanged()\"></mc-pagination>\n\n</section>\n\n");
  $templateCache.put("modules/loan/decision/index.html", "<section class=\"content-header\">\n  <h4 class=\"title\">贷款辅助决策信息修正</h4>\n</section>\n\n<section class=\"content body-content block-ui block-ui-message-custom\" block-ui=\"main\">\n  <form name=\"Form\" class=\"form-horizontal\">\n\n    <div class=\"form-group\" ng-repeat=\"project in vm.loanList\">\n      <div class=\"col-sm-2\" style=\"width:10%\">\n        <label class=\"control-label\">条件名称：</label>\n      </div>\n      <div class=\"col-sm-2\">\n        <label class=\"control-label\">{{project.title}}</label>\n      </div>\n      <div class=\"col-sm-1\">\n        <label class=\"control-label\">字段值：</label>\n      </div>\n      <div class=\"col-sm-3\">\n          <input type=\"text\" class=\"form-control\" ng-model=\"project.value\" validator=\"required\">\n      </div>\n      <div class=\"col-sm-1\">\n        <label class=\"control-label\">分数：</label>\n      </div>\n      <div class=\"col-sm-1\">\n        <label class=\"control-label\">{{project.point}}</label>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <div class=\"col-sm-1\">\n        <label class=\"control-label\">总分：</label>\n      </div>\n      <div class=\"col-sm-2\">\n        <label class=\"control-label\">{{vm.getTotal()}}</label>\n      </div>\n    </div>\n  </form>\n  <div class=\"m-l-xl m-b-md\">\n    <button class=\"btn btn-primary\" ng-click=\"vm.reCount(Form)\">重新计算</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\">保存</button>\n  </div>\n</section>\n");
  $templateCache.put("modules/loan/list/index.html", "<section class=\"content-header\">\n  <div class=\"options\">\n    <div class=\"option-item option-time\">\n      <ul class=\"clearfix\">\n        <li>\n          <div class=\"input-group search-box\">\n            <input ng-model=\"vm.filters.name\" type=\"text\" placeholder=\"请输查询\" class=\"form-control\"\n                    code=\"13\" key-event=\"vm.reSearch();\">\n            <span class=\"input-group-btn\">\n              <button ng-click=\"vm.reSearch()\" class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n            </span>\n          </div>\n        </li>\n      </ul>\n    </div>\n    <!-- \n    <div class=\"option-item large\">\n      <span class=\"item-title text-right\">主理状态：</span>\n      <ul class=\"clearfix\">\n          <li>\n              <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.gender, \'btn-toggle\': !vm.filters.gender, \'active\': !vm.filters.gender}\" ng-click=\"vm.switch(\'gender\')\">\n                  全部\n              </a>\n          </li>\n          <li ng-repeat=\"item in vm.roleMainStatus\">\n              <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.role_a_disable != item.value, \'btn-toggle\': vm.filters.role_a_disable == item.value, \'active\': vm.filters.role_a_disable == item.value}\" ng-click=\"vm.switch(\'role_a_disable\', item.value)\">\n                  {{ item.label }}\n              </a>\n          </li>\n      </ul>\n    </div>\n    <div class=\"option-item large\">\n      <span class=\"item-title text-right\">企业状态：</span>\n      <ul class=\"clearfix\">\n          <li>\n              <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.state !== undefined, \'btn-toggle\': vm.filters.state === undefined, \'active\': vm.filters.state === undefined}\" ng-click=\"vm.switch(\'state\')\">\n                  全部\n              </a>\n          </li>\n          <li ng-repeat=\"item in vm.enterpriseStateList\">\n              <a href=\"javascript:;\" class=\"btn\" ng-class=\"{\'btn-default\': vm.filters.state != item.value, \'btn-toggle\': vm.filters.state == item.value, \'active\': vm.filters.state == item.value}\" ng-click=\"vm.switch(\'state\', item.value)\">\n                  {{ item.label }}\n              </a>\n          </li>\n      </ul>\n    </div>\n    -->\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\" ng-if=\"vm.list.length > 0\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-1 text-center\">企业名称</th>\n        <th class=\"col-m-1 text-center\">企业地址</th>\n        <th class=\"col-m-1 text-center\">所属机构</th>\n        <th class=\"col-m-1 text-center\">评分</th>\n        <th class=\"col-m-1 text-center\">企业状态</th>\n        <th class=\"col-m-1 text-center\">操作</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>{{item.name}}</td>\n        <td>{{item.address}}</td>\n        <td>{{item.bank.name}}</td>\n        <td>{{item.loan_points}}</td>\n        <td>{{item.state | filterValue: vm.enterpriseStateList}}</td>\n        <td>\n          <a ui-sref=\"loan.decision({id: item.id})\">修正企业贷款信息</a>\n        </td>\n      </tr>\n    </table>\n  </div>\n\n  <mc-pagination total-items=\"vm.pagination.count\" items-per-page=\"vm.pagination.pageSize\" current-page=\"vm.pagination.page\" page-change=\"vm.pageChanged()\"></mc-pagination>\n\n</section>\n");
  $templateCache.put("modules/loan/setting/index.html", "<section class=\"content-header\">\n  <h4 class=\"title\">贷款决策条件设置</h4>\n</section>\n\n<section class=\"content body-content block-ui block-ui-message-custom\" block-ui=\"main\">\n  <form name=\"Form\" class=\"form-horizontal\">\n    <div class=\"form-group\" ng-repeat-start=\"loan in vm.loanList\">\n      <div class=\"col-sm-2\">\n        <label class=\"control-label\">条件分类名称</label>\n      </div>\n      <div class=\"col-sm-2\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"loan.title\" validator=\"required\">\n      </div>\n      <div class=\"col-sm-2\">\n        <label class=\"control-label\">分类总分</label>\n      </div>\n      <div class=\"col-sm-2\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"loan.point\" validator=\"required\">\n      </div>\n      <div class=\"col-sm-2 text-right\">\n          <a data-target=\"#project{{$index}}\" data-toggle=\"collapse\" class=\"btn btn-link\" ng-click=\"toggle=!toggle\"><span ng-hide=\"toggle\">编辑 <i class=\"icon-arrow-down small\"></i></span><span ng-show=\"toggle\">收起 <i class=\"icon-arrow-up small\"></i></span></i></a>\n      </div>\n    </div>\n    <div id=\"project{{$index}}\" class=\"collapse\" ng-repeat-end>\n      <div class=\"form-group\" ng-repeat=\"project in loan.condition_list\">\n        <div class=\"col-sm-1\">\n          <label class=\"control-label\">条件名称</label>\n        </div>\n        <div class=\"col-sm-2\">\n          <input type=\"text\" class=\"form-control\" ng-model=\"project.title\" validator=\"required\">\n        </div>\n        <div class=\"col-sm-7\">\n          <div class=\"clearfix\">\n            <label class=\"col-sm-2 control-label\">条件类型</label>\n            <div class=\"col-sm-2\">\n              <div class=\"btn-group\">\n                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                  {{vm.typeList[project.option_type]}}\n                  <span class=\"caret\"></span>\n                </button>\n                <ul class=\"dropdown-menu\" style=\"min-width: 60px\">\n                  <li><a ng-click=\"project.option_type=\'integer\';vm.typeChange(project)\" href=\"javascript:void(0)\">数值</a></li>\n                  <li><a ng-click=\"project.option_type=\'string\';vm.typeChange(project)\" href=\"javascript:void(0)\">文本</a></li>\n                </ul>\n              </div>\n            </div>\n            <div class=\"col-sm-2\">\n              <label class=\"control-label\">默认分数</label>\n            </div>\n            <div class=\"col-sm-2\">\n              <input type=\"text\" class=\"form-control\" ng-model=\"project.default_point\" validator=\"required\">\n            </div>\n            <!-- <div class=\"col-sm-2 text-center pull-right control-label\">\n              <a href=\"javascript:void(0);\" ng-click=\"vm.addItem(project)\">添加字段</a>\n            </div> -->\n          </div>\n          <div class=\"form-group\" ng-repeat=\"item in project.options\" style=\"margin:0px;\">\n            <div class=\"clearfix m-b-sm\">\n              <label class=\"col-sm-1 control-label\" style=\"width: 10%\">符号</label>\n              <div class=\"col-sm-2\">\n                <div class=\"btn-group\">\n                  <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    {{vm.conditionList[project.option_type][item.condition]}}\n                    <span class=\"caret\"></span>\n                  </button>\n                  <ul class=\"dropdown-menu\" style=\"min-width: 60px\">\n                    <li ng-repeat=\"(id, condition) in vm.conditionList[project.option_type]\"><a ng-click=\"item.condition=id;\" href=\"javascript:void(0)\">{{condition}}</a></li>\n                  </ul>\n                </div>\n              </div>\n              <label class=\"col-sm-1 control-label\" style=\"width: 13%\">字段值</label>\n              <div class=\"col-sm-3\">\n                <input type=\"text\" class=\"form-control\" ng-model=\"item.value\" validator=\"required\">\n              </div>\n              <label class=\"col-sm-1 control-label\" style=\"width: 10%\">分数</label>\n              <div class=\"col-sm-2\" style=\"width: 12%\">\n                <input type=\"text\" class=\"form-control\" ng-model=\"item.point\" validator=\"required\">\n              </div>\n              <div class=\"col-sm-1 control-label pull-right\" style=\"width: 10%\">\n                <a href=\"javascript:void(0);\" class=\"text-danger\" ng-click=\"vm.deleteItem(project, $index)\">删除</a>\n              </div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <div class=\"col-sm-4 text-center pull-right control-label\">\n              <a href=\"javascript:void(0);\" ng-click=\"vm.addItem(project)\">添加条件选项</a>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-sm-1\">\n          <button class=\"btn btn-danger\" ng-click=\"vm.deleteProject($index)\">删除条件</button>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <button class=\"btn btn-default\" ng-click=\"vm.addProject(loan)\">添加条件</button>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <button class=\"btn btn-default\" ng-click=\"vm.addCondition()\">添加分类</button>\n    </div>\n  </form>\n  <div class=\"m-l-xl m-b-md\">\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\">保存</button>\n  </div>\n</section>\n");
  $templateCache.put("modules/log/list/index.html", "<section class=\"content-header\">\n  <div class=\"options\">\n    <div class=\"option-item option-time\">\n      <ul class=\"clearfix\">\n        <li>\n          <div class=\"input-group search-box\">\n            <input ng-model=\"vm.filters.module\" type=\"text\" placeholder=\"请输模块名查询\" class=\"form-control\"\n                    code=\"13\" key-event=\"vm.reSearch();\">\n            <span class=\"input-group-btn\">\n              <button ng-click=\"vm.reSearch()\" class=\"btn btn-default search\" type=\"button\"><i class=\"icon-search\"></i></button>\n            </span>\n          </div>\n        </li>\n        <li>\n          <mc-datepicker id=\"startDatePicker\" start-date=\"vm.start_date\" max-date=\"vm.startTimeMaxLimit\" time-source=\"\" ctrl-alias=\"vm\" min-view=\"\'minutes\'\" change-time=\"vm.changeTime(\'start\')\" change-by=\"close\"></mc-datepicker> --\n          <mc-datepicker id=\"endDatePicker\" start-date=\"vm.end_date\" min-date=\"vm.endTimeMinLimit\" max-date=\"vm.endTimeMaxLimit\" time-source=\"\" ctrl-alias=\"vm\" min-view=\"\'minutes\'\" change-time=\"vm.changeTime(\'end\')\" change-by=\"close\"></mc-datepicker>\n        </li>\n      </ul>\n    </div>\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-1 text-center\">时间</th>\n        <th class=\"col-m-1 text-center\">模块</th>\n        <th class=\"col-m-1 text-center\">操作</th>\n        <th class=\"col-m-1 text-center\">操作参数</th>\n        <th class=\"col-m-1 text-center\">操作人</th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>{{item.created}}</td>\n        <td>{{item.module}}</td>\n        <td>{{item.action}}</td>\n        <td>{{item.data}}</td>\n        <td>{{item.operator}}</td>\n      </tr>\n    </table>\n  </div>\n\n  <mc-pagination total-items=\"vm.pagination.count\" items-per-page=\"vm.pagination.pageSize\" current-page=\"vm.pagination.page\" page-change=\"vm.pageChanged()\"></mc-pagination>\n\n</section>\n");
  $templateCache.put("modules/message/detail/index.html", "<section class=\"content-header clearfix\">\n  <h4 class=\"title pull-left\">\n    {{vm.info.title}}\n  </h4>\n  <a href=\"javascript:void(0)\" class=\"btn btn-default pull-right\" ng-click=\"$root.back();\">返回</a>\n  <button type=\"button\" class=\"btn btn-danger pull-right m-r\" ng-click=\"vm.delete()\">删除</button>\n</section>\n<section class=\"content body-content block-ui block-ui-message-custom message-detail p-m\" block-ui=\"main\">\n<h5>内容：</h5>\n<p>{{vm.info.content}}</p>\n<div ng-if=\"vm.info.link\">\n  <a href=\"{{vm.info.link}}\">点此查看</a>\n</div>\n</section>");
  $templateCache.put("modules/message/list/template.html", "<section class=\"content-header\">\n  <h4 class=\"title\">消息列表</h4>\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom message-list\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\" ng-if=\"vm.list.length > 0\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-1 text-center\">\n          <!-- <label class=\"mc-radio\">\n            <input type=\"checkbox\" ng-model=\"vm.selectAll\" ng-change=\"vm.toggleAll()\" />\n            <i class=\"icon-check\"></i>\n          </label> -->\n        </th>\n        <th class=\"col-m-10 text-left\">标题</th>\n        <th class=\"col-m-1 text-center\"></th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>\n          <!-- <label class=\"mc-radio\">\n            <input type=\"checkbox\" ng-model=\"item.checked\" ng-change=\"vm.checkAll()\" />\n            <i class=\"icon-check\"></i>\n          </label> -->\n        </td>\n        <td class=\"text-left\">\n          <a ui-sref=\"message.detail({id: item.id})\" style=\"color: #323232;\">\n            <strong ng-if=\"item.state === 0\">{{item.title}}</strong>\n            <span ng-if=\"item.state !== 0\">{{item.title}}</span>\n          </a>\n        </td>\n        <td><a ui-sref=\"message.detail({id: item.id})\">查看<i class=\"icon-angle-right\"></i></a></td>\n      </tr>\n    </table>\n  </div>\n<!--   <div>\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.markedRead()\">标记已读</button>\n    <button type=\"button\" class=\"btn btn-danger\" ng-click=\"vm.delete()\">删除</button>\n  </div> -->\n\n  <mc-pagination total-items=\"vm.pagination.count\" items-per-page=\"vm.pagination.pageSize\" current-page=\"vm.pagination.page\" page-change=\"vm.pageChanged()\"></mc-pagination>\n\n</section>\n");
  $templateCache.put("modules/person/detail/index.html", "<section class=\"content-header clearfix\">\n    <div class=\"page-header\"><h4>资料设置</h4></div>\n    <div class=\"form-horizontal\">\n        <div class=\"form-group\">\n            <label for=\"inputName\" class=\"col-sm-2 control-label\">姓名</label>\n            <div class=\"col-sm-2\">\n                <input type=\"text\" class=\"form-control\" id=\"inputName\" ng-model=\"vm.person.true_name\" placeholder=\"\">\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"inputPhone\" class=\"col-sm-2 control-label\">手机号</label>\n            <div class=\"col-sm-4\">\n                <input type=\"text\" class=\"form-control\" id=\"inputPhone\" ng-model=\"vm.person.phone\" placeholder=\"\">\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"inputPwd\" class=\"col-sm-2 control-label\">新密码</label>\n            <div class=\"col-sm-4\">\n                <input type=\"text\" class=\"form-control\" id=\"inputPwd\" ng-model=\"vm.person.new_password\" placeholder=\"\">\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"\" class=\"col-sm-2 control-label\">角色信息</label>\n            <div class=\"btn-group col-sm-2\">\n              <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                {{vm.person.role_name}}\n                <span class=\"caret\"></span>\n              </button>\n              <ul class=\"dropdown-menu\">\n                <li ng-repeat=\"role in vm.roleList\"><a ng-click=\"vm.person.role_name=role.name;vm.person.role=role.value\" href=\"javascript:void(0)\">{{role.name}}</a></li>\n              </ul>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"\" class=\"col-sm-2 control-label\">用户状态</label>\n            <div class=\"btn-group col-sm-2\">\n              <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                {{vm.stateArr[vm.person.state]}}\n                <span class=\"caret\"></span>\n              </button>\n              <ul class=\"dropdown-menu\">\n                <li><a ng-click=\"vm.person.state=0\" href=\"javascript:void(0)\">未激活</a></li>\n                <li><a ng-click=\"vm.person.state=1\" href=\"javascript:void(0)\">正常</a></li>\n                <li><a ng-click=\"vm.person.state=2\" href=\"javascript:void(0)\">已冻结</a></li>\n                <li><a ng-click=\"vm.person.state=3\" href=\"javascript:void(0)\">已删除</a></li>\n              </ul>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <button type=\"button\" ng-click=\"vm.setUser()\" class=\"btn btn-success\">提交</button>\n        </div>\n    </div>\n\n</section>");
  $templateCache.put("modules/process/add/index.html", "<section class=\"content-header clearfix\">\n  <h4 class=\"title pull-left\">\n    {{vm.id? \'编辑\': \'添加\'}}话术\n  </h4>\n  <a href=\"javascript:void(0)\" class=\"btn btn-default pull-right\" ng-click=\"$root.back();\">返回</a>\n  <button type=\"button\" class=\"btn btn-danger pull-right m-r\" ng-click=\"vm.delete(vm.Form)\" ng-if=\"vm.id\">删除</button>\n</section>\n<section class=\"content body-content block-ui block-ui-message-custom message-detail p-m\" block-ui=\"main\">\n	<form class=\"form-horizontal\" name=\"vm.Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-1 control-label\">标题：</label>\n      <div class=\"col-sm-5\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.title\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n	    <div class=\"clearfix\">\n	      <label for=\"noteInput\" class=\"col-sm-1 control-label\">内容：</label>\n      </div>\n    	<div class=\"col-sm-6\">\n				<mdeditor default-text=\"vm.defaultContent\" text=\"vm.inputInfo.content\"></mdeditor>\n				<input type=\"hidden\" ng-model=\"vm.inputInfo.content\" validator=\"required\" />\n			</div>\n			<div class=\"col-sm-6\">\n				<h5>内容预览</h5>\n				<p ng-bind-html=\"vm.html\" style=\"background: #fff; height: 306px; overflow: auto; border: 1px solid #ddd; padding: 5px;\"></p>\n			</div>\n    </div>\n    \n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(vm.Form)\"> 保存</button>\n  </div>\n</section>");
  $templateCache.put("modules/process/list/template.html", "<section class=\"content-header\">\n  <h4 class=\"title\">消息列表</h4>\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom message-list\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\" ng-if=\"vm.list.length > 0\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-1 text-center\">\n          <!-- <label class=\"mc-radio\">\n            <input type=\"checkbox\" ng-model=\"vm.selectAll\" ng-change=\"vm.toggleAll()\" />\n            <i class=\"icon-check\"></i>\n          </label> -->\n        </th>\n        <th class=\"col-m-10 text-left\">标题</th>\n        <th class=\"col-m-1 text-center\"></th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>\n          <!-- <label class=\"mc-radio\">\n            <input type=\"checkbox\" ng-model=\"item.checked\" ng-change=\"vm.checkAll()\" />\n            <i class=\"icon-check\"></i>\n          </label> -->\n        </td>\n        <td class=\"text-left\">\n          <a ui-sref=\"message.detail({id: item.id})\" style=\"color: #323232;\">\n            <strong ng-if=\"item.state === 0\">{{item.title}}</strong>\n            <span ng-if=\"item.state !== 0\">{{item.title}}</span>\n          </a>\n        </td>\n        <td><a ui-sref=\"message.detail({id: item.id})\">查看<i class=\"icon-angle-right\"></i></a></td>\n      </tr>\n    </table>\n  </div>\n<!--   <div>\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.markedRead()\">标记已读</button>\n    <button type=\"button\" class=\"btn btn-danger\" ng-click=\"vm.delete()\">删除</button>\n  </div> -->\n\n  <mc-pagination total-items=\"vm.pagination.count\" items-per-page=\"vm.pagination.pageSize\" current-page=\"vm.pagination.page\" page-change=\"vm.pageChanged()\"></mc-pagination>\n\n</section>\n");
  $templateCache.put("modules/process/tips/template.html", "<section class=\"content-header\">\n  <h4 class=\"title\">话术列表</h4>\n</section>\n\n<section class=\"content body-content body-content-compact block-ui block-ui-message-custom message-list\" block-ui=\"main\">\n  <empty-tip ng-if=\"vm.list.length === 0\"></empty-tip>\n\n  <div class=\"panel\" ng-if=\"vm.list.length > 0\">\n    <table class=\"table table-striped text-center\">\n      <tr>\n        <th class=\"col-m-1 text-center\">\n          <!-- <label class=\"mc-radio\">\n            <input type=\"checkbox\" ng-model=\"vm.selectAll\" ng-change=\"vm.toggleAll()\" />\n            <i class=\"icon-check\"></i>\n          </label> -->\n        </th>\n        <th class=\"col-m-10 text-left\">标题</th>\n        <th class=\"col-m-1 text-center\"></th>\n      </tr>\n      <tr ng-repeat=\"item in vm.list\">\n        <td>\n          <!-- <label class=\"mc-radio\">\n            <input type=\"checkbox\" ng-model=\"item.checked\" ng-change=\"vm.checkAll()\" />\n            <i class=\"icon-check\"></i>\n          </label> -->\n        </td>\n        <td class=\"text-left\">\n          {{item.title}}\n        </td>\n        <td><a ui-sref=\"process.add({id: item.id})\">编辑<i class=\"icon-angle-right\"></i></a></td>\n      </tr>\n    </table>\n  </div>\n<!--   <div>\n    <button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.markedRead()\">标记已读</button>\n    <button type=\"button\" class=\"btn btn-danger\" ng-click=\"vm.delete()\">删除</button>\n  </div> -->\n\n  <mc-pagination total-items=\"vm.pagination.count\" items-per-page=\"vm.pagination.pageSize\" current-page=\"vm.pagination.page\" page-change=\"vm.pageChanged()\"></mc-pagination>\n\n</section>\n");
  $templateCache.put("modules/sysconfig/time/index.html", "<section class=\"content-header clearfix\">\n    <h4>刷新时间设置</h4>\n</section>\n<section class=\"content body-content\" block-ui=\"main\">\n\n    <div class=\"form-horizontal\">\n        <div class=\"form-group\">\n            <label for=\"inputName\" class=\"col-sm-2 control-label\">刷新时间</label>\n            <div class=\"col-sm-2\">\n                <input type=\"text\" class=\"form-control\" id=\"inputName\" ng-model=\"vm.keyValue\" placeholder=\"\">\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <button type=\"button\" ng-click=\"vm.setConfig()\" class=\"btn btn-success\">提交</button>\n        </div>\n    </div>\n</section>");
  $templateCache.put("modules/account/modals/add/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">添加用户</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">真实姓名：</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.true_name\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">手机号码：</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.phone\" placeholder=\"请输入\"\n          validator=\"required\" auto-complete=\"vm.autoCompleteOptions\">\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">角色：</label>\n      <div class=\"btn-group col-sm-2\">\n        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          {{vm.inputInfo.role_name}}\n          <span class=\"caret\"></span>\n        </button>\n        <ul class=\"dropdown-menu\">\n          <li ng-repeat=\"role in vm.roleList\"><a ng-click=\"vm.inputInfo.role_name=role.name;vm.inputInfo.role=role.value\" href=\"javascript:void(0)\">{{role.name}}</a></li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">所属机构：</label>\n      <div class=\"btn-group col-sm-6\">\n        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          {{vm.inputInfo.bank_name}}\n          <span class=\"caret\"></span>\n        </button>\n        <ul class=\"dropdown-menu\">\n          <li ng-repeat=\"bank in vm.bankList\"><a ng-click=\"vm.inputInfo.bank_name=bank.name;vm.inputInfo.bank_id=bank.id\" href=\"javascript:void(0)\">{{bank.name}}</a></li>\n        </ul>\n      </div>\n    </div>\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 保存</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/account/modals/branch/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">分配</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"select_main\" class=\"col-sm-12 text-center\">选择支行</label>\n    </div>\n    <div class=\"form-group clearfix\">\n      <div class=\"col-sm-12\">\n        <select name=\"selectBranch\" class=\"form-control c-select\" \n          ng-options=\"item.id as item.name for item in vm.list\" ng-model=\"vm.inputInfo.branch\" \n          placeholder=\"请选择\" validator=\"required\" size=\"10\">\n          <option value=\"\">请选择</option>\n        </select>\n      </div>\n    </div>\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 确定</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/bank/modals/add/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">添加机构</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">机构名称</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.name\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">机构地址</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.address\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">联系电话</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.phone\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 保存</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/bank/modals/branch/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">分配</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"select_main\" class=\"col-sm-12 text-center\">选择支行</label>\n    </div>\n    <div class=\"form-group clearfix\">\n      <div class=\"col-sm-12\">\n        <select name=\"selectBranch\" class=\"form-control c-select\" \n          ng-model=\"vm.inputInfo.branch\" \n          placeholder=\"请选择\" validator=\"required\" size=\"10\">\n          <option value=\"\">请选择</option>\n          <option value=\"{{item.id}}\" ng-hide=\"item.id == vm.info.id\" ng-repeat=\"item in vm.list\">{{item.name}}</option>\n        </select>\n      </div>\n    </div>\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 确定</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/bank/modals/edit/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">更改名称</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">机构</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.name\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">机构地址</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.address\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">联系电话</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.phone\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 保存</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/bank/modals/map/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">选取地图</h4>\n</div>\n<div class=\"modal-body\">\n   <baidu-map options=\"vm.opts\" ak=\"8BEaSdo8E7VEHjM0pxWs8gIsHhkDlOOW\" on-map-loaded=\"vm.loadMap(map)\" style=\"display:block;width:550px;height:500px;\"></baidu-map>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n  </div>\n</div>");
  $templateCache.put("modules/demo/modals/edit/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">设置</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">Label：</label>\n      <div class=\"col-sm-5\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.info.input\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 保存</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/enterprise/modals/add/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">添加企业</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">企业名称：</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.name\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 保存</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/enterprise/modals/branch/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">分配机构</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"select_main\" class=\"col-sm-12 text-center\">选择机构</label>\n    </div>\n    <div class=\"form-group clearfix\">\n      <div class=\"col-sm-12\">\n        <select name=\"selectBranch\" class=\"form-control c-select\" \n          ng-options=\"item.id as item.name for item in vm.list\" ng-model=\"vm.inputInfo.branch\" \n          placeholder=\"请选择\" validator=\"required\" size=\"10\">\n          <option value=\"\">请选择</option>\n        </select>\n      </div>\n    </div>\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 确定</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/enterprise/modals/manage/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">分配客户经理</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"select_main\" class=\"col-sm-6 text-center\">主理</label>\n      <label for=\"select_vice\" class=\"col-sm-6 text-center\">协理</label>\n    </div>\n    <div class=\"form-group clearfix\">\n      <div class=\"col-sm-6\">\n        <select name=\"selectMain\" class=\"form-control c-select\" \n          ng-options=\"item.id as item.true_name for item in vm.list\" ng-model=\"vm.inputInfo.main\" \n          placeholder=\"请选择\" validator=\"required\" size=\"10\">\n          <option value=\"\">请选择</option>\n        </select>\n      </div>\n      <div class=\"col-sm-6\">\n        <select name=\"selectVice\" class=\"form-control c-select\" \n          ng-options=\"item.id as item.true_name for item in vm.list\" ng-model=\"vm.inputInfo.vice\"\n           placeholder=\"请选择\" size=\"10\" match=\"vm.inputInfo.main\" not-match=\"true\">\n          <option value=\"\">请选择</option>\n        </select>\n        <span ng-show=\"Form.selectVice.$error.match\" class=\"validation-invalid\">\n          <p>主理和协理不能为同一人！</p>\n        </span>\n      </div>\n    </div>\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 确定</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/filter/modals/add/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">添加黑名单</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">公司名称：</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.name\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">信息来源：</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.source\" placeholder=\"请输入\">\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">备注：</label>\n      <div class=\"col-sm-6\">\n        <textarea class=\"form-control\" ng-model=\"vm.inputInfo.note\" placeholder=\"请输入\"\n          maxlength=\"200\"></textarea> \n      </div>\n    </div>\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 保存</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/information/modals/branch/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">分配</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"select_main\" class=\"col-sm-12 text-center\">选择支行</label>\n    </div>\n    <div class=\"form-group clearfix\">\n      <div class=\"col-sm-12\">\n        <select name=\"selectBranch\" class=\"form-control c-select\" \n          ng-options=\"item.id as item.name for item in vm.list\" ng-model=\"vm.inputInfo.branch\" \n          placeholder=\"请选择\" validator=\"required\" size=\"10\">\n          <option value=\"\">请选择</option>\n        </select>\n      </div>\n    </div>\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 确定</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/information/modals/manage/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">分配</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"select_main\" class=\"col-sm-6 text-center\">主理</label>\n      <label for=\"select_vice\" class=\"col-sm-6 text-center\">协理</label>\n    </div>\n    <div class=\"form-group clearfix\">\n      <div class=\"col-sm-6\">\n        <select name=\"selectMain\" class=\"form-control c-select\" \n          ng-options=\"item.id as item.name for item in vm.list\" ng-model=\"vm.inputInfo.main\" \n          placeholder=\"请选择\" validator=\"required\" size=\"10\">\n          <option value=\"\">请选择</option>\n        </select>\n      </div>\n      <div class=\"col-sm-6\">\n        <select name=\"selectVice\" class=\"form-control c-select\" \n          ng-options=\"item.id as item.name for item in vm.list\" ng-model=\"vm.inputInfo.vice\"\n           placeholder=\"请选择\" size=\"10\" match=\"vm.inputInfo.main\" not-match=\"true\">\n          <option value=\"\">请选择</option>\n        </select>\n        <span ng-show=\"Form.selectVice.$error.match\" class=\"validation-invalid\">\n          <p>主理和协理不能为同一人！</p>\n        </span>\n      </div>\n    </div>\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 确定</button>\n  </div>\n</div>\n");
  $templateCache.put("modules/investment/modals/add/template.html", "<div class=\"modal-header\">\n  <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" ng-click=\"vm.cancel();\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button> -->\n  <h4 class=\"modal-title\">添加投资公司</h4>\n</div>\n<div class=\"modal-body\">\n  <form class=\"form-horizontal\" name=\"Form\">\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">公司名称：</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.name\" placeholder=\"请输入\"\n          validator=\"required\">\n      </div>\n    </div>\n    <div class=\"form-group clearfix\">\n      <label for=\"noteInput\" class=\"col-sm-4 control-label\">公司简称：</label>\n      <div class=\"col-sm-6\">\n        <input type=\"text\" class=\"form-control\" ng-model=\"vm.inputInfo.vc_name\" placeholder=\"请输入\"\n          validator=\"required\" >\n      </div>\n    </div>\n  </form>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"vm.cancel()\">取消</button>\n    <button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"vm.submit(Form)\"> 保存</button>\n  </div>\n</div>\n");
}]);

},{}],"/Users/Gavin/Documents/codes/pack/sil/bower_components/angular-mdeditor/src/angular-mdeditor.js":[function(require,module,exports){
'use strict';

/**
* harrie.mdeditor Module
*
* Description
* a markdown editor for angular
* https://github.com/varHarrie/angular-mdeditor
*/
angular.module('ui.mdeditor', []).config(function () {
	if (angular.isUndefined(window.marked)) {
		throw new Error('Require marked!');
	}
	if (angular.isUndefined(window.hljs)) {
		throw new Error('Require hljs!');
	}
	String.prototype.startWith = function (str, doTrim) {
		var s = typeof doTrim !== 'undefined' && !!doTrim ? this.trim() : this;
		return typeof str === 'string' && s.length >= str.length && s.substr(0, str.length) === str;
	};
	String.prototype.endWith = function (str, doTrim) {
		var s = typeof doTrim !== 'undefined' && !!doTrim ? this.trim() : this;
		return typeof str === 'string' && s.length >= str.length && s.substr(s.length - str.length) === str;
	};
}).constant('mdeditorConfig', {
	classNames: {
		wrapper: 'mdeditor',
		toolbar: 'mdeditor-toolbar',
		toolbarItem: 'mdeditor-toolbar-item',
		separator: 'mdeditor-toolbar-separator',
		textarea: 'mdeditor-textarea',
		preview: 'mdeditor-preview'
	},
	toolbar: [{ action: 'bold', icon: 'fa fa-bold', tip: '加粗(Ctrl+B)' }, { action: 'italic', icon: 'fa fa-italic', tip: '斜体(Ctrl+I)' }, { action: 'header', icon: 'fa fa-header', tip: '标题(Ctrl+H)' }, { separator: true }, { action: 'ul', icon: 'fa fa-list-ul', tip: '无序列表(Ctrl+U)' }, { action: 'ol', icon: 'fa fa-list-ol', tip: '有序列表(Ctrl+O)' },
	// {action:'code',icon:'fa fa-code',tip:'代码(Ctrl+K)'},
	{ action: 'quote', icon: 'fa fa-quote-left', tip: '引用(Ctrl+Q)' },
	//{action:'indent',icon:'fa fa-indent',tip:'缩进(Tab)',keycode:9,ctrl:false},
	//{action:'outdent',icon:'fa fa-outdent',tip:'减小缩进(Tab)',keycode:9,ctrl:false,shift:true},
	{ separator: true }, { action: 'link', icon: 'fa fa-link', tip: '连接(Ctrl+L)' }, { action: 'img', icon: 'fa fa-picture-o', tip: '图片(Ctrl+G)' },
	/*{action:'file',icon:'fa fa-file-o',tip:'文件',keycode:'',ctrl:true},*/
	{ separator: true }, { action: 'undo', icon: 'fa fa-undo', tip: '撤销' }, { action: 'redo', icon: 'fa fa-repeat', tip: '重做' }],
	shortcut: {
		'Ctrl-B': 'bold',
		'Ctrl-I': 'italic',
		'Ctrl-H': 'header',
		'Ctrl-U': 'ul',
		'Ctrl-O': 'ol',
		'Ctrl-K': 'code',
		'Ctrl-Q': 'quote',
		'Ctrl-L': 'link',
		'Ctrl-G': 'img'
	}
}).factory('actions', [function () {
	var syntax = {
		bold: { prefix: '**', postfix: '**' },
		italic: { prefix: '_', postfix: '_' },
		code: { prefix: '```\n', postfix: '\n```' },
		link: { prefix: '[', postfix: '](src)' },
		img: { prefix: '![', postfix: '](src)' },

		header: { prefix: '### ', postfix: '' },
		quote: { prefix: '> ', postfix: '' },
		ul: { prefix: '- ', postfix: '' }
	};
	function inlineAction(cm, actionName, canStartWithSpace) {
		var texts = cm.getSelections();
		var replacements = [];
		var prefix = syntax[actionName].prefix;
		var postfix = syntax[actionName].postfix;
		texts.forEach(function (text) {
			if (text.length >= prefix.length + postfix.length && text.startWith(prefix, canStartWithSpace) && text.endWith(postfix)) {
				replacements.push(text.substr(prefix.length, text.length - prefix.length - postfix.length));
			} else {
				replacements.push(prefix + text + postfix);
			}
		});
		cm.replaceSelections(replacements, 'around');
	}
	function rowAction(cm, actionName) {
		//select row
		var selections = cm.listSelections();
		selections.forEach(function (range) {
			var num1 = range.anchor.line,
			    num2 = range.head.line;
			var start = num1 < num2 ? num1 : num2,
			    end = num1 > num2 ? num1 : num2;
			cm.addSelection({ line: start, ch: 0 }, { line: end });
		});
		var prefix = syntax[actionName].prefix;
		var replacements = [];
		selections = cm.getSelections();
		selections.forEach(function (text) {
			replacements.push(text.split('\n').map(function (line) {
				if (line.startWith(prefix, true)) {
					var startAt = line.indexOf(prefix);
					startChars = line.substr(0, startAt);
					endChars = line.substr(startAt + prefix.length);
					return startChars + endChars;
				} else {
					return prefix + line;
				}
			}).join('\n'));
		});
		cm.replaceSelections(replacements, 'around');
	}
	return {
		//inline actions
		bold: function bold(cm) {
			inlineAction(cm, 'bold');
		},
		italic: function italic(cm) {
			inlineAction(cm, 'italic');
		},
		code: function code(cm) {
			inlineAction(cm, 'code');
		},
		link: function link(cm) {
			inlineAction(cm, 'link');
		},
		img: function img(cm) {
			inlineAction(cm, 'img');
		},
		//row actions
		header: function header(cm) {
			rowAction(cm, 'header');
		},
		quote: function quote(cm) {
			rowAction(cm, 'quote');
		},
		ul: function ul(cm) {
			rowAction(cm, 'ul');
		},
		ol: function ol(cm) {
			var selections = cm.listSelections();
			selections.forEach(function (range) {
				var num1 = range.anchor.line,
				    num2 = range.head.line;
				var start = num1 < num2 ? num1 : num2,
				    end = num1 > num2 ? num1 : num2;
				cm.addSelection({ line: start, ch: 0 }, { line: end });
			});
			var replacements = [];
			selections = cm.getSelections();
			selections.forEach(function (text) {
				if (/^\s*\d+\.\s/m.test(text)) {
					replacements.push(text.replace(/^\s*\d+\.\s/mg, ''));
				} else {
					replacements.push(text.split('\n').map(function (line, i) {
						return i + 1 + '. ' + line;
					}).join('\n'));
				}
			});
			cm.replaceSelections(replacements, 'around');
		},
		undo: function undo(cm) {
			cm.undo();
		},
		redo: function redo(cm) {
			cm.redo();
		}
	};
}]).provider('hljsServ', function () {
	var _options = {};
	return {
		setOptions: function setOptions(options) {
			angular.extend(_options, options);
		},
		getOptions: function getOptions() {
			return angular.copy(_options);
		},
		$get: function $get() {
			hljs.configure(_options);
			return hljs;
		}
	};
}).filter('markdown', ['$sce', 'hljsServ', function ($sce, hljsServ) {
	var marked = function (marked) {
		/*marked.setOptions({
    renderer: new marked.Renderer(),
    gfm: true,
    tables: true,
    breaks: false,
    pedantic: false,
    sanitize: true,
    smartLists: true,
    smartypants: false
  });*/
		marked.setOptions({
			highlight: function highlight(code) {
				return hljsServ.highlightAuto(code).value;
			}
		});
		return marked;
	}(window.marked);

	return function (input) {
		if (!input || typeof input !== 'string') return '';
		return $sce.trustAsHtml(marked(input));
	};
}]).directive('mdeditor', ['mdeditorConfig', 'actions', function (mdeditorConfig, actions) {

	return {
		restrict: 'AE',
		scope: {
			defaultText: '=',
			text: '=',
			options: '=?',
			classNames: '=?',
			toolbar: '=?',
			shortcut: '=?'
		},
		template: ['<div class="{{classNames.wrapper}}">', '<ul class="{{classNames.toolbar}}">', '<li ng-repeat="item in toolbar | filter:toolbarFilter track by $index" ng-click="callAction(item.action)" class="{{item.separator?classNames.separator:classNames.toolbarItem}}" title="{{item.tip}}">', '<i class="{{item.icon}}" ng-if="!item.separator"></i>', '<span ng-if="item.separator">|</span>', '</li>', '</ul>', '<textarea class="{{classNames.textarea}}" ng-show="!preview"></textarea>', '<div class="{{classNames.preview}}" ng-bind-html="text | markdown" ng-if="preview"></div>', '</div>'].join(''),
		replace: true,
		compile: function compile(tElm, tAttrs) {
			if (angular.isUndefined(window.CodeMirror)) {
				throw new Error('Require CodeMirror!');
			}
			var theme = tAttrs.theme || 'default';
			var textarea = tElm.find('textarea');
			var codemirror = new window.CodeMirror(function (cm_el) {
				angular.forEach(textarea.prop('attributes'), function (attr) {
					if (attr.name == 'class') cm_el.className += ' ' + attr.textContent;else cm_el.setAttribute(attr.name, attr.textContent);
				});
				textarea.replaceWith(cm_el);
			}, {
				mode: 'gfm',
				lineWrapping: true,
				theme: theme
			});

			return function postlink($scope, iElm, iAttrs) {
				$scope.preview = false;
				$scope.classNames = $scope.classNames || mdeditorConfig.classNames;
				$scope.toolbar = $scope.toolbar || mdeditorConfig.toolbar;
				var options = $scope.options || {};
				for (var key in options) {
					codemirror.setOption(key, options[key]);
				}
				var shortcut = $scope.shortcut || mdeditorConfig.shortcut;
				var keyMap = {};
				for (var key in shortcut) {
					if (typeof key == 'string' && actions[shortcut[key]]) keyMap[key] = actions[shortcut[key]];
				}

				keyMap['Enter'] = "newlineAndIndentContinueMarkdownList";
				keyMap['Tab'] = 'tabAndIndentContinueMarkdownList';
				keyMap['Shift-Tab'] = 'shiftTabAndIndentContinueMarkdownList';

				codemirror.setOption("extraKeys", keyMap);

				$scope.callAction = function (actionName) {
					if (!actionName) return;else if (actions[actionName]) actions[actionName](codemirror);else if (actionName == 'preview') {
						$scope.preview = !$scope.preview;
					} else if (actionName == 'fullscreen') {
						var el = iElm[0];
						var rfs = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen;
						if (rfs) rfs.call(el);
					}
					codemirror.focus();
				};

				if ($scope.text) {
					codemirror.setValue($scope.text);
				}

				var destroyWatchText = $scope.$watch('defaultText', function () {
					if ($scope.defaultText) {
						codemirror.setValue($scope.defaultText);
					}
				});

				$scope.$on('$destroy', destroyWatchText);

				codemirror.on('change', function (instance, event) {
					var val = instance.getValue();
					if ($scope.text !== val) {
						$scope.text = instance.getValue();
						var phase = $scope.$root.$$phase;
						if (phase !== '$apply' && phase !== 'digest') {
							$scope.$apply();
						}
					}
				});
			};
		}
	};
}]);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-auto-complete/angular-auto-complete.js":[function(require,module,exports){
(function () {
    angular
        .module('autoCompleteModule', ['ngSanitize'])
        .service('autoCompleteService', autoCompleteService)
        .directive('autoComplete', autoCompleteDirective);

    autoCompleteDirective.$inject = ['$compile', '$document', '$window', '$timeout', 'autoCompleteService'];
    function autoCompleteDirective($compile, $document, $window, $timeout, autoCompleteService) {

        return {
            restrict: 'A',
            scope: {},
            transclude: false,
            controllerAs: 'ctrl',
            bindToController: { options: '&autoComplete' },
            require: ['autoComplete', 'ngModel'],
            link: postLinkFn,
            controller: MainCtrl
        }

        function postLinkFn(scope, element, attrs, ctrls) {
            var ctrl = ctrls[0]; //directive controller
            ctrl.textModelCtrl = ctrls[1]; // textbox model controller

            autoCompleteService.addDirectiveCtrl(ctrl);

            // execute the options expression in the parent scope
            var options = ctrl.options() || {};
            ctrl.init(angular.extend({}, defaultOptions, options));

            initContainer();

            function initContainer() {
                var template =
                    '<div class="auto-complete-container" data-instance-id="{{ctrl.instanceId}}" ng-show="ctrl.containerVisible">' +
                      '<ul class="auto-complete-results">' +
                        '<li ng-repeat="item in ctrl.renderItems"' +
                            'ng-click="ctrl.selectItem($index, true)" ' +
                            'class="auto-complete-item" data-index="{{$index}}" ' +
                            'ng-class="ctrl.isSelected($index)">' +
                                '<div ng-bind-html="item.label"></div>' +
                        '</li>' +
                      '</ul>' +
                    '</div>';

                var templateFn = $compile(template);
                ctrl.container = templateFn(scope);

                if (angular.isDefined(ctrl.options.containerCssClass)) {
                    ctrl.container.addClass(ctrl.options.containerCssClass);
                }

                // if a jquery parent is specified in options append the container to that
                // otherwise append to body
                if (angular.isDefined(ctrl.options.dropdownParent)) {
                    ctrl.options.dropdownParent.append(ctrl.container);
                }
                else {
                    $document.find('body').append(ctrl.container);
                    ctrl.container.addClass('auto-complete-absolute-container');
                }

                // store the jquery element on the controller          
                ctrl.target = element;

                // store a reference to the UL
                ctrl.elementUL = angular.element(ctrl.container[0].querySelector('ul.auto-complete-results'));

                // prevents text select on mouse drag, dblclick
                ctrl.container.css('MozUserSelect', 'none').bind('selectstart', function () { return false; });
            }

            // when the target(textbox) gets focus activate the corresponding container
            element.on('focus', function (e) {
                scope.$evalAsync(function () {
                    ctrl.activate();
                });
            });

            // handle key strokes
            element.on('keydown', function (e) {
                scope.$evalAsync(function () {
                    _elementKeyDown(e);
                });
            });

            // hide container on ENTER
            $document.on('keydown', function (e) {
                scope.$evalAsync(function () {
                    _documentKeyDown(e);
                });
            });

            angular.element($window).on('resize', function (e) {
                scope.$evalAsync(function () {
                    ctrl.hide();
                });
            })

            // hide container upon CLICK outside of the dropdown rectangle region
            $document.on('click', function (e) {
                scope.$evalAsync(function () {
                    _documentClick(e);
                });
            });

            // cleanup on destroy
            scope.$on('$destroy', function () {
                ctrl.empty();
                ctrl.container.remove();
            });

            function _elementKeyDown(e) {
                var key = e.charCode || e.keyCode || 0;

                if (key == KEYCODE.UPARROW) {
                    ctrl.scrollToItem(-1);

                    e.stopPropagation();
                    e.preventDefault();

                    return;
                }

                if (key == KEYCODE.DOWNARROW) {
                    ctrl.scrollToItem(1);

                    e.stopPropagation();
                    e.preventDefault();

                    return;
                }

                if (key == KEYCODE.ENTER) {
                    ctrl.confirm();

                    //prevent postback upon hitting enter
                    e.preventDefault();
                    e.stopPropagation();

                    return;
                }

                if (key == KEYCODE.ESCAPE) {
                    ctrl.hide();

                    e.preventDefault();
                    e.stopPropagation();

                    return;
                }

                // fetch if minimum number of chars are types
                // else hide dropdown
                var term = element.val();
                if (term.length < ctrl.options.minimumChars || term === ctrl.selectedText()) {
                    ctrl.hide();
                    ctrl.empty();

                    return;
                }
                
                // wait few millisecs before calling fetch()
                // this allows checking if user has stopped typing
                var delay = $timeout(function () {
                    // is term unchanged?
                    if (term == element.val()) {
                        ctrl.fetch(term);
                    }

                    //cancel the timeout
                    $timeout.cancel(delay);
                }, 300);
            }

            function _documentKeyDown(e) {
                // if multiple auto complete exist on a page, hide inactive dropdowns
                autoCompleteService.hideIfInactive();
            }

            function _documentClick(e) {
                // if multiple auto complete exist on a page, hide inactive dropdowns
                autoCompleteService.hideIfInactive();

                // hide the active dropdown if user clicks anywhere away from the dropdown list
                var isMouseAwayFromActiveContainer = false;

                try {
                    if (ctrl.instanceId !== ctrl.activeInstanceId()) {
                        return;
                    }

                    var offset = ctrl.container[0].getBoundingClientRect();
                    var awayTolerance = 30;

                    if (e.pageX < offset.left - awayTolerance
                        || e.pageX > offset.left + offset.width + awayTolerance
                        || e.pageY < offset.top - awayTolerance
                        || e.pageY > offset.top + offset.height + awayTolerance) {

                        isMouseAwayFromActiveContainer = true;

                        //check if mouse is over the target
                        offset = ctrl.target[0].getBoundingClientRect();
                        if (e.pageX >= offset.left
                            && e.pageX <= offset.left + offset.width
                            && e.pageY >= offset.top
                            && e.pageY <= offset.top + offset.height) {

                            isMouseAwayFromActiveContainer = false;
                        }

                        if (isMouseAwayFromActiveContainer) {
                            ctrl.hide();
                        }
                    }
                }
                catch (e) { }
            }
        }
    }

    MainCtrl.$inject = ['$q', '$window', '$document', '$sce', '$timeout', '$interpolate', '$templateRequest', '$exceptionHandler', 'autoCompleteService'];
    function MainCtrl($q, $window, $document, $sce, $timeout, $interpolate, $templateRequest, $exceptionHandler, autoCompleteService) {
        var activeInstanceId = 0,
            selectedText,
            selectedValue;

        var that = this;

        this.target = null;
        this.selectedIndex = -1;
        this.renderItems = [];
        this.containerVisible = false;

        this.activeInstanceId = function () {
            return activeInstanceId;
        }

        // hide any open containers other than the active container
        this.hideIfInactive = function () {
            // do not hide container if appended to dropdown parent specified in options
            if (angular.isDefined(that.options.dropdownParent)) {
                return;
            }

            if (that.instanceId !== activeInstanceId) {
                that.hide();
            }
        }

        this.init = function (options) {
            this.options = options;
            this.instanceId = ++instanceCount;
        }

        this.activate = function () {
            activeInstanceId = that.instanceId;
        }

        this.fetch = function (term) {
            // callback
            _safeCallback(that.options.loading);

            $q.when(that.options.data(term),
                function success_callback(result) {
                    // there might some lag when remote web services are involved
                    // to get data. so check if current element value has changed
                    var value = that.textModelCtrl.$viewValue;
                    if (term != value) {
                        return;
                    }

                    that.renderList(result, term);

                    // callback
                    _safeCallback(that.options.loadingComplete);
                },
                function error_callback(error) {
                    that.hide();

                    // callback
                    _safeCallback(that.options.loadingComplete, { error: error });
                });
        }

        this.renderList = function (result) {
            that.empty();

            if (!angular.isDefined(result) || result.length === 0) {
                that.hide();
                return;
            }

            _getRenderFn().then(function(renderFn) { 
                _renderList(renderFn, result); 
            });
        }

        this.show = function () {
            // the show gets called after the items are ready for display
            // the textbox position can change (ex: window resize) when it has focus
            // so reposition the dropdown before it's shown
            _positionDropdown();

            that.containerVisible = true;

            // HACK: this reduces the flickr when the dropdown is being positioned  
            $timeout(function(){
                _positionDropdown();
            }, 1);

            // callback
            _safeCallback(that.options.dropdownShown);
        }

        this.hide = function () {
            if (that.containerVisible === false) {
                return;
            }

            // reset scroll position
            that.elementUL[0].scrollTop = 0;
            that.containerVisible = false;

            // callback
            _safeCallback(that.options.dropdownHidden);
        }

        this.empty = function () {
            that.selectedIndex = -1;
            that.renderItems = [];
        }

        this.scrollToItem = function (offset) {
            if (that.containerVisible === false) {
                return;
            }

            var index = that.selectedIndex + offset;
            var item = that.renderItems[index];
            if (!item) {
                return;
            }

            that.selectItem(index);

            // use jquery.scrollTo plugin if available
            // http://flesler.blogspot.com/2007/10/jqueryscrollto.html
            if (window.jQuery) {  // requires jquery to be loaded
                var li = that.elementUL.find('li[data-index="' + index + '"]');
                if (jQuery.scrollTo) {
                    that.elementUL.scrollTo(li);
                }
                return;
            }

            var li = that.elementUL[0].querySelector('li[data-index="' + index + '"]');
            if (li) {
                // this was causing the page to jump/scroll 
                //    li.scrollIntoView(true);
                that.elementUL[0].scrollTop = li.offsetTop;
            }
        }

        this.selectItem = function (index, confirm) {
            var item = that.renderItems[index];

            if (!angular.isDefined(item)) {
                return;
            }

            that.selectedIndex = index;

            if (confirm === true) {
                // updates textbox and raises callback
                that.confirm();
            }
            else {
                // only updates textbox
                _updateTextBox();
            }
        }

        this.confirm = function () {
            if (that.containerVisible === false) {
                return;
            }

            that.hide();

            selectedValue = _updateTextBox();

            _safeCallback(that.options.itemSelected, { item: selectedValue });
        }

        this.isSelected = function (index) {
            if (index == that.selectedIndex) {
                return that.options.selectedCssClass;
            }
            return '';
        }

        this.selectedText = function () {
            return selectedText;
        }


        function _safeCallback(fn, args) {
            if (!angular.isFunction(fn)) {
                return;
            }

            try {
                return fn.call(that.target, args);
            } catch (e) {
                //ignore
            }
        }

        function _positionDropdown() {
            // no need to position if container has been appended to 
            // parent specified in options
            if (angular.isDefined(that.options.dropdownParent)) {
                return;
            }

            var rect = that.target[0].getBoundingClientRect();

            if (that.options.dropdownWidth == 'auto') {
                // same as textbox width
                that.container.css({ 'width': rect.width + 'px' });
            }
            else {
                that.container.css({ 'width': that.options.dropdownWidth });
            }

            if (that.options.dropdownHeight !== 'auto') {
                that.elementUL.css({ 'height': that.options.dropdownHeight });
            }

            // use the .position() function from jquery.ui if available
            // requires both jquery and jquery-ui to be loaded
            if (window.jQuery && window.jQuery.ui) {
                that.container.position({ my: 'left top', at: 'left bottom', of: that.target, collision: 'none flip' });
                return;
            }
            
            var scrollTop = $document[0].body.scrollTop || $document[0].documentElement.scrollTop || $window.pageYOffset,
                scrollLeft = $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft || $window.pageXOffset;

            that.container.css({ 'left': rect.left + scrollLeft + 'px' });
            that.container.css({ 'top': rect.top + rect.height + scrollTop + 'px' });
        }

        function _updateTextBox() {
            if (that.selectedIndex === -1) {
                return;
            }

            var item = that.renderItems[that.selectedIndex];
            var textboxValue;

            // first check if the data is a simple string type 
            if (angular.isString(item.data)) {
                textboxValue = item.data;
            }
            else {
                textboxValue = item.value;
            }

            // update the textbox 
            _updateModel(textboxValue);

            return item.data;
        }

        function _updateModel(modelValue) {
            // update only if different from current value
            if (modelValue === that.textModelCtrl.$modelValue) {
                return;
            }
            
            that.textModelCtrl.$setViewValue(modelValue);
            that.textModelCtrl.$render();

            selectedText = modelValue;
        }

        function _renderList (renderFn, result) {
            // limit number of items rendered in the dropdown
            var maxItemsToRender = result.length < that.options.maxItemsToRender ? result.length : that.options.maxItemsToRender;
            var itemsToRender = result.slice(0, maxItemsToRender);

            angular.forEach(itemsToRender, function(data, key) {
                //invoke render callback with the data item as parameter
                //this should return an object with a 'label' and 'value' property
                var item = renderFn(data);
                if ( item !== null && angular.isDefined(item) && item.label && item.value ) {
                    // store the data on the renderItem and add to array
                    item.data = data;
                    that.renderItems.push(item);
                }
            });

            that.show();
        }

        function _getRenderFn() {
            // user provided function
            if (angular.isFunction(that.options.renderItem) && that.options.renderItem !== angular.noop) {
                return _getPromise(that.options.renderItem);
            }

            // itemTemplateUrl
            if (that.options.itemTemplateUrl) {
                return _getRenderFn_TemplateUrl();
            }

            // itemTemplate
            var template = that.options.itemTemplate ||  '<span>{{item}}</span>';
            return _getPromise(_renderItem.bind(null, $interpolate(template, false)));
        }

        function _getRenderFn_TemplateUrl() {
            return $templateRequest(that.options.itemTemplateUrl)
                .then(function(content) {
                    // delegate to local function
                    return  _renderItem.bind(null, $interpolate(content, false));
                })
                .catch($exceptionHandler)
                .catch(angular.noop);
        }

        function _renderItem(interpolationFn, data) {
            var value = (angular.isObject(data) && that.options.selectedTextAttr) ? data[that.options.selectedTextAttr] : data;
            return {
                value: value,
                label: $sce.trustAsHtml(interpolationFn({item: data}))
            };
        }

        function _getPromise(value) {
            var deferred = $q.defer();    
            deferred.resolve(value);
            return deferred.promise;
        }
    }

    function autoCompleteService() {
        var directiveCtrls = [];

        this.addDirectiveCtrl = function (ctrl) {
            if (ctrl) {
                directiveCtrls.push(ctrl);
            }
        }

        this.hideIfInactive = function (ctrl) {
            angular.forEach(directiveCtrls, function (value) {
                value.hideIfInactive();
            });
        }

        this.defaultOptionsDoc = function () {
            return defaultOptionsDoc;
        }
    }

    var KEYCODE = {
        ENTER: 13,
        ESCAPE: 27,
        UPARROW: 38,
        DOWNARROW: 40
    };

    var instanceCount = 0;

    var defaultOptions = {
        containerCssClass: '',
        selectedCssClass: 'auto-complete-item-selected',
        minimumChars: 1,
        maxItemsToRender: 20,
        //
        dropdownWidth: 'auto',
        dropdownHeight: 'auto',
        dropdownParent: undefined,
        //
        selectedTextAttr: undefined,
        itemTemplate: undefined,
        itemTemplateUrl: undefined,
        //
        loading: angular.noop,
        data: angular.noop,
        loadingComplete: angular.noop,
        renderItem: angular.noop,
        itemSelected: angular.noop,
        dropdownShown: angular.noop,
        dropdownHidden: angular.noop
    };

    var defaultOptionsDoc = {
        containerCssClass: { def: 'undefined', doc: 'CSS class applied to the dropdown container' },
        selectedCssClass: { def: 'auto-complete-item-selected', doc: 'CSS class applied to the selected list element' },
        minimumChars: { def: '1', doc: 'Minimum number of characters required to display the dropdown.' },
        maxItemsToRender: { def: '20', doc: 'Maximum number of items to render in the list.' },
        dropdownWidth: { def: 'auto', doc: 'Width in "px" of the dropddown list.' },
        dropdownHeight: { def: 'auto', doc: 'Height in "px" of the dropddown list.' },
        dropdownParent: { def: 'undefined', doc: 'a jQuery object to append the dropddown list.' },
        //
        selectedTextAttr: { def: 'undefined', doc: 'If the data for the dropdown is a collection of objects, the value of this attribute will be used to update the input text element.' },
        itemTemplate: { def: 'undefined', doc: 'A template for the dropddown list item. For example "<div>{{item.lastName}} - {{item.jobTitle}}</div>".' },
        itemTemplateUrl: { def: 'undefined', doc: 'This is similar to template but the template is loaded from the specified URL, asynchronously.' },
        //
        loading: { def: 'noop', doc: 'Callback before getting the data for the dropdown.' },
        data: { def: 'noop', doc: 'Callback for data for the dropdown. Must return a promise' },
        loadingComplete: { def: 'noop', doc: 'Callback after the items are rendered in the dropdown.' },
        renderItem: { def: 'noop', doc: 'Callback for custom rendering a list item. This is called for each item in the dropdown. It must return an object literal with "value" and "label" properties, where label is the safe html for display and value is the text for the textbox' },
        itemSelected: { def: 'noop', doc: 'Callback after an item is selected from the dropdown.' },
        dropdownShown: { def: 'noop', doc: 'Callback after the dropdown is hidden.' },
        dropdownHidden: { def: 'noop', doc: 'Callback after the dropdown is shown.' }
    };

})();

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-baidu-map/dist/angular-baidu-map.js":[function(require,module,exports){
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("angular"));
	else if(typeof define === 'function' && define.amd)
		define(["angular"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("angular")) : factory(root["angular"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ngBaiduMap = undefined;
	
	var _angular = __webpack_require__(1);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _defaults = __webpack_require__(2);
	
	var _validator = __webpack_require__(3);
	
	var _directiveDef = __webpack_require__(4);
	
	var _baiduScriptLoader = __webpack_require__(5);
	
	var _offline = __webpack_require__(6);
	
	var _map = __webpack_require__(7);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ngBaiduMap = exports.ngBaiduMap = function () {
	    var name = 'baiduMap';
	
	    (0, _directiveDef.def)(name, {
	        restrict: 'E',
	        scope: {
	            options: '=',
	            ak: '@',
	            offline: '=',
	            onMapLoaded: '&'
	        },
	        link: function link($scope, element, attrs) {
	
	            var opts = _angular2.default.extend({}, _defaults.defaultOpts, $scope.options);
	            var offlineOpts = _angular2.default.extend({}, _defaults.defaultOfflineOpts, $scope.offline);
	            $scope.offlineWords = offlineOpts.txt;
	            (0, _validator.validator)($scope.ak, 'ak must not be empty');
	            (0, _validator.validator)(opts.center, 'options.center must be set');
	            (0, _validator.validator)(opts.center.longitude, 'options.center.longitude must be set');
	            (0, _validator.validator)(opts.center.latitude, 'options.center.latitude must be set');
	            (0, _validator.validator)(opts.city, 'options.city must be set');
	
	            (0, _baiduScriptLoader.loader)($scope.ak, offlineOpts, function () {
	
	                var map = (0, _map.createInstance)(opts, element);
	
	                $scope.onMapLoaded({ map: map });
	
	                //create markers
	                var previousMarkers = [];
	
	                (0, _map.redrawMarkers)(map, previousMarkers, opts);
	
	                $scope.$watch('options.center', function (newValue, oldValue) {
	
	                    opts = $scope.options;
	                    map.centerAndZoom(new BMap.Point(opts.center.longitude, opts.center.latitude), opts.zoom);
	                    (0, _map.redrawMarkers)(map, previousMarkers, opts);
	                }, true);
	
	                $scope.$watch('options.markers', function (newValue, oldValue) {
	                    (0, _map.redrawMarkers)(map, previousMarkers, opts);
	                }, true);
	            });
	
	            $scope.divStyle = _offline.divStyle;
	            $scope.labelStyle = _offline.labelStyle;
	
	            setTimeout(function () {
	                var $label = document.querySelector('baidu-map div label');
	                $scope.labelStyle.marginTop = $label.clientHeight / -2 + 'px';
	                $scope.labelStyle.marginLeft = $label.clientWidth / -2 + 'px';
	                $scope.$apply();
	            });
	        },
	        template: '<div ng-style="divStyle"><label ng-style="labelStyle">{{ offlineWords }}</label></div>'
	    });
	
	    return name;
	}();

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var defaultOpts = exports.defaultOpts = {
	    navCtrl: true,
	    scaleCtrl: true,
	    overviewCtrl: true,
	    enableScrollWheelZoom: true,
	    zoom: 10
	};
	
	var defaultOfflineOpts = exports.defaultOfflineOpts = {
	    retryInterval: 30000,
	    txt: 'OFFLINE'
	};

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var validator = exports.validator = function validator(prop, desc) {
	    if (!prop) {
	        throw new Error(desc);
	    }
	};

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.def = undefined;
	
	var _angular = __webpack_require__(1);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var def = exports.def = function def(name, ddo) {
	    _angular2.default.module(name, []).directive(name, [function () {
	        return ddo;
	    }]);
	};

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var loader = exports.loader = function loader(ak, offlineOpts, callback) {
	    var MAP_URL = '//api.map.baidu.com/api?v=2.0&ak=' + ak + '&callback=baidumapinit&s=' + (location.protocol === 'https:' ? 1 : 0);
	
	    var baiduMap = window.baiduMap;
	    if (baiduMap && baiduMap.status === 'loading') {
	        return baiduMap.callbacks.push(callback);
	    }
	
	    if (baiduMap && baiduMap.status === 'loaded') {
	        return callback();
	    }
	
	    window.baiduMap = { status: 'loading', callbacks: [] };
	    window.baidumapinit = function () {
	        window.baiduMap.status = 'loaded';
	        callback();
	        window.baiduMap.callbacks.forEach(function (cb) {
	            return cb();
	        });
	        window.baiduMap.callbacks = [];
	    };
	
	    var createTag = function createTag() {
	        var script = document.createElement('script');
	        script.type = 'text/javascript';
	        script.src = MAP_URL;
	        script.onerror = function () {
	
	            Array.prototype.slice.call(document.querySelectorAll('baidu-map div')).forEach(function (node) {
	                node.style.opacity = 1;
	            });
	            document.body.removeChild(script);
	            setTimeout(createTag, offlineOpts.retryInterval);
	        };
	        document.body.appendChild(script);
	    };
	
	    createTag();
	};

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var divStyle = exports.divStyle = {
	    width: '100%',
	    height: '100%',
	    backgroundColor: '#E6E6E6',
	    position: 'relative',
	    opacity: 0
	};
	
	var labelStyle = exports.labelStyle = {
	    fontSize: '30px',
	    position: 'absolute',
	    top: '50%',
	    marginTop: 0,
	    left: '50%',
	    marginLeft: 0
	};

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var createInstance = exports.createInstance = function createInstance(opts, element) {
	    // create map instance
	    var map = new BMap.Map(element[0]);
	
	    // init map, set central location and zoom level
	    map.centerAndZoom(new BMap.Point(opts.center.longitude, opts.center.latitude), opts.zoom);
	    if (opts.navCtrl) {
	        // add navigation control
	        map.addControl(new BMap.NavigationControl());
	    }
	    if (opts.scaleCtrl) {
	        // add scale control
	        map.addControl(new BMap.ScaleControl());
	    }
	    if (opts.overviewCtrl) {
	        //add overview map control
	        map.addControl(new BMap.OverviewMapControl());
	    }
	    if (opts.enableScrollWheelZoom) {
	        //enable scroll wheel zoom
	        map.enableScrollWheelZoom();
	    }
	
	    // set the city name
	    map.setCurrentCity(opts.city);
	    return map;
	};
	
	var createMarker = exports.createMarker = function createMarker(marker, pt) {
	    if (marker.icon) {
	        var icon = new BMap.Icon(marker.icon, new BMap.Size(marker.width, marker.height));
	        return new BMap.Marker(pt, { icon: icon });
	    }
	    return new BMap.Marker(pt);
	};
	
	var redrawMarkers = exports.redrawMarkers = function redrawMarkers(map, previousMarkers, opts) {
	
	    previousMarkers.forEach(function (_ref) {
	        var marker = _ref.marker;
	        var listener = _ref.listener;
	
	        marker.removeEventListener('click', listener);
	        map.removeOverlay(marker);
	    });
	
	    previousMarkers.length = 0;
	
	    if (!opts.markers) {
	        return;
	    }
	
	    opts.markers.forEach(function (marker) {
	
	        var marker2 = createMarker(marker, new BMap.Point(marker.longitude, marker.latitude));
	
	        // add marker to the map
	        map.addOverlay(marker2);
	        var previousMarker = { marker: marker2, listener: null };
	        previousMarkers.push(previousMarker);
	
	        if (!marker.title && !marker.content) {
	            return;
	        }
	        var msg = '<p>' + (marker.title || '') + '</p><p>' + (marker.content || '') + '</p>';
	        var infoWindow2 = new BMap.InfoWindow(msg, {
	            enableMessage: !!marker.enableMessage
	        });
	        previousMarker.listener = function () {
	            this.openInfoWindow(infoWindow2);
	        };
	        marker2.addEventListener('click', previousMarker.listener);
	    });
	};

/***/ }
/******/ ])
});
;
},{"angular":"angular"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-block-ui/dist/angular-block-ui.js":[function(require,module,exports){
/*!
   angular-block-ui v0.2.1
   (c) 2015 (null) McNull https://github.com/McNull/angular-block-ui
   License: MIT
*/
(function(angular) {

var blkUI = angular.module('blockUI', []);

blkUI.config(["$provide", "$httpProvider", function ($provide, $httpProvider) {

  $provide.decorator('$exceptionHandler', ['$delegate', '$injector',
    function ($delegate, $injector) {
      var blockUI, blockUIConfig;

      return function (exception, cause) {

        blockUIConfig = blockUIConfig || $injector.get('blockUIConfig');

        if (blockUIConfig.resetOnException) {
          try {
            blockUI = blockUI || $injector.get('blockUI');
            blockUI.instances.reset();
          } catch (ex) {
            console.log('$exceptionHandler', exception);
          }
        }

        $delegate(exception, cause);
      };
    }
  ]);

  $httpProvider.interceptors.push('blockUIHttpInterceptor');
}]);

blkUI.run(["$document", "blockUIConfig", "$templateCache", function ($document, blockUIConfig, $templateCache) {
  if (blockUIConfig.autoInjectBodyBlock) {
    $document.find('body').attr('block-ui', 'main');
  }

  if (blockUIConfig.template) {

    // Swap the builtin template with the custom template.
    // Create a magic cache key and place the template in the cache.

    blockUIConfig.templateUrl = '$$block-ui-template$$';
    $templateCache.put(blockUIConfig.templateUrl, blockUIConfig.template);
  }
}]);

function moduleLoaded(name) {
  try {
    angular.module(name);
  } catch(ex) {
    return false;
  }
  return true;
}
blkUI.config(["$provide", function ($provide) {
  $provide.decorator('$location', decorateLocation);
}]);

var decorateLocation = [
  '$delegate', 'blockUI', 'blockUIConfig',
  function ($delegate, blockUI, blockUIConfig) {

    if (blockUIConfig.blockBrowserNavigation) {

      blockUI.$_blockLocationChange = true;

      var overrides = ['url', 'path', 'search', 'hash', 'state'];

      function hook(f) {
        var s = $delegate[f];
        $delegate[f] = function () {

          //        console.log(f, Date.now(), arguments);

          var result = s.apply($delegate, arguments);

          // The call was a setter if the $location service is returned.

          if (result === $delegate) {

            // Mark the mainblock ui to allow the location change.

            blockUI.$_blockLocationChange = false;
          }

          return result;
        };
      }

      angular.forEach(overrides, hook);

    }

    return $delegate;
}];

// Called from block-ui-directive for the 'main' instance.

function blockNavigation($scope, mainBlockUI, blockUIConfig) {

  if (blockUIConfig.blockBrowserNavigation) {

    function registerLocationChange() {

      $scope.$on('$locationChangeStart', function (event) {

        //        console.log('$locationChangeStart', mainBlockUI.$_blockLocationChange + ' ' + mainBlockUI.state().blockCount);

        if (mainBlockUI.$_blockLocationChange && mainBlockUI.state().blockCount > 0) {
          event.preventDefault();
        }
      });

      $scope.$on('$locationChangeSuccess', function () {
        mainBlockUI.$_blockLocationChange = blockUIConfig.blockBrowserNavigation;

        //        console.log('$locationChangeSuccess', mainBlockUI.$_blockLocationChange + ' ' + mainBlockUI.state().blockCount);
      });
    }

    if (moduleLoaded('ngRoute')) {

      // After the initial content has been loaded we'll spy on any location
      // changes and discard them when needed.

      var fn = $scope.$on('$viewContentLoaded', function () {

        // Unhook the view loaded and hook a function that will prevent
        // location changes while the block is active.

        fn();
        registerLocationChange();

      });

    } else {
      registerLocationChange();
    }

  }
}
blkUI.directive('blockUiContainer', ["blockUIConfig", "blockUiContainerLinkFn", function (blockUIConfig, blockUiContainerLinkFn) {
  return {
    scope: true,
    restrict: 'A',
    templateUrl: blockUIConfig.templateUrl,
    compile: function($element) {
      return blockUiContainerLinkFn;
    }
  };
}]).factory('blockUiContainerLinkFn', ["blockUI", "blockUIUtils", function (blockUI, blockUIUtils) {

  return function ($scope, $element, $attrs) {

    var srvInstance = $element.inheritedData('block-ui');

    if (!srvInstance) {
      throw new Error('No parent block-ui service instance located.');
    }

    // Expose the state on the scope

    $scope.state = srvInstance.state();

//    $scope.$watch('state.blocking', function(value) {
//      $element.toggleClass('block-ui-visible', !!value);
//    });
//
//    $scope.$watch('state.blockCount > 0', function(value) {
//      $element.toggleClass('block-ui-active', !!value);
//    });
  };
}]);
blkUI.directive('blockUi', ["blockUiCompileFn", function (blockUiCompileFn) {

  return {
    scope: true,
    restrict: 'A',
    compile: blockUiCompileFn
  };

}]).factory('blockUiCompileFn', ["blockUiPreLinkFn", function (blockUiPreLinkFn) {

  return function ($element, $attrs) {

    // Class should be added here to prevent an animation delay error.

    $element.append('<div block-ui-container class="block-ui-container"></div>');

    return {
      pre: blockUiPreLinkFn
    };

  };

}]).factory('blockUiPreLinkFn', ["blockUI", "blockUIUtils", "blockUIConfig", function (blockUI, blockUIUtils, blockUIConfig) {

  return function ($scope, $element, $attrs) {

    // If the element does not have the class "block-ui" set, we set the
    // default css classes from the config.

    if (!$element.hasClass('block-ui')) {
      $element.addClass(blockUIConfig.cssClass);
    }

    // Expose the blockUiMessageClass attribute value on the scope

    $attrs.$observe('blockUiMessageClass', function (value) {
      $scope.$_blockUiMessageClass = value;
    });

    // Create the blockUI instance
    // Prefix underscore to prevent integers:
    // https://github.com/McNull/angular-block-ui/pull/8

    var instanceId = $attrs.blockUi || '_' + $scope.$id;
    var srvInstance = blockUI.instances.get(instanceId);

    // If this is the main (topmost) block element we'll also need to block any
    // location changes while the block is active.

    if (instanceId === 'main') {
      blockNavigation($scope, srvInstance, blockUIConfig);
    } else {
      // Locate the parent blockUI instance
      var parentInstance = $element.inheritedData('block-ui');

      if (parentInstance) {
        // TODO: assert if parent is already set to something else
        srvInstance._parent = parentInstance;
      }
    }

    // Ensure the instance is released when the scope is destroyed

    $scope.$on('$destroy', function () {
      srvInstance.release();
    });

    // Increase the reference count

    srvInstance.addRef();

    // Expose the state on the scope

    $scope.$_blockUiState = srvInstance.state();

    $scope.$watch('$_blockUiState.blocking', function (value) {
      // Set the aria-busy attribute if needed
      $element.attr('aria-busy', !!value);
      $element.toggleClass('block-ui-visible', !!value);
    });

    $scope.$watch('$_blockUiState.blockCount > 0', function (value) {
      $element.toggleClass('block-ui-active', !!value);
    });

    // If a pattern is provided assign it to the state

    var pattern = $attrs.blockUiPattern;

    if (pattern) {
      var regExp = blockUIUtils.buildRegExp(pattern);
      srvInstance.pattern(regExp);
    }

    // Store a reference to the service instance on the element

    $element.data('block-ui', srvInstance);

  };

}]);
//.factory('blockUiPostLinkFn', function(blockUIUtils) {
//
//  return function($scope, $element, $attrs) {
//
//    var $message;
//
//    $attrs.$observe('blockUiMessageClass', function(value) {
//
//      $message = $message || blockUIUtils.findElement($element, function($e) {
//        return $e.hasClass('block-ui-message');
//      });
//
//      $message.addClass(value);
//
//    });
//  };
//
//});
blkUI.constant('blockUIConfig', {
    templateUrl: 'angular-block-ui/angular-block-ui.ng.html',
    delay: 250,
    message: "Loading ...",
    autoBlock: true,
    resetOnException: true,
    requestFilter: angular.noop,
    autoInjectBodyBlock: true,
    cssClass: 'block-ui block-ui-anim-fade',
    blockBrowserNavigation: false
});


blkUI.factory('blockUIHttpInterceptor', ["$q", "$injector", "blockUIConfig", "$templateCache", function($q, $injector, blockUIConfig, $templateCache) {

  var blockUI;

  function injectBlockUI() {
    blockUI = blockUI || $injector.get('blockUI');
  }

  function stopBlockUI(config) {
    if (blockUIConfig.autoBlock && (config && !config.$_noBlock && config.$_blocks)) {
      injectBlockUI();
      config.$_blocks.stop();
    }
  }

  function error(rejection) {

    try {
      stopBlockUI(rejection.config);
    } catch(ex) {
      console.log('httpRequestError', ex);
    }

    return $q.reject(rejection);
  }

  return {
    request: function(config) {

      // Only block when autoBlock is enabled ...
      // ... and the request doesn't match a cached template.

      if (blockUIConfig.autoBlock &&
        !(config.method == 'GET' && $templateCache.get(config.url))) {

        // Don't block excluded requests

        var result = blockUIConfig.requestFilter(config);

        if (result === false) {
          // Tag the config so we don't unblock this request
          config.$_noBlock = true;
        } else {

          injectBlockUI();

          config.$_blocks = blockUI.instances.locate(config);
          config.$_blocks.start(result);
        }
      }

      return config;
    },

    requestError: error,

    response: function(response) {

      // If the connection to the website goes down the response interceptor gets and error with "cannot read property config of null".
      // https://github.com/McNull/angular-block-ui/issues/53

      if(response) {
        stopBlockUI(response.config);
      }

      return response;
    },

    responseError: error
  };

}]);

blkUI.factory('blockUI', ["blockUIConfig", "$timeout", "blockUIUtils", "$document", function(blockUIConfig, $timeout, blockUIUtils, $document) {

  var $body = $document.find('body');
  
  // These properties are not allowed to be specified in the start method.
  var reservedStateProperties = ['id', 'blockCount', 'blocking'];
  
  function BlockUI(id) {

    var self = this;

    var state = {
      id: id,
      blockCount: 0,
      message: blockUIConfig.message,
      blocking: false
    }, startPromise, doneCallbacks = [];

    this._id = id;

    this._refs = 0;

    this.start = function(messageOrOptions) {
      
      messageOrOptions = messageOrOptions || {};
      
      if(angular.isString(messageOrOptions)) {
        messageOrOptions = {
          message: messageOrOptions
        };
      } else {
        angular.forEach(reservedStateProperties, function(x) {
          if(messageOrOptions[x]) {
            throw new Error('The property ' + x + ' is reserved for the block state.');
          }
        });
      } 
      
      angular.extend(state, messageOrOptions);
      
      if(state.blockCount > 0) {
        state.message = messageOrOptions.message || state.message || blockUIConfig.message;
      } else {
        state.message = messageOrOptions.message || blockUIConfig.message;
      }
      
      // if(state.blockCount > 0) {
      //   messageOrOptions = messageOrOptions || state.message || blockUIConfig.message;
      // } else {
      //   messageOrOptions = messageOrOptions || blockUIConfig.message;
      // }

      // state.message = messageOrOptions;

      state.blockCount++;

      // Check if the focused element is part of the block scope

      var $ae = angular.element($document[0].activeElement);

      if($ae.length && blockUIUtils.isElementInBlockScope($ae, self)) {

        // Let the active element lose focus and store a reference 
        // to restore focus when we're done (reset)

        self._restoreFocus = $ae[0];

        // https://github.com/McNull/angular-block-ui/issues/13
        // http://stackoverflow.com/questions/22698058/apply-already-in-progress-error-when-using-typeahead-plugin-found-to-be-relate
        // Queue the blur after any ng-blur expression.

        $timeout(function() {
          // Ensure we still need to blur
          // Don't restore if active element is body, since this causes IE to switch windows (see http://tjvantoll.com/2013/08/30/bugs-with-document-activeelement-in-internet-explorer/)
          if (self._restoreFocus && self._restoreFocus !== $body[0]) {
            self._restoreFocus.blur();
          }
        });
      }

      if (!startPromise && blockUIConfig.delay !== 0) {
        startPromise = $timeout(block, blockUIConfig.delay);
      } else if (blockUIConfig.delay === 0) {
        block();
      }

      function block () {
        startPromise = null;
        state.blocking = true;
      }
    };

    this._cancelStartTimeout = function() {
      if (startPromise) {
        $timeout.cancel(startPromise);
        startPromise = null;
      }
    };

    this.stop = function() {
      state.blockCount = Math.max(0, --state.blockCount);

      if (state.blockCount === 0) {
        self.reset(true);
      }
    };

    this.isBlocking = function () {
        return state.blocking;
    };

    this.message = function(value) {
      state.message = value;
    };

    this.pattern = function(regexp) {
      if (regexp !== undefined) {
        self._pattern = regexp;
      }

      return self._pattern;
    };

    this.reset = function(executeCallbacks) {
      
      self._cancelStartTimeout();
      state.blockCount = 0;
      state.blocking = false;

      // Restore the focus to the element that was active
      // before the block start, but not if the user has 
      // focused something else while the block was active.

      if(self._restoreFocus && 
         (!$document[0].activeElement || $document[0].activeElement === $body[0])) {
        
        //IE8 will throw if element for setting focus is invisible
        try {
          self._restoreFocus.focus();
        } catch(e1) {
          (function () {
              var elementToFocus = self._restoreFocus;
              $timeout(function() { 
                if(elementToFocus) { 
                  try { 
                    elementToFocus.focus(); 
                  } catch(e2) { }
              } 
            },100);
          })();
        }
        
        self._restoreFocus = null;
      }
      
      try {
        if (executeCallbacks) {
          angular.forEach(doneCallbacks, function(cb) {
            cb();
          });
        }
      } finally {
        doneCallbacks.length = 0;
      }
    };

    this.done = function(fn) {
      doneCallbacks.push(fn);
    };

    this.state = function() {
      return state;
    };

    this.addRef = function() {
      self._refs += 1;
    };

    this.release = function() {
      if(--self._refs <= 0) {
        mainBlock.instances._destroy(self);
      }
    };
  }

  var instances = [];

  instances.get = function(id) {

    if(!isNaN(id)) {
      throw new Error('BlockUI id cannot be a number');
    }

    var instance = instances[id];

    if(!instance) {
      // TODO: ensure no array instance trashing [xxx] -- current workaround: '_' + $scope.$id
      instance = instances[id] = new BlockUI(id);
      instances.push(instance);
    }

    return instance;
  };

  instances._destroy = function(idOrInstance) {
    if (angular.isString(idOrInstance)) {
      idOrInstance = instances[idOrInstance];
    }

    if (idOrInstance) {
      idOrInstance.reset();

      var i = blockUIUtils.indexOf(instances, idOrInstance);
      instances.splice(i, 1);

      delete instances[idOrInstance.state().id];
    }
  };
  
  instances.locate = function(request) {

    var result = [];

    // Add function wrappers that will be executed on every item
    // in the array.
    
    blockUIUtils.forEachFnHook(result, 'start');
    blockUIUtils.forEachFnHook(result, 'stop');

    var i = instances.length;

    while(i--) {
      var instance = instances[i];
      var pattern = instance._pattern;

      if(pattern && pattern.test(request.url)) {
        result.push(instance);
      }
    }

    if(result.length === 0) {
      result.push(mainBlock);
    }

    return result;
  };

  // Propagate the reset to all instances

  blockUIUtils.forEachFnHook(instances, 'reset');

  var mainBlock = instances.get('main');

  mainBlock.addRef();
  mainBlock.instances = instances;

  return mainBlock;
}]);


blkUI.factory('blockUIUtils', function() {

  var $ = angular.element;

  var utils = {
    buildRegExp: function(pattern) {
      var match = pattern.match(/^\/(.*)\/([gim]*)$/), regExp;

      if(match) {
        regExp = new RegExp(match[1], match[2]);
      } else {
        throw Error('Incorrect regular expression format: ' + pattern);
      }

      return regExp;
    },
    forEachFn: function(arr, fnName, args) {
      var i = arr.length;
      while(i--) {
        var t = arr[i];
        t[fnName].apply(t, args);
      }
    },
    forEachFnHook: function(arr, fnName) {
      arr[fnName] = function() {
        utils.forEachFn(this, fnName, arguments);
      }
    },
    isElementInBlockScope: function($element, blockScope) {
      var c = $element.inheritedData('block-ui');

      while(c) {
        if(c === blockScope) {
          return true;
        }

        c = c._parent;
      }

      return false;
    },
    findElement: function ($element, predicateFn, traverse) {
      var ret = null;

      if (predicateFn($element)) {
        ret = $element;
      } else {

        var $elements;

        if (traverse) {
          $elements = $element.parent();
        } else {
          $elements = $element.children();
        }

        var i = $elements.length;
        while (!ret && i--) {
          ret = utils.findElement($($elements[i]), predicateFn, traverse);
        }
      }

      return ret;
    },
    indexOf: function(arr, obj, start) {
//      if(Array.prototype.indexOf) {
//        return arr.indexOf(obj, start);
//      }

      for (var i = (start || 0), j = arr.length; i < j; i++) {
        if (arr[i] === obj) {
          return i;
        }
      }

      return -1;
    }
  };

  return utils;

});
// Automatically generated.
// This file is already embedded in your main javascript output, there's no need to include this file
// manually in the index.html. This file is only here for your debugging pleasures.
angular.module('blockUI').run(['$templateCache', function($templateCache){
  $templateCache.put('angular-block-ui/angular-block-ui.ng.html', '<div class=\"block-ui-overlay\"></div><div class=\"block-ui-message-container\" aria-live=\"assertive\" aria-atomic=\"true\"><div class=\"block-ui-message\" ng-class=\"$_blockUiMessageClass\">{{ state.message }}</div></div>');
}]);
})(angular);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-datepicker/dist/angular-datepicker.js":[function(require,module,exports){
(function (global, factory) {'use strict';var fnc;fnc = (typeof exports === 'object' && typeof module !== 'undefined') ? module.exports = factory(require('angular'), require('moment')) :(typeof define === 'function' && define.amd) ? define(['angular', 'moment'], factory) :factory(global.angular, global.moment);}(this, function (angular, moment) {
//(function (global, factory) {
//  'use strict';
//  var fnc;
//  fnc = (typeof exports === 'object' && typeof module !== 'undefined') ? module.exports = factory(require('angular'), require('moment')) :
//        (typeof define === 'function' && define.amd) ? define(['angular', 'moment'], factory) :
//        factory(global.angular, global.moment);
//}(this, function (angular, moment) {
var Module = angular.module('datePicker', []);

  Module.constant('datePickerConfig', {
    template: 'templates/datepicker.html',
    view: 'month',
    views: ['year', 'month', 'date', 'hours', 'minutes'],
    momentNames: {
      year: 'year',
      month: 'month',
      date: 'day',
      hours: 'hours',
      minutes: 'minutes',
    },
    viewConfig: {
      year: ['years', 'isSameYear'],
      month: ['months', 'isSameMonth'],
      hours: ['hours', 'isSameHour'],
      minutes: ['minutes', 'isSameMinutes'],
    },
    step: 5
  });

//Moment format filter.
  Module.filter('mFormat', function () {
    return function (m, format, tz) {
      if (!(moment.isMoment(m))) {
        return moment(m).format(format);
      }
      return tz ? moment.tz(m, tz).format(format) : m.format(format);
    };
  });

  Module.directive('datePicker', ['datePickerConfig', 'datePickerUtils', function datePickerDirective(datePickerConfig, datePickerUtils) {

    //noinspection JSUnusedLocalSymbols
    return {
      // this is a bug ?
      require: '?ngModel',
      template: '<div ng-include="template"></div>',
      scope: {
        model: '=datePicker',
        after: '=?',
        before: '=?'
      },
      link: function (scope, element, attrs, ngModel) {
        function prepareViews() {
          scope.views = datePickerConfig.views.concat();
          scope.view = attrs.view || datePickerConfig.view;

          scope.views = scope.views.slice(
            scope.views.indexOf(attrs.maxView || 'year'),
            scope.views.indexOf(attrs.minView || 'minutes') + 1
          );

          if (scope.views.length === 1 || scope.views.indexOf(scope.view) === -1) {
            scope.view = scope.views[0];
          }
        }

        function getDate(name) {
          return datePickerUtils.getDate(scope, attrs, name);
        }

        var arrowClick = false,
          tz = scope.tz = attrs.timezone,
          createMoment = datePickerUtils.createMoment,
          eventIsForPicker = datePickerUtils.eventIsForPicker,
          step = parseInt(attrs.step || datePickerConfig.step, 10),
          partial = !!attrs.partial,
          minDate = getDate('minDate'),
          maxDate = getDate('maxDate'),

          /**
           * [指令内包含date-picker指令时，通过element[0].id并不能获取到动态id]
           * @type {[type]}
           */
          // pickerID = element[0].id,
          pickerID = scope.$parent.id || element[0].id,

          now = scope.now = createMoment(),
          selected = scope.date = createMoment(scope.model || now),
          autoclose = attrs.autoClose === 'true',
        // Either gets the 1st day from the attributes, or asks moment.js to give it to us as it is localized.
          firstDay = attrs.firstDay && attrs.firstDay >= 0 && attrs.firstDay <= 6 ? parseInt(attrs.firstDay, 10) : moment().weekday(0).day(),
          setDate,
          prepareViewData,
          isSame,
          clipDate,
          isNow,
          inValidRange;

        datePickerUtils.setParams(tz, firstDay);

        if (!scope.model) {
          selected.minute(Math.ceil(selected.minute() / step) * step).second(0);
        }

        scope.template = attrs.template || datePickerConfig.template;

        scope.watchDirectChanges = attrs.watchDirectChanges !== undefined;
        scope.callbackOnSetDate = attrs.dateChange ? datePickerUtils.findFunction(scope, attrs.dateChange) : undefined;

        prepareViews();

        scope.setView = function (nextView) {
          if (scope.views.indexOf(nextView) !== -1) {
            scope.view = nextView;
          }
        };

        scope.selectDate = function (date) {
          if (attrs.disabled) {
            return false;
          }
          if (isSame(scope.date, date)) {
            date = scope.date;
          }
          date = clipDate(date);
          if (!date) {
            return false;
          }
          scope.date = date;

          var nextView = scope.views[scope.views.indexOf(scope.view) + 1];
          if ((!nextView || partial) || scope.model) {
            setDate(date);
          }

          if (nextView) {
            scope.setView(nextView);
          } else if (autoclose) {
            element.addClass('hidden');
            scope.$emit('hidePicker');
          } else {
            prepareViewData();
          }
        };

        setDate = function (date) {
          if (date) {
            scope.model = date;
            if (ngModel) {
              ngModel.$setViewValue(date);
            }
          }
          scope.$emit('setDate', scope.model, scope.view);

          //This is duplicated in the new functionality.
          if (scope.callbackOnSetDate) {
            scope.callbackOnSetDate(attrs.datePicker, scope.date);
          }
        };

        function update() {
          var view = scope.view;
          datePickerUtils.setParams(tz, firstDay);

          if (scope.model && !arrowClick) {
            scope.date = createMoment(scope.model);
            arrowClick = false;
          }

          var date = scope.date;

          switch (view) {
            case 'year':
              scope.years = datePickerUtils.getVisibleYears(date);
              break;
            case 'month':
              scope.months = datePickerUtils.getVisibleMonths(date);
              break;
            case 'date':
              scope.weekdays = scope.weekdays || datePickerUtils.getDaysOfWeek();
              scope.weeks = datePickerUtils.getVisibleWeeks(date);
              break;
            case 'hours':
              scope.hours = datePickerUtils.getVisibleHours(date);
              break;
            case 'minutes':
              scope.minutes = datePickerUtils.getVisibleMinutes(date, step);
              break;
          }

          prepareViewData();
        }

        function watch() {
          if (scope.view !== 'date') {
            return scope.view;
          }
          return scope.date ? scope.date.month() : null;
        }

        scope.$watch(watch, update);

        if (scope.watchDirectChanges) {
          scope.$watch('model', function () {
            arrowClick = false;
            update();
          });
        }

        prepareViewData = function () {
          var view = scope.view,
            date = scope.date,
            classes = [], classList = '',
            i, j;

          datePickerUtils.setParams(tz, firstDay);

          if (view === 'date') {
            var weeks = scope.weeks, week;
            for (i = 0; i < weeks.length; i++) {
              week = weeks[i];
              classes.push([]);
              for (j = 0; j < week.length; j++) {
                classList = '';
                if (datePickerUtils.isSameDay(date, week[j])) {
                  classList += 'active';
                }
                if (isNow(week[j], view)) {
                  classList += ' now';
                }
                //if (week[j].month() !== date.month()) classList += ' disabled';
                if (week[j].month() !== date.month() || !inValidRange(week[j])) {
                  classList += ' disabled';
                }
                classes[i].push(classList);
              }
            }
          } else {
            var params = datePickerConfig.viewConfig[view],
              dates = scope[params[0]],
              compareFunc = params[1];

            for (i = 0; i < dates.length; i++) {
              classList = '';
              if (datePickerUtils[compareFunc](date, dates[i])) {
                classList += 'active';
              }
              if (isNow(dates[i], view)) {
                classList += ' now';
              }
              if (!inValidRange(dates[i])) {
                classList += ' disabled';
              }
              classes.push(classList);
            }
          }
          scope.classes = classes;
        };

        scope.next = function (delta) {
          var date = moment(scope.date);
          delta = delta || 1;
          switch (scope.view) {
            case 'year':
            /*falls through*/
            case 'month':
              date.year(date.year() + delta);
              break;
            case 'date':
              date.month(date.month() + delta);
              break;
            case 'hours':
            /*falls through*/
            case 'minutes':
              date.hours(date.hours() + delta);
              break;
          }
          date = clipDate(date);
          if (date) {
            scope.date = date;
            setDate(date);
            arrowClick = true;
            update();
          }
        };

        inValidRange = function (date) {
          var valid = true;
          if (minDate && minDate.isAfter(date)) {
            valid = isSame(minDate, date);
          }
          if (maxDate && maxDate.isBefore(date)) {
            valid &= isSame(maxDate, date);
          }
          return valid;
        };

        isSame = function (date1, date2) {
          return date1.isSame(date2, datePickerConfig.momentNames[scope.view]) ? true : false;
        };

        clipDate = function (date) {
          if (minDate && minDate.isAfter(date)) {
            return minDate;
          } else if (maxDate && maxDate.isBefore(date)) {
            return maxDate;
          } else {
            return date;
          }
        };

        isNow = function (date, view) {
          var is = true;

          switch (view) {
            case 'minutes':
              is &= ~~(now.minutes() / step) === ~~(date.minutes() / step);
            /* falls through */
            case 'hours':
              is &= now.hours() === date.hours();
            /* falls through */
            case 'date':
              is &= now.date() === date.date();
            /* falls through */
            case 'month':
              is &= now.month() === date.month();
            /* falls through */
            case 'year':
              is &= now.year() === date.year();
          }
          return is;
        };

        scope.prev = function (delta) {
          return scope.next(-delta || -1);
        };

        if (pickerID) {
          scope.$on('pickerUpdate', function (event, pickerIDs, data) {
            if (eventIsForPicker(pickerIDs, pickerID)) {
              var updateViews = false, updateViewData = false;

              if (angular.isDefined(data.minDate)) {
                minDate = data.minDate ? data.minDate : false;
                updateViewData = true;
              }
              if (angular.isDefined(data.maxDate)) {
                maxDate = data.maxDate ? data.maxDate : false;
                updateViewData = true;
              }

              if (angular.isDefined(data.minView)) {
                attrs.minView = data.minView;
                updateViews = true;
              }
              if (angular.isDefined(data.maxView)) {
                attrs.maxView = data.maxView;
                updateViews = true;
              }
              attrs.view = data.view || attrs.view;

              if (updateViews) {
                prepareViews();
              }

              if (updateViewData) {
                update();
              }
            }
          });
        }
      }
    };
  }]);
//}));

//(function (global, factory) {
//  'use strict';
//  var fnc;
//  fnc = (typeof exports === 'object' && typeof module !== 'undefined') ? module.exports = factory(require('angular'), require('moment')) :
//    (typeof define === 'function' && define.amd) ? define(['angular', 'moment'], factory) :
//      factory(global.angular, global.moment);
//}(this, function (angular, moment) {
angular.module('datePicker').factory('datePickerUtils', function () {
    var tz, firstDay;
    var createNewDate = function (year, month, day, hour, minute) {
      var utc = Date.UTC(year | 0, month | 0, day | 0, hour | 0, minute | 0);
      return tz ? moment.tz(utc, tz) : moment(utc);
    };

    return {
      getVisibleMinutes: function (m, step) {
        var year = m.year(),
          month = m.month(),
          day = m.date(),
          hour = m.hours(), pushedDate,
          offset = m.utcOffset() / 60,
          minutes = [], minute;

        for (minute = 0; minute < 60; minute += step) {
          pushedDate = createNewDate(year, month, day, hour - offset, minute);
          minutes.push(pushedDate);
        }
        return minutes;
      },
      getVisibleWeeks: function (m) {
        m = moment(m);
        var startYear = m.year(),
          startMonth = m.month();

        //Set date to the first day of the month
        m.date(1);

        //Grab day of the week
        var day = m.day();

        //Go back the required number of days to arrive at the previous week start
        m.date(firstDay - (day + (firstDay >= day ? 6 : -1)));

        var weeks = [];

        while (weeks.length < 6) {
          if (m.year() === startYear && m.month() > startMonth) {
            break;
          }
          weeks.push(this.getDaysOfWeek(m));
          m.add(7, 'd');
        }
        return weeks;
      },
      getVisibleYears: function (d) {
        var m = moment(d),
          year = m.year();

        m.year(year - (year % 10));
        year = m.year();

        var offset = m.utcOffset() / 60,
          years = [],
          pushedDate,
          actualOffset;

        for (var i = 0; i < 12; i++) {
          pushedDate = createNewDate(year, 0, 1, 0 - offset);
          actualOffset = pushedDate.utcOffset() / 60;
          if (actualOffset !== offset) {
            pushedDate = createNewDate(year, 0, 1, 0 - actualOffset);
            offset = actualOffset;
          }
          years.push(pushedDate);
          year++;
        }
        return years;
      },
      getDaysOfWeek: function (m) {
        m = m ? m : (tz ? moment.tz(tz).day(firstDay) : moment().day(firstDay));

        var year = m.year(),
          month = m.month(),
          day = m.date(),
          days = [],
          pushedDate,
          offset = m.utcOffset() / 60,
          actualOffset;

        for (var i = 0; i < 7; i++) {
          pushedDate = createNewDate(year, month, day, 0 - offset, 0, false);
          actualOffset = pushedDate.utcOffset() / 60;
          if (actualOffset !== offset) {
            pushedDate = createNewDate(year, month, day, 0 - actualOffset, 0, false);
          }
          days.push(pushedDate);
          day++;
        }
        return days;
      },
      getVisibleMonths: function (m) {
        var year = m.year(),
          offset = m.utcOffset() / 60,
          months = [],
          pushedDate,
          actualOffset;

        for (var month = 0; month < 12; month++) {
          pushedDate = createNewDate(year, month, 1, 0 - offset, 0, false);
          actualOffset = pushedDate.utcOffset() / 60;
          if (actualOffset !== offset) {
            pushedDate = createNewDate(year, month, 1, 0 - actualOffset, 0, false);
          }
          months.push(pushedDate);
        }
        return months;
      },
      getVisibleHours: function (m) {
        var year = m.year(),
          month = m.month(),
          day = m.date(),
          hours = [],
          hour, pushedDate, actualOffset,
          offset = m.utcOffset() / 60;

        for (hour = 0; hour < 24; hour++) {
          pushedDate = createNewDate(year, month, day, hour - offset, 0, false);
          actualOffset = pushedDate.utcOffset() / 60;
          if (actualOffset !== offset) {
            pushedDate = createNewDate(year, month, day, hour - actualOffset, 0, false);
          }
          hours.push(pushedDate);
        }

        return hours;
      },
      isAfter: function (model, date) {
        return model && model.unix() >= date.unix();
      },
      isBefore: function (model, date) {
        return model.unix() <= date.unix();
      },
      isSameYear: function (model, date) {
        return model && model.year() === date.year();
      },
      isSameMonth: function (model, date) {
        return this.isSameYear(model, date) && model.month() === date.month();
      },
      isSameDay: function (model, date) {
        return this.isSameMonth(model, date) && model.date() === date.date();
      },
      isSameHour: function (model, date) {
        return this.isSameDay(model, date) && model.hours() === date.hours();
      },
      isSameMinutes: function (model, date) {
        return this.isSameHour(model, date) && model.minutes() === date.minutes();
      },
      setParams: function (zone, fd) {
        tz = zone;
        firstDay = fd;
      },
      scopeSearch: function (scope, name, comparisonFn) {
        var parentScope = scope,
          nameArray = name.split('.'),
          target, i, j = nameArray.length;

        do {
          target = parentScope = parentScope.$parent;

          //Loop through provided names.
          for (i = 0; i < j; i++) {
            target = target[nameArray[i]];
            if (!target) {
              continue;
            }
          }

          //If we reached the end of the list for this scope,
          //and something was found, trigger the comparison
          //function. If the comparison function is happy, return
          //found result. Otherwise, continue to the next parent scope
          if (target && comparisonFn(target)) {
            return target;
          }

        } while (parentScope.$parent);

        return false;
      },
      findFunction: function (scope, name) {
        //Search scope ancestors for a matching function.
        return this.scopeSearch(scope, name, function (target) {
          //Property must also be a function
          return angular.isFunction(target);
        });
      },
      findParam: function (scope, name) {
        //Search scope ancestors for a matching parameter.
        return this.scopeSearch(scope, name, function () {
          //As long as the property exists, we're good
          return true;
        });
      },
      createMoment: function (m) {
        if (tz) {
          return moment.tz(m, tz);
        } else {
          //If input is a moment, and we have no TZ info, we need to remove TZ
          //info from the moment, otherwise the newly created moment will take
          //the timezone of the input moment. The easiest way to do that is to
          //take the unix timestamp, and use that to create a new moment.
          //The new moment will use the local timezone of the user machine.
          return moment.isMoment(m) ? moment.unix(m.unix()) : moment(m);
        }
      },
      getDate: function (scope, attrs, name) {
        var result = false;
        if (attrs[name]) {
          result = this.createMoment(attrs[name]);
          if (!result.isValid()) {
            result = this.findParam(scope, attrs[name]);
            if (result) {
              result = this.createMoment(result);
            }
          }
        }

        return result;
      },
      eventIsForPicker: function (targetIDs, pickerID) {
        //Checks if an event targeted at a specific picker, via either a string name, or an array of strings.
        return (angular.isArray(targetIDs) && targetIDs.indexOf(pickerID) > -1 || targetIDs === pickerID);
      }
    };
  });
//}));

//(function (global, factory) {
//  'use strict';
//  var fnc;
//  fnc = (typeof exports === 'object' && typeof module !== 'undefined') ? module.exports = factory(require('angular'), require('moment')) :
//    (typeof define === 'function' && define.amd) ? define(['angular', 'moment'], factory) :
//      factory(global.angular, global.moment);
//}(this, function (angular, moment) {
var Module = angular.module('datePicker');

  Module.directive('dateRange', ['$compile', 'datePickerUtils', 'dateTimeConfig', function ($compile, datePickerUtils, dateTimeConfig) {
    function getTemplate(attrs, id, model, min, max) {
      return dateTimeConfig.template(angular.extend(attrs, {
        ngModel: model,
        minDate: min && moment.isMoment(min) ? min.format() : false,
        maxDate: max && moment.isMoment(max) ? max.format() : false
      }), id);
    }

    function randomName() {
      return 'picker' + Math.random().toString().substr(2);
    }

    return {
      scope: {
        start: '=',
        end: '='
      },
      link: function (scope, element, attrs) {
        var dateChange = null,
          pickerRangeID = element[0].id,
          pickerIDs = [randomName(), randomName()],
          createMoment = datePickerUtils.createMoment,
          eventIsForPicker = datePickerUtils.eventIsForPicker;

        scope.dateChange = function (modelName, newDate) {
          //Notify user if callback exists.
          if (dateChange) {
            dateChange(modelName, newDate);
          }
        };

        function setMax(date) {
          scope.$broadcast('pickerUpdate', pickerIDs[0], {
            maxDate: date
          });
        }

        function setMin(date) {
          scope.$broadcast('pickerUpdate', pickerIDs[1], {
            minDate: date
          });
        }

        if (pickerRangeID) {
          scope.$on('pickerUpdate', function (event, targetIDs, data) {
            if (eventIsForPicker(targetIDs, pickerRangeID)) {
              //If we received an update event, dispatch it to the inner pickers using their IDs.
              scope.$broadcast('pickerUpdate', pickerIDs, data);
            }
          });
        }

        datePickerUtils.setParams(attrs.timezone);

        scope.start = createMoment(scope.start);
        scope.end = createMoment(scope.end);

        scope.$watchGroup(['start', 'end'], function (dates) {
          //Scope data changed, update picker min/max
          setMin(dates[0]);
          setMax(dates[1]);
        });

        if (angular.isDefined(attrs.dateChange)) {
          dateChange = datePickerUtils.findFunction(scope, attrs.dateChange);
        }

        attrs.onSetDate = 'dateChange';

        var template = '<div><table class="date-range"><tr><td valign="top">' +
          getTemplate(attrs, pickerIDs[0], 'start', false, scope.end) +
          '</td><td valign="top">' +
          getTemplate(attrs, pickerIDs[1], 'end', scope.start, false) +
          '</td></tr></table></div>';

        var picker = $compile(template)(scope);
        element.append(picker);
      }
    };
  }]);
//}));

//(function (global, factory) {
//  'use strict';
//  var fnc;
//  fnc = (typeof exports === 'object' && typeof module !== 'undefined') ? module.exports = factory(require('angular'), require('moment')) :
//    (typeof define === 'function' && define.amd) ? define(['angular', 'moment'], factory) :
//      factory(global.angular, global.moment);
//}(this, function (angular, moment) {
var PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty';

  var Module = angular.module('datePicker');

  Module.constant('dateTimeConfig', {
    template: function (attrs, id) {
      return '' +
        '<div ' +
        (id ? 'id="' + id + '" ' : '') +
        'date-picker="' + attrs.ngModel + '" ' +
        (attrs.view ? 'view="' + attrs.view + '" ' : '') +
        (attrs.maxView ? 'max-view="' + attrs.maxView + '" ' : '') +
        (attrs.maxDate ? 'max-date="' + attrs.maxDate + '" ' : '') +
        (attrs.autoClose ? 'auto-close="' + attrs.autoClose + '" ' : '') +
        (attrs.template ? 'template="' + attrs.template + '" ' : '') +
        (attrs.minView ? 'min-view="' + attrs.minView + '" ' : '') +
        (attrs.minDate ? 'min-date="' + attrs.minDate + '" ' : '') +
        (attrs.partial ? 'partial="' + attrs.partial + '" ' : '') +
        (attrs.step ? 'step="' + attrs.step + '" ' : '') +
        (attrs.onSetDate ? 'date-change="' + attrs.onSetDate + '" ' : '') +
        (attrs.ngModel ? 'ng-model="' + attrs.ngModel + '" ' : '') +
        (attrs.firstDay ? 'first-day="' + attrs.firstDay + '" ' : '') +
        (attrs.timezone ? 'timezone="' + attrs.timezone + '" ' : '') +
        'class="date-picker-date-time"></div>';
    },
    format: 'YYYY-MM-DD HH:mm',
    views: ['date', 'year', 'month', 'hours', 'minutes'],
    autoClose: false,
    position: 'relative'
  });

  Module.directive('dateTimeAppend', function () {
    return {
      link: function (scope, element) {
        element.bind('click', function () {
          element.find('input')[0].focus();
        });
      }
    };
  });

  Module.directive('dateTime', ['$compile', '$document', '$filter', 'dateTimeConfig', '$parse', 'datePickerUtils', function ($compile, $document, $filter, dateTimeConfig, $parse, datePickerUtils) {
    var body = $document.find('body');
    var dateFilter = $filter('mFormat');

    return {
      require: 'ngModel',
      scope: true,
      link: function (scope, element, attrs, ngModel) {
        var format = attrs.format || dateTimeConfig.format,
          parentForm = element.inheritedData('$formController'),
          views = $parse(attrs.views)(scope) || dateTimeConfig.views.concat(),
          view = attrs.view || views[0],
          index = views.indexOf(view),
          dismiss = attrs.autoClose ? $parse(attrs.autoClose)(scope) : dateTimeConfig.autoClose,
          picker = null,
          pickerID = element[0].id,
          position = attrs.position || dateTimeConfig.position,
          container = null,
          minDate = null,
          minValid = null,
          maxDate = null,
          maxValid = null,
          timezone = attrs.timezone || false,
          eventIsForPicker = datePickerUtils.eventIsForPicker,
          dateChange = null,
          shownOnce = false,
          template;

        if (index === -1) {
          views.splice(index, 1);
        }

        views.unshift(view);

        function formatter(value) {
          return dateFilter(value, format, timezone);
        }

        function parser(viewValue) {
          if (viewValue.length === format.length) {
            return viewValue;
          }
          return undefined;
        }

        function setMin(date) {
          minDate = date;
          attrs.minDate = date ? date.format() : date;
          minValid = moment.isMoment(date);
        }

        function setMax(date) {
          maxDate = date;
          attrs.maxDate = date ? date.format() : date;
          maxValid = moment.isMoment(date);
        }

        ngModel.$formatters.push(formatter);
        ngModel.$parsers.unshift(parser);

        if (angular.isDefined(attrs.minDate)) {
          setMin(datePickerUtils.findParam(scope, attrs.minDate));

          ngModel.$validators.min = function (value) {
            //If we don't have a min / max value, then any value is valid.
            return minValid ? moment.isMoment(value) && (minDate.isSame(value) || minDate.isBefore(value)) : true;
          };
        }

        if (angular.isDefined(attrs.maxDate)) {
          setMax(datePickerUtils.findParam(scope, attrs.maxDate));

          ngModel.$validators.max = function (value) {
            return maxValid ? moment.isMoment(value) && (maxDate.isSame(value) || maxDate.isAfter(value)) : true;
          };
        }

        if (angular.isDefined(attrs.dateChange)) {
          dateChange = datePickerUtils.findFunction(scope, attrs.dateChange);
        }

        function getTemplate() {
          template = dateTimeConfig.template(attrs);
        }


        function updateInput(event) {
          event.stopPropagation();
          if (ngModel.$pristine) {
            ngModel.$dirty = true;
            ngModel.$pristine = false;
            element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);
            if (parentForm) {
              parentForm.$setDirty();
            }
            ngModel.$render();
          }
        }

        function clear() {
          if (picker) {
            picker.remove();
            picker = null;
          }
          if (container) {
            container.remove();
            container = null;
          }
        }

        if (pickerID) {
          scope.$on('pickerUpdate', function (event, pickerIDs, data) {
            if (eventIsForPicker(pickerIDs, pickerID)) {
              if (picker) {
                //Need to handle situation where the data changed but the picker is currently open.
                //To handle this, we can create the inner picker with a random ID, then forward
                //any events received to it.
              } else {
                var validateRequired = false;
                if (angular.isDefined(data.minDate)) {
                  setMin(data.minDate);
                  validateRequired = true;
                }
                if (angular.isDefined(data.maxDate)) {
                  setMax(data.maxDate);
                  validateRequired = true;
                }

                if (angular.isDefined(data.minView)) {
                  attrs.minView = data.minView;
                }
                if (angular.isDefined(data.maxView)) {
                  attrs.maxView = data.maxView;
                }
                attrs.view = data.view || attrs.view;

                if (validateRequired) {
                  ngModel.$validate();
                }
                if (angular.isDefined(data.format)) {
                  format = attrs.format = data.format || dateTimeConfig.format;
                  ngModel.$modelValue = -1; //Triggers formatters. This value will be discarded.
                }
                getTemplate();
              }
            }
          });
        }

        function showPicker() {
          if (picker) {
            return;
          }
          // create picker element
          picker = $compile(template)(scope);
          scope.$digest();

          //If the picker has already been shown before then we shouldn't be binding to events, as these events are already bound to in this scope.
          if (!shownOnce) {
            scope.$on('setDate', function (event, date, view) {
              updateInput(event);
              if (dateChange) {
                dateChange(attrs.ngModel, date);
              }
              if (dismiss && views[views.length - 1] === view) {
                clear();
              }
            });

            scope.$on('hidePicker', function () {
              element.triggerHandler('blur');
            });

            scope.$on('$destroy', clear);

            shownOnce = true;
          }


          // move picker below input element

          if (position === 'absolute') {
            var pos = element[0].getBoundingClientRect();
            // Support IE8
            var height = pos.height || element[0].offsetHeight;
            picker.css({top: (pos.top + height) + 'px', left: pos.left + 'px', display: 'block', position: position});
            body.append(picker);
          } else {
            // relative
            container = angular.element('<div date-picker-wrapper></div>');
            element[0].parentElement.insertBefore(container[0], element[0]);
            container.append(picker);
            //          this approach doesn't work
            //          element.before(picker);
            picker.css({top: element[0].offsetHeight + 'px', display: 'block'});
          }
          picker.bind('mousedown', function (evt) {
            evt.preventDefault();
          });
        }

        element.bind('focus', showPicker);
        element.bind('blur', clear);
        getTemplate();
      }
    };
  }]);
//}));

angular.module('datePicker').run(['$templateCache', function($templateCache) {
$templateCache.put('templates/datepicker.html',
    "<div ng-switch=\"view\">\r" +
    "\n" +
    "  <div ng-switch-when=\"date\">\r" +
    "\n" +
    "    <table>\r" +
    "\n" +
    "      <thead>\r" +
    "\n" +
    "      <tr>\r" +
    "\n" +
    "        <th ng-click=\"prev()\">&lsaquo;</th>\r" +
    "\n" +
    "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('month')\" ng-bind=\"date|mFormat:'YYYY MMMM':tz\"></th>\r" +
    "\n" +
    "        <th ng-click=\"next()\">&rsaquo;</i></th>\r" +
    "\n" +
    "      </tr>\r" +
    "\n" +
    "      <tr>\r" +
    "\n" +
    "        <th ng-repeat=\"day in weekdays\" style=\"overflow: hidden\" ng-bind=\"day|mFormat:'ddd':tz\"></th>\r" +
    "\n" +
    "      </tr>\r" +
    "\n" +
    "      </thead>\r" +
    "\n" +
    "      <tbody>\r" +
    "\n" +
    "      <tr ng-repeat=\"week in weeks\" ng-init=\"$index2 = $index\">\r" +
    "\n" +
    "        <td ng-repeat=\"day in week\">\r" +
    "\n" +
    "          <span\r" +
    "\n" +
    "            ng-class=\"classes[$index2][$index]\"\r" +
    "\n" +
    "            ng-click=\"selectDate(day)\" ng-bind=\"day|mFormat:'DD':tz\"></span>\r" +
    "\n" +
    "        </td>\r" +
    "\n" +
    "      </tr>\r" +
    "\n" +
    "      </tbody>\r" +
    "\n" +
    "    </table>\r" +
    "\n" +
    "  </div>\r" +
    "\n" +
    "  <div ng-switch-when=\"year\">\r" +
    "\n" +
    "    <table>\r" +
    "\n" +
    "      <thead>\r" +
    "\n" +
    "      <tr>\r" +
    "\n" +
    "        <th ng-click=\"prev(10)\">&lsaquo;</th>\r" +
    "\n" +
    "        <th colspan=\"5\" class=\"switch\"ng-bind=\"years[0].year()+' - '+years[years.length-1].year()\"></th>\r" +
    "\n" +
    "        <th ng-click=\"next(10)\">&rsaquo;</i></th>\r" +
    "\n" +
    "      </tr>\r" +
    "\n" +
    "      </thead>\r" +
    "\n" +
    "      <tbody>\r" +
    "\n" +
    "      <tr>\r" +
    "\n" +
    "        <td colspan=\"7\">\r" +
    "\n" +
    "          <span ng-class=\"classes[$index]\"\r" +
    "\n" +
    "                ng-repeat=\"year in years\"\r" +
    "\n" +
    "                ng-click=\"selectDate(year)\" ng-bind=\"year.year()\"></span>\r" +
    "\n" +
    "        </td>\r" +
    "\n" +
    "      </tr>\r" +
    "\n" +
    "      </tbody>\r" +
    "\n" +
    "    </table>\r" +
    "\n" +
    "  </div>\r" +
    "\n" +
    "  <div ng-switch-when=\"month\">\r" +
    "\n" +
    "    <table>\r" +
    "\n" +
    "      <thead>\r" +
    "\n" +
    "      <tr>\r" +
    "\n" +
    "        <th ng-click=\"prev()\">&lsaquo;</th>\r" +
    "\n" +
    "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('year')\" ng-bind=\"date|mFormat:'YYYY':tz\"></th>\r" +
    "\n" +
    "        <th ng-click=\"next()\">&rsaquo;</i></th>\r" +
    "\n" +
    "      </tr>\r" +
    "\n" +
    "      </thead>\r" +
    "\n" +
    "      <tbody>\r" +
    "\n" +
    "      <tr>\r" +
    "\n" +
    "        <td colspan=\"7\">\r" +
    "\n" +
    "          <span ng-repeat=\"month in months\"\r" +
    "\n" +
    "                ng-class=\"classes[$index]\"\r" +
    "\n" +
    "                ng-click=\"selectDate(month)\"\r" +
    "\n" +
    "                ng-bind=\"month|mFormat:'MMM':tz\"></span>\r" +
    "\n" +
    "        </td>\r" +
    "\n" +
    "      </tr>\r" +
    "\n" +
    "      </tbody>\r" +
    "\n" +
    "    </table>\r" +
    "\n" +
    "  </div>\r" +
    "\n" +
    "  <div ng-switch-when=\"hours\">\r" +
    "\n" +
    "    <table>\r" +
    "\n" +
    "      <thead>\r" +
    "\n" +
    "      <tr>\r" +
    "\n" +
    "        <th ng-click=\"prev(24)\">&lsaquo;</th>\r" +
    "\n" +
    "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('date')\" ng-bind=\"date|mFormat:'DD MMMM YYYY':tz\"></th>\r" +
    "\n" +
    "        <th ng-click=\"next(24)\">&rsaquo;</i></th>\r" +
    "\n" +
    "      </tr>\r" +
    "\n" +
    "      </thead>\r" +
    "\n" +
    "      <tbody>\r" +
    "\n" +
    "      <tr>\r" +
    "\n" +
    "        <td colspan=\"7\">\r" +
    "\n" +
    "          <span ng-repeat=\"hour in hours\"\r" +
    "\n" +
    "                ng-class=\"classes[$index]\"\r" +
    "\n" +
    "                ng-click=\"selectDate(hour)\" ng-bind=\"hour|mFormat:'HH:mm':tz\"></span>\r" +
    "\n" +
    "        </td>\r" +
    "\n" +
    "      </tr>\r" +
    "\n" +
    "      </tbody>\r" +
    "\n" +
    "    </table>\r" +
    "\n" +
    "  </div>\r" +
    "\n" +
    "  <div ng-switch-when=\"minutes\">\r" +
    "\n" +
    "    <table>\r" +
    "\n" +
    "      <thead>\r" +
    "\n" +
    "      <tr>\r" +
    "\n" +
    "        <th ng-click=\"prev()\">&lsaquo;</th>\r" +
    "\n" +
    "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('hours')\" ng-bind=\"date|mFormat:'DD MMMM YYYY':tz\"></th>\r" +
    "\n" +
    "        <th ng-click=\"next()\">&rsaquo;</i></th>\r" +
    "\n" +
    "      </tr>\r" +
    "\n" +
    "      </thead>\r" +
    "\n" +
    "      <tbody>\r" +
    "\n" +
    "      <tr>\r" +
    "\n" +
    "        <td colspan=\"7\">\r" +
    "\n" +
    "          <span ng-repeat=\"minute in minutes\"\r" +
    "\n" +
    "                ng-class=\"classes[$index]\"\r" +
    "\n" +
    "                ng-click=\"selectDate(minute)\"\r" +
    "\n" +
    "                ng-bind=\"minute|mFormat:'HH:mm':tz\"></span>\r" +
    "\n" +
    "        </td>\r" +
    "\n" +
    "      </tr>\r" +
    "\n" +
    "      </tbody>\r" +
    "\n" +
    "    </table>\r" +
    "\n" +
    "  </div>\r" +
    "\n" +
    "</div>"
  );

}]);
}));

},{"angular":"angular","moment":"/Users/Gavin/Documents/codes/pack/sil/node_modules/moment/moment.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-h-sweetalert/src/ngSweetAlert.js":[function(require,module,exports){
/**
 * angular-h-sweetalert is a simple wrapper of sweetalert.
 *
 * @author Howard.Zuo
 * @date   Jan 30th, 2016
 *
 **/
(function(root, factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['angular', 'sweetalert'], function(angular, sweetalert) {
            return factory(angular, sweetalert);
        });
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like enviroments that support module.exports,
        // like Node.
        module.exports = factory(require('angular'), require('sweetalert'));
    } else {
        // Browser globals
        factory(root.angular, root.sweetAlert);
    }
}(this, function(ng, sweet) {
    'use strict';

    var service = function() {

        this.show = function() {
            var args = [].slice.call(arguments, 0);
            sweet.apply(undefined, args);
        };

        ng.forEach(
            ['showInputError', 'close'],
            function(func) {
                this[func] = function() {
                    var args = [].slice.call(arguments, 0);
                    sweet[func].apply(undefined, args);
                };
            }, this);

        this.isShown = function() {
            var sweetAlertEl;

            ng.forEach(document.getElementsByClassName('sweet-alert'), function(el) {
                sweetAlertEl = ng.element(el);
            });

            return sweetAlertEl && sweetAlertEl.hasClass('visible');
        };
    };

    var modName = 'hSweetAlert';

    ng.module(modName, []).service('sweet', [service]);

    return modName;

}));

},{"angular":"angular","sweetalert":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/sweetalert.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-moment/angular-moment.js":[function(require,module,exports){
(function (global){
/* angular-moment.js / v1.0.1 / (c) 2013, 2014, 2015, 2016 Uri Shaked / MIT Licence */

'format amd';
/* global define */

(function () {
	'use strict';

	function isUndefinedOrNull(val) {
		return angular.isUndefined(val) || val === null;
	}

	function requireMoment() {
		try {
			return require('moment'); // Using nw.js or browserify?
		} catch (e) {
			throw new Error('Please install moment via npm. Please reference to: https://github.com/urish/angular-moment'); // Add wiki/troubleshooting section?
		}
	}

	function angularMoment(angular, moment) {

		if(typeof moment === 'undefined') {
			if(typeof require === 'function') {
				moment = requireMoment();
			}else{
				throw new Error('Moment cannot be found by angular-moment! Please reference to: https://github.com/urish/angular-moment'); // Add wiki/troubleshooting section?
			}
		}

		/**
		 * @ngdoc overview
		 * @name angularMoment
		 *
		 * @description
		 * angularMoment module provides moment.js functionality for angular.js apps.
		 */
		angular.module('angularMoment', [])

		/**
		 * @ngdoc object
		 * @name angularMoment.config:angularMomentConfig
		 *
		 * @description
		 * Common configuration of the angularMoment module
		 */
			.constant('angularMomentConfig', {
				/**
				 * @ngdoc property
				 * @name angularMoment.config.angularMomentConfig#preprocess
				 * @propertyOf angularMoment.config:angularMomentConfig
				 * @returns {function} A preprocessor function that will be applied on all incoming dates
				 *
				 * @description
				 * Defines a preprocessor function to apply on all input dates (e.g. the input of `am-time-ago`,
				 * `amCalendar`, etc.). The function must return a `moment` object.
				 *
				 * @example
				 *   // Causes angular-moment to always treat the input values as unix timestamps
				 *   angularMomentConfig.preprocess = function(value) {
				 * 	   return moment.unix(value);
				 *   }
				 */
				preprocess: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.angularMomentConfig#timezone
				 * @propertyOf angularMoment.config:angularMomentConfig
				 * @returns {string} The default timezone
				 *
				 * @description
				 * The default timezone (e.g. 'Europe/London'). Empty string by default (does not apply
				 * any timezone shift).
				 *
				 * NOTE: This option requires moment-timezone >= 0.3.0.
				 */
				timezone: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.angularMomentConfig#format
				 * @propertyOf angularMoment.config:angularMomentConfig
				 * @returns {string} The pre-conversion format of the date
				 *
				 * @description
				 * Specify the format of the input date. Essentially it's a
				 * default and saves you from specifying a format in every
				 * element. Overridden by element attr. Null by default.
				 */
				format: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.angularMomentConfig#statefulFilters
				 * @propertyOf angularMoment.config:angularMomentConfig
				 * @returns {boolean} Whether angular-moment filters should be stateless (or not)
				 *
				 * @description
				 * Specifies whether the filters included with angular-moment are stateful.
				 * Stateful filters will automatically re-evaluate whenever you change the timezone
				 * or locale settings, but may negatively impact performance. true by default.
				 */
				statefulFilters: true
			})

		/**
		 * @ngdoc object
		 * @name angularMoment.object:moment
		 *
		 * @description
		 * moment global (as provided by the moment.js library)
		 */
			.constant('moment', moment)

		/**
		 * @ngdoc object
		 * @name angularMoment.config:amTimeAgoConfig
		 * @module angularMoment
		 *
		 * @description
		 * configuration specific to the amTimeAgo directive
		 */
			.constant('amTimeAgoConfig', {
				/**
				 * @ngdoc property
				 * @name angularMoment.config.amTimeAgoConfig#withoutSuffix
				 * @propertyOf angularMoment.config:amTimeAgoConfig
				 * @returns {boolean} Whether to include a suffix in am-time-ago directive
				 *
				 * @description
				 * Defaults to false.
				 */
				withoutSuffix: false,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.amTimeAgoConfig#serverTime
				 * @propertyOf angularMoment.config:amTimeAgoConfig
				 * @returns {number} Server time in milliseconds since the epoch
				 *
				 * @description
				 * If set, time ago will be calculated relative to the given value.
				 * If null, local time will be used. Defaults to null.
				 */
				serverTime: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.amTimeAgoConfig#titleFormat
				 * @propertyOf angularMoment.config:amTimeAgoConfig
				 * @returns {string} The format of the date to be displayed in the title of the element. If null,
				 *        the directive set the title of the element.
				 *
				 * @description
				 * The format of the date used for the title of the element. null by default.
				 */
				titleFormat: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.amTimeAgoConfig#fullDateThreshold
				 * @propertyOf angularMoment.config:amTimeAgoConfig
				 * @returns {number} The minimum number of days for showing a full date instead of relative time
				 *
				 * @description
				 * The threshold for displaying a full date. The default is null, which means the date will always
				 * be relative, and full date will never be displayed.
				 */
				fullDateThreshold: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.amTimeAgoConfig#fullDateFormat
				 * @propertyOf angularMoment.config:amTimeAgoConfig
				 * @returns {string} The format to use when displaying a full date.
				 *
				 * @description
				 * Specify the format of the date when displayed as full date. null by default.
				 */
				fullDateFormat: null,

				fullDateThresholdUnit: 'day'
			})

		/**
		 * @ngdoc directive
		 * @name angularMoment.directive:amTimeAgo
		 * @module angularMoment
		 *
		 * @restrict A
		 */
			.directive('amTimeAgo', ['$window', 'moment', 'amMoment', 'amTimeAgoConfig', function ($window, moment, amMoment, amTimeAgoConfig) {

				return function (scope, element, attr) {
					var activeTimeout = null;
					var currentValue;
					var withoutSuffix = amTimeAgoConfig.withoutSuffix;
					var titleFormat = amTimeAgoConfig.titleFormat;
					var fullDateThreshold = amTimeAgoConfig.fullDateThreshold;
					var fullDateFormat = amTimeAgoConfig.fullDateFormat;
					var fullDateThresholdUnit = amTimeAgoConfig.fullDateThresholdUnit;

					var localDate = new Date().getTime();
					var modelName = attr.amTimeAgo;
					var currentFrom;
					var isTimeElement = ('TIME' === element[0].nodeName.toUpperCase());
					var setTitleTime = !element.attr('title');

					function getNow() {
						var now;
						if (currentFrom) {
							now = currentFrom;
						} else if (amTimeAgoConfig.serverTime) {
							var localNow = new Date().getTime();
							var nowMillis = localNow - localDate + amTimeAgoConfig.serverTime;
							now = moment(nowMillis);
						}
						else {
							now = moment();
						}
						return now;
					}

					function cancelTimer() {
						if (activeTimeout) {
							$window.clearTimeout(activeTimeout);
							activeTimeout = null;
						}
					}

					function updateTime(momentInstance) {
						var timeAgo = getNow().diff(momentInstance, fullDateThresholdUnit);
						var showFullDate = fullDateThreshold && timeAgo >= fullDateThreshold;

						if (showFullDate) {
							element.text(momentInstance.format(fullDateFormat));
						} else {
							element.text(momentInstance.from(getNow(), withoutSuffix));
						}

						if (titleFormat && setTitleTime) {
							element.attr('title', momentInstance.format(titleFormat));
						}

						if (!showFullDate) {
							var howOld = Math.abs(getNow().diff(momentInstance, 'minute'));
							var secondsUntilUpdate = 3600;
							if (howOld < 1) {
								secondsUntilUpdate = 1;
							} else if (howOld < 60) {
								secondsUntilUpdate = 30;
							} else if (howOld < 180) {
								secondsUntilUpdate = 300;
							}

							activeTimeout = $window.setTimeout(function () {
								updateTime(momentInstance);
							}, secondsUntilUpdate * 1000);
						}
					}

					function updateDateTimeAttr(value) {
						if (isTimeElement) {
							element.attr('datetime', value);
						}
					}

					function updateMoment() {
						cancelTimer();
						if (currentValue) {
							var momentValue = amMoment.preprocessDate(currentValue);
							updateTime(momentValue);
							updateDateTimeAttr(momentValue.toISOString());
						}
					}

					scope.$watch(modelName, function (value) {
						if (isUndefinedOrNull(value) || (value === '')) {
							cancelTimer();
							if (currentValue) {
								element.text('');
								updateDateTimeAttr('');
								currentValue = null;
							}
							return;
						}

						currentValue = value;
						updateMoment();
					});

					if (angular.isDefined(attr.amFrom)) {
						scope.$watch(attr.amFrom, function (value) {
							if (isUndefinedOrNull(value) || (value === '')) {
								currentFrom = null;
							} else {
								currentFrom = moment(value);
							}
							updateMoment();
						});
					}

					if (angular.isDefined(attr.amWithoutSuffix)) {
						scope.$watch(attr.amWithoutSuffix, function (value) {
							if (typeof value === 'boolean') {
								withoutSuffix = value;
								updateMoment();
							} else {
								withoutSuffix = amTimeAgoConfig.withoutSuffix;
							}
						});
					}

					attr.$observe('amFullDateThreshold', function (newValue) {
						fullDateThreshold = newValue;
						updateMoment();
					});

					attr.$observe('amFullDateFormat', function (newValue) {
						fullDateFormat = newValue;
						updateMoment();
					});

					attr.$observe('amFullDateThresholdUnit', function (newValue) {
						fullDateThresholdUnit = newValue;
						updateMoment();
					});

					scope.$on('$destroy', function () {
						cancelTimer();
					});

					scope.$on('amMoment:localeChanged', function () {
						updateMoment();
					});
				};
			}])

		/**
		 * @ngdoc service
		 * @name angularMoment.service.amMoment
		 * @module angularMoment
		 */
			.service('amMoment', ['moment', '$rootScope', '$log', 'angularMomentConfig', function (moment, $rootScope, $log, angularMomentConfig) {
				var defaultTimezone = null;

				/**
				 * @ngdoc function
				 * @name angularMoment.service.amMoment#changeLocale
				 * @methodOf angularMoment.service.amMoment
				 *
				 * @description
				 * Changes the locale for moment.js and updates all the am-time-ago directive instances
				 * with the new locale. Also broadcasts an `amMoment:localeChanged` event on $rootScope.
				 *
				 * @param {string} locale Locale code (e.g. en, es, ru, pt-br, etc.)
				 * @param {object} customization object of locale strings to override
				 */
				this.changeLocale = function (locale, customization) {
					var result = moment.locale(locale, customization);
					if (angular.isDefined(locale)) {
						$rootScope.$broadcast('amMoment:localeChanged');

					}
					return result;
				};

				/**
				 * @ngdoc function
				 * @name angularMoment.service.amMoment#changeTimezone
				 * @methodOf angularMoment.service.amMoment
				 *
				 * @description
				 * Changes the default timezone for amCalendar, amDateFormat and amTimeAgo. Also broadcasts an
				 * `amMoment:timezoneChanged` event on $rootScope.
				 *
				 * Note: this method works only if moment-timezone > 0.3.0 is loaded
				 *
				 * @param {string} timezone Timezone name (e.g. UTC)
				 */
				this.changeTimezone = function (timezone) {
					if (moment.tz && moment.tz.setDefault) {
						moment.tz.setDefault(timezone);
						$rootScope.$broadcast('amMoment:timezoneChanged');
					} else {
						$log.warn('angular-moment: changeTimezone() works only with moment-timezone.js v0.3.0 or greater.');
					}
					angularMomentConfig.timezone = timezone;
					defaultTimezone = timezone;
				};

				/**
				 * @ngdoc function
				 * @name angularMoment.service.amMoment#preprocessDate
				 * @methodOf angularMoment.service.amMoment
				 *
				 * @description
				 * Preprocess a given value and convert it into a Moment instance appropriate for use in the
				 * am-time-ago directive and the filters. The behavior of this function can be overriden by
				 * setting `angularMomentConfig.preprocess`.
				 *
				 * @param {*} value The value to be preprocessed
				 * @return {Moment} A `moment` object
				 */
				this.preprocessDate = function (value) {
					// Configure the default timezone if needed
					if (defaultTimezone !== angularMomentConfig.timezone) {
						this.changeTimezone(angularMomentConfig.timezone);
					}

					if (angularMomentConfig.preprocess) {
						return angularMomentConfig.preprocess(value);
					}

					if (!isNaN(parseFloat(value)) && isFinite(value)) {
						// Milliseconds since the epoch
						return moment(parseInt(value, 10));
					}

					// else just returns the value as-is.
					return moment(value);
				};
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amParse
		 * @module angularMoment
		 */
			.filter('amParse', ['moment', function (moment) {
				return function (value, format) {
					return moment(value, format);
				};
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amFromUnix
		 * @module angularMoment
		 */
			.filter('amFromUnix', ['moment', function (moment) {
				return function (value) {
					return moment.unix(value);
				};
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amUtc
		 * @module angularMoment
		 */
			.filter('amUtc', ['moment', function (moment) {
				return function (value) {
					return moment.utc(value);
				};
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amUtcOffset
		 * @module angularMoment
		 *
		 * @description
		 * Adds a UTC offset to the given timezone object. The offset can be a number of minutes, or a string such as
		 * '+0300', '-0300' or 'Z'.
		 */
			.filter('amUtcOffset', ['amMoment', function (amMoment) {
				function amUtcOffset(value, offset) {
					return amMoment.preprocessDate(value).utcOffset(offset);
				}

				return amUtcOffset;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amLocal
		 * @module angularMoment
		 */
			.filter('amLocal', ['moment', function (moment) {
				return function (value) {
					return moment.isMoment(value) ? value.local() : null;
				};
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amTimezone
		 * @module angularMoment
		 *
		 * @description
		 * Apply a timezone onto a given moment object, e.g. 'America/Phoenix').
		 *
		 * You need to include moment-timezone.js for timezone support.
		 */
			.filter('amTimezone', ['amMoment', 'angularMomentConfig', '$log', function (amMoment, angularMomentConfig, $log) {
				function amTimezone(value, timezone) {
					var aMoment = amMoment.preprocessDate(value);

					if (!timezone) {
						return aMoment;
					}

					if (aMoment.tz) {
						return aMoment.tz(timezone);
					} else {
						$log.warn('angular-moment: named timezone specified but moment.tz() is undefined. Did you forget to include moment-timezone.js ?');
						return aMoment;
					}
				}

				return amTimezone;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amCalendar
		 * @module angularMoment
		 */
			.filter('amCalendar', ['moment', 'amMoment', 'angularMomentConfig', function (moment, amMoment, angularMomentConfig) {
				function amCalendarFilter(value, referenceTime, formats) {
					if (isUndefinedOrNull(value)) {
						return '';
					}

					var date = amMoment.preprocessDate(value);
					return date.isValid() ? date.calendar(referenceTime, formats) : '';
				}

				// Since AngularJS 1.3, filters have to explicitly define being stateful
				// (this is no longer the default).
				amCalendarFilter.$stateful = angularMomentConfig.statefulFilters;

				return amCalendarFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amDifference
		 * @module angularMoment
		 */
			.filter('amDifference', ['moment', 'amMoment', 'angularMomentConfig', function (moment, amMoment, angularMomentConfig) {
				function amDifferenceFilter(value, otherValue, unit, usePrecision) {
					if (isUndefinedOrNull(value)) {
						return '';
					}

					var date = amMoment.preprocessDate(value);
					var date2 = !isUndefinedOrNull(otherValue) ? amMoment.preprocessDate(otherValue) : moment();

					if (!date.isValid() || !date2.isValid()) {
						return '';
					}

					return date.diff(date2, unit, usePrecision);
				}

				amDifferenceFilter.$stateful = angularMomentConfig.statefulFilters;

				return amDifferenceFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amDateFormat
		 * @module angularMoment
		 * @function
		 */
			.filter('amDateFormat', ['moment', 'amMoment', 'angularMomentConfig', function (moment, amMoment, angularMomentConfig) {
				function amDateFormatFilter(value, format) {
					if (isUndefinedOrNull(value)) {
						return '';
					}

					var date = amMoment.preprocessDate(value);
					if (!date.isValid()) {
						return '';
					}

					return date.format(format);
				}

				amDateFormatFilter.$stateful = angularMomentConfig.statefulFilters;

				return amDateFormatFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amDurationFormat
		 * @module angularMoment
		 * @function
		 */
			.filter('amDurationFormat', ['moment', 'angularMomentConfig', function (moment, angularMomentConfig) {
				function amDurationFormatFilter(value, format, suffix) {
					if (isUndefinedOrNull(value)) {
						return '';
					}

					return moment.duration(value, format).humanize(suffix);
				}

				amDurationFormatFilter.$stateful = angularMomentConfig.statefulFilters;

				return amDurationFormatFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amTimeAgo
		 * @module angularMoment
		 * @function
		 */
			.filter('amTimeAgo', ['moment', 'amMoment', 'angularMomentConfig', function (moment, amMoment, angularMomentConfig) {
				function amTimeAgoFilter(value, suffix, from) {
					var date, dateFrom;

					if (isUndefinedOrNull(value)) {
						return '';
					}

					value = amMoment.preprocessDate(value);
					date = moment(value);
					if (!date.isValid()) {
						return '';
					}

					dateFrom = moment(from);
					if (!isUndefinedOrNull(from) && dateFrom.isValid()) {
						return date.from(dateFrom, suffix);
					}

					return date.fromNow(suffix);
				}

				amTimeAgoFilter.$stateful = angularMomentConfig.statefulFilters;

				return amTimeAgoFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amSubtract
		 * @module angularMoment
		 * @function
		 */
			.filter('amSubtract', ['moment', 'angularMomentConfig', function (moment, angularMomentConfig) {
				function amSubtractFilter(value, amount, type) {

					if (isUndefinedOrNull(value)) {
						return '';
					}

					return moment(value).subtract(parseInt(amount, 10), type);
				}

				amSubtractFilter.$stateful = angularMomentConfig.statefulFilters;

				return amSubtractFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amAdd
		 * @module angularMoment
		 * @function
		 */
			.filter('amAdd', ['moment', 'angularMomentConfig', function (moment, angularMomentConfig) {
				function amAddFilter(value, amount, type) {

					if (isUndefinedOrNull(value)) {
						return '';
					}

					return moment(value).add(parseInt(amount, 10), type);
				}

				amAddFilter.$stateful = angularMomentConfig.statefulFilters;

				return amAddFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amStartOf
		 * @module angularMoment
		 * @function
		 */
			.filter('amStartOf', ['moment', 'angularMomentConfig', function (moment, angularMomentConfig) {
				function amStartOfFilter(value, type) {

					if (isUndefinedOrNull(value)) {
						return '';
					}

					return moment(value).startOf(type);
				}

				amStartOfFilter.$stateful = angularMomentConfig.statefulFilters;

				return amStartOfFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amEndOf
		 * @module angularMoment
		 * @function
		 */
			.filter('amEndOf', ['moment', 'angularMomentConfig', function (moment, angularMomentConfig) {
				function amEndOfFilter(value, type) {

					if (isUndefinedOrNull(value)) {
						return '';
					}

					return moment(value).endOf(type);
				}

				amEndOfFilter.$stateful = angularMomentConfig.statefulFilters;

				return amEndOfFilter;
 			}]);

		return 'angularMoment';
	}

	var isElectron = window && window.process && window.process.type;
	if (typeof define === 'function' && define.amd) {
		define(['angular', 'moment'], angularMoment);
	} else if (typeof module !== 'undefined' && module && module.exports && (typeof require === 'function') && !isElectron) {
		module.exports = angularMoment(require('angular'), require('moment'));
	} else {
		angularMoment(angular, (typeof global !== 'undefined' ? global : window).moment);
	}
})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"angular":"angular","moment":"/Users/Gavin/Documents/codes/pack/sil/node_modules/moment/moment.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-sanitize/angular-sanitize.js":[function(require,module,exports){
/**
 * @license AngularJS v1.6.1
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular) {'use strict';

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $sanitizeMinErr = angular.$$minErr('$sanitize');
var bind;
var extend;
var forEach;
var isDefined;
var lowercase;
var noop;
var htmlParser;
var htmlSanitizeWriter;

/**
 * @ngdoc module
 * @name ngSanitize
 * @description
 *
 * # ngSanitize
 *
 * The `ngSanitize` module provides functionality to sanitize HTML.
 *
 *
 * <div doc-module-components="ngSanitize"></div>
 *
 * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
 */

/**
 * @ngdoc service
 * @name $sanitize
 * @kind function
 *
 * @description
 *   Sanitizes an html string by stripping all potentially dangerous tokens.
 *
 *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are
 *   then serialized back to properly escaped html string. This means that no unsafe input can make
 *   it into the returned string.
 *
 *   The whitelist for URL sanitization of attribute values is configured using the functions
 *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider
 *   `$compileProvider`}.
 *
 *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.
 *
 * @param {string} html HTML input.
 * @returns {string} Sanitized HTML.
 *
 * @example
   <example module="sanitizeExample" deps="angular-sanitize.js" name="sanitize-service">
   <file name="index.html">
     <script>
         angular.module('sanitizeExample', ['ngSanitize'])
           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
             $scope.snippet =
               '<p style="color:blue">an html\n' +
               '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
               'snippet</p>';
             $scope.deliberatelyTrustDangerousSnippet = function() {
               return $sce.trustAsHtml($scope.snippet);
             };
           }]);
     </script>
     <div ng-controller="ExampleController">
        Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <td>Directive</td>
           <td>How</td>
           <td>Source</td>
           <td>Rendered</td>
         </tr>
         <tr id="bind-html-with-sanitize">
           <td>ng-bind-html</td>
           <td>Automatically uses $sanitize</td>
           <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind-html="snippet"></div></td>
         </tr>
         <tr id="bind-html-with-trust">
           <td>ng-bind-html</td>
           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
           <td>
           <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
&lt;/div&gt;</pre>
           </td>
           <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
         </tr>
         <tr id="bind-default">
           <td>ng-bind</td>
           <td>Automatically escapes</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
       </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should sanitize the html snippet by default', function() {
       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
     });

     it('should inline raw snippet if bound to a trusted value', function() {
       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).
         toBe("<p style=\"color:blue\">an html\n" +
              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
              "snippet</p>");
     });

     it('should escape snippet without any filter', function() {
       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).
         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
              "snippet&lt;/p&gt;");
     });

     it('should update', function() {
       element(by.model('snippet')).clear();
       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
         toBe('new <b>text</b>');
       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).toBe(
         'new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).toBe(
         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
     });
   </file>
   </example>
 */


/**
 * @ngdoc provider
 * @name $sanitizeProvider
 * @this
 *
 * @description
 * Creates and configures {@link $sanitize} instance.
 */
function $SanitizeProvider() {
  var svgEnabled = false;

  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {
    if (svgEnabled) {
      extend(validElements, svgElements);
    }
    return function(html) {
      var buf = [];
      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));
      }));
      return buf.join('');
    };
  }];


  /**
   * @ngdoc method
   * @name $sanitizeProvider#enableSvg
   * @kind function
   *
   * @description
   * Enables a subset of svg to be supported by the sanitizer.
   *
   * <div class="alert alert-warning">
   *   <p>By enabling this setting without taking other precautions, you might expose your
   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned
   *   outside of the containing element and be rendered over other elements on the page (e.g. a login
   *   link). Such behavior can then result in phishing incidents.</p>
   *
   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg
   *   tags within the sanitized content:</p>
   *
   *   <br>
   *
   *   <pre><code>
   *   .rootOfTheIncludedContent svg {
   *     overflow: hidden !important;
   *   }
   *   </code></pre>
   * </div>
   *
   * @param {boolean=} flag Enable or disable SVG support in the sanitizer.
   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called
   *    without an argument or self for chaining otherwise.
   */
  this.enableSvg = function(enableSvg) {
    if (isDefined(enableSvg)) {
      svgEnabled = enableSvg;
      return this;
    } else {
      return svgEnabled;
    }
  };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  // Private stuff
  //////////////////////////////////////////////////////////////////////////////////////////////////

  bind = angular.bind;
  extend = angular.extend;
  forEach = angular.forEach;
  isDefined = angular.isDefined;
  lowercase = angular.lowercase;
  noop = angular.noop;

  htmlParser = htmlParserImpl;
  htmlSanitizeWriter = htmlSanitizeWriterImpl;

  // Regular Expressions for parsing tags and attributes
  var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
    // Match everything outside of normal chars and " (quote character)
    NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g;


  // Good source of info about elements and attributes
  // http://dev.w3.org/html5/spec/Overview.html#semantics
  // http://simon.html5.org/html-elements

  // Safe Void Elements - HTML5
  // http://dev.w3.org/html5/spec/Overview.html#void-elements
  var voidElements = toMap('area,br,col,hr,img,wbr');

  // Elements that you can, intentionally, leave open (and which close themselves)
  // http://dev.w3.org/html5/spec/Overview.html#optional-tags
  var optionalEndTagBlockElements = toMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),
      optionalEndTagInlineElements = toMap('rp,rt'),
      optionalEndTagElements = extend({},
                                              optionalEndTagInlineElements,
                                              optionalEndTagBlockElements);

  // Safe Block Elements - HTML5
  var blockElements = extend({}, optionalEndTagBlockElements, toMap('address,article,' +
          'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
          'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul'));

  // Inline Elements - HTML5
  var inlineElements = extend({}, optionalEndTagInlineElements, toMap('a,abbr,acronym,b,' +
          'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' +
          'samp,small,span,strike,strong,sub,sup,time,tt,u,var'));

  // SVG Elements
  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements
  // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.
  // They can potentially allow for arbitrary javascript to be executed. See #11290
  var svgElements = toMap('circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,' +
          'hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,' +
          'radialGradient,rect,stop,svg,switch,text,title,tspan');

  // Blocked Elements (will be stripped)
  var blockedElements = toMap('script,style');

  var validElements = extend({},
                                     voidElements,
                                     blockElements,
                                     inlineElements,
                                     optionalEndTagElements);

  //Attributes that have href and hence need to be sanitized
  var uriAttrs = toMap('background,cite,href,longdesc,src,xlink:href');

  var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +
      'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +
      'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +
      'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +
      'valign,value,vspace,width');

  // SVG attributes (without "id" and "name" attributes)
  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes
  var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +
      'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +
      'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +
      'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +
      'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +
      'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +
      'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +
      'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +
      'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +
      'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +
      'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +
      'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +
      'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +
      'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +
      'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);

  var validAttrs = extend({},
                                  uriAttrs,
                                  svgAttrs,
                                  htmlAttrs);

  function toMap(str, lowercaseKeys) {
    var obj = {}, items = str.split(','), i;
    for (i = 0; i < items.length; i++) {
      obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;
    }
    return obj;
  }

  var inertBodyElement;
  (function(window) {
    var doc;
    if (window.document && window.document.implementation) {
      doc = window.document.implementation.createHTMLDocument('inert');
    } else {
      throw $sanitizeMinErr('noinert', 'Can\'t create an inert html document');
    }
    var docElement = doc.documentElement || doc.getDocumentElement();
    var bodyElements = docElement.getElementsByTagName('body');

    // usually there should be only one body element in the document, but IE doesn't have any, so we need to create one
    if (bodyElements.length === 1) {
      inertBodyElement = bodyElements[0];
    } else {
      var html = doc.createElement('html');
      inertBodyElement = doc.createElement('body');
      html.appendChild(inertBodyElement);
      doc.appendChild(html);
    }
  })(window);

  /**
   * @example
   * htmlParser(htmlString, {
   *     start: function(tag, attrs) {},
   *     end: function(tag) {},
   *     chars: function(text) {},
   *     comment: function(text) {}
   * });
   *
   * @param {string} html string
   * @param {object} handler
   */
  function htmlParserImpl(html, handler) {
    if (html === null || html === undefined) {
      html = '';
    } else if (typeof html !== 'string') {
      html = '' + html;
    }
    inertBodyElement.innerHTML = html;

    //mXSS protection
    var mXSSAttempts = 5;
    do {
      if (mXSSAttempts === 0) {
        throw $sanitizeMinErr('uinput', 'Failed to sanitize html because the input is unstable');
      }
      mXSSAttempts--;

      // strip custom-namespaced attributes on IE<=11
      if (window.document.documentMode) {
        stripCustomNsAttrs(inertBodyElement);
      }
      html = inertBodyElement.innerHTML; //trigger mXSS
      inertBodyElement.innerHTML = html;
    } while (html !== inertBodyElement.innerHTML);

    var node = inertBodyElement.firstChild;
    while (node) {
      switch (node.nodeType) {
        case 1: // ELEMENT_NODE
          handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));
          break;
        case 3: // TEXT NODE
          handler.chars(node.textContent);
          break;
      }

      var nextNode;
      if (!(nextNode = node.firstChild)) {
        if (node.nodeType === 1) {
          handler.end(node.nodeName.toLowerCase());
        }
        nextNode = node.nextSibling;
        if (!nextNode) {
          while (nextNode == null) {
            node = node.parentNode;
            if (node === inertBodyElement) break;
            nextNode = node.nextSibling;
            if (node.nodeType === 1) {
              handler.end(node.nodeName.toLowerCase());
            }
          }
        }
      }
      node = nextNode;
    }

    while ((node = inertBodyElement.firstChild)) {
      inertBodyElement.removeChild(node);
    }
  }

  function attrToMap(attrs) {
    var map = {};
    for (var i = 0, ii = attrs.length; i < ii; i++) {
      var attr = attrs[i];
      map[attr.name] = attr.value;
    }
    return map;
  }


  /**
   * Escapes all potentially dangerous characters, so that the
   * resulting string can be safely inserted into attribute or
   * element text.
   * @param value
   * @returns {string} escaped text
   */
  function encodeEntities(value) {
    return value.
      replace(/&/g, '&amp;').
      replace(SURROGATE_PAIR_REGEXP, function(value) {
        var hi = value.charCodeAt(0);
        var low = value.charCodeAt(1);
        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
      }).
      replace(NON_ALPHANUMERIC_REGEXP, function(value) {
        return '&#' + value.charCodeAt(0) + ';';
      }).
      replace(/</g, '&lt;').
      replace(/>/g, '&gt;');
  }

  /**
   * create an HTML/XML writer which writes to buffer
   * @param {Array} buf use buf.join('') to get out sanitized html string
   * @returns {object} in the form of {
   *     start: function(tag, attrs) {},
   *     end: function(tag) {},
   *     chars: function(text) {},
   *     comment: function(text) {}
   * }
   */
  function htmlSanitizeWriterImpl(buf, uriValidator) {
    var ignoreCurrentElement = false;
    var out = bind(buf, buf.push);
    return {
      start: function(tag, attrs) {
        tag = lowercase(tag);
        if (!ignoreCurrentElement && blockedElements[tag]) {
          ignoreCurrentElement = tag;
        }
        if (!ignoreCurrentElement && validElements[tag] === true) {
          out('<');
          out(tag);
          forEach(attrs, function(value, key) {
            var lkey = lowercase(key);
            var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');
            if (validAttrs[lkey] === true &&
              (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
              out(' ');
              out(key);
              out('="');
              out(encodeEntities(value));
              out('"');
            }
          });
          out('>');
        }
      },
      end: function(tag) {
        tag = lowercase(tag);
        if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {
          out('</');
          out(tag);
          out('>');
        }
        // eslint-disable-next-line eqeqeq
        if (tag == ignoreCurrentElement) {
          ignoreCurrentElement = false;
        }
      },
      chars: function(chars) {
        if (!ignoreCurrentElement) {
          out(encodeEntities(chars));
        }
      }
    };
  }


  /**
   * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare
   * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want
   * to allow any of these custom attributes. This method strips them all.
   *
   * @param node Root element to process
   */
  function stripCustomNsAttrs(node) {
    while (node) {
      if (node.nodeType === window.Node.ELEMENT_NODE) {
        var attrs = node.attributes;
        for (var i = 0, l = attrs.length; i < l; i++) {
          var attrNode = attrs[i];
          var attrName = attrNode.name.toLowerCase();
          if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {
            node.removeAttributeNode(attrNode);
            i--;
            l--;
          }
        }
      }

      var nextNode = node.firstChild;
      if (nextNode) {
        stripCustomNsAttrs(nextNode);
      }

      node = node.nextSibling;
    }
  }
}

function sanitizeText(chars) {
  var buf = [];
  var writer = htmlSanitizeWriter(buf, noop);
  writer.chars(chars);
  return buf.join('');
}


// define ngSanitize module and register $sanitize service
angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);

/**
 * @ngdoc filter
 * @name linky
 * @kind function
 *
 * @description
 * Finds links in text input and turns them into html links. Supports `http/https/ftp/mailto` and
 * plain email address links.
 *
 * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
 *
 * @param {string} text Input text.
 * @param {string} target Window (`_blank|_self|_parent|_top`) or named frame to open links in.
 * @param {object|function(url)} [attributes] Add custom attributes to the link element.
 *
 *    Can be one of:
 *
 *    - `object`: A map of attributes
 *    - `function`: Takes the url as a parameter and returns a map of attributes
 *
 *    If the map of attributes contains a value for `target`, it overrides the value of
 *    the target parameter.
 *
 *
 * @returns {string} Html-linkified and {@link $sanitize sanitized} text.
 *
 * @usage
   <span ng-bind-html="linky_expression | linky"></span>
 *
 * @example
   <example module="linkyExample" deps="angular-sanitize.js" name="linky-filter">
     <file name="index.html">
       <div ng-controller="ExampleController">
       Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <th>Filter</th>
           <th>Source</th>
           <th>Rendered</th>
         </tr>
         <tr id="linky-filter">
           <td>linky filter</td>
           <td>
             <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
           </td>
           <td>
             <div ng-bind-html="snippet | linky"></div>
           </td>
         </tr>
         <tr id="linky-target">
          <td>linky target</td>
          <td>
            <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
          </td>
          <td>
            <div ng-bind-html="snippetWithSingleURL | linky:'_blank'"></div>
          </td>
         </tr>
         <tr id="linky-custom-attributes">
          <td>linky custom attributes</td>
          <td>
            <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"&gt;<br>&lt;/div&gt;</pre>
          </td>
          <td>
            <div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"></div>
          </td>
         </tr>
         <tr id="escaped-html">
           <td>no filter</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
     </file>
     <file name="script.js">
       angular.module('linkyExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.snippet =
             'Pretty text with some links:\n' +
             'http://angularjs.org/,\n' +
             'mailto:us@somewhere.org,\n' +
             'another@somewhere.org,\n' +
             'and one more: ftp://127.0.0.1/.';
           $scope.snippetWithSingleURL = 'http://angularjs.org/';
         }]);
     </file>
     <file name="protractor.js" type="protractor">
       it('should linkify the snippet with urls', function() {
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
       });

       it('should not linkify snippet without the linky filter', function() {
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
       });

       it('should update', function() {
         element(by.model('snippet')).clear();
         element(by.model('snippet')).sendKeys('new http://link.');
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('new http://link.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
             .toBe('new http://link.');
       });

       it('should work with the target property', function() {
        expect(element(by.id('linky-target')).
            element(by.binding("snippetWithSingleURL | linky:'_blank'")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
       });

       it('should optionally add custom attributes', function() {
        expect(element(by.id('linky-custom-attributes')).
            element(by.binding("snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');
       });
     </file>
   </example>
 */
angular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {
  var LINKY_URL_REGEXP =
        /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
      MAILTO_REGEXP = /^mailto:/i;

  var linkyMinErr = angular.$$minErr('linky');
  var isDefined = angular.isDefined;
  var isFunction = angular.isFunction;
  var isObject = angular.isObject;
  var isString = angular.isString;

  return function(text, target, attributes) {
    if (text == null || text === '') return text;
    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);

    var attributesFn =
      isFunction(attributes) ? attributes :
      isObject(attributes) ? function getAttributesObject() {return attributes;} :
      function getEmptyAttributesObject() {return {};};

    var match;
    var raw = text;
    var html = [];
    var url;
    var i;
    while ((match = raw.match(LINKY_URL_REGEXP))) {
      // We can not end in these as they are sometimes found at the end of the sentence
      url = match[0];
      // if we did not match ftp/http/www/mailto then assume mailto
      if (!match[2] && !match[4]) {
        url = (match[3] ? 'http://' : 'mailto:') + url;
      }
      i = match.index;
      addText(raw.substr(0, i));
      addLink(url, match[0].replace(MAILTO_REGEXP, ''));
      raw = raw.substring(i + match[0].length);
    }
    addText(raw);
    return $sanitize(html.join(''));

    function addText(text) {
      if (!text) {
        return;
      }
      html.push(sanitizeText(text));
    }

    function addLink(url, text) {
      var key, linkAttributes = attributesFn(url);
      html.push('<a ');

      for (key in linkAttributes) {
        html.push(key + '="' + linkAttributes[key] + '" ');
      }

      if (isDefined(target) && !('target' in linkAttributes)) {
        html.push('target="',
                  target,
                  '" ');
      }
      html.push('href="',
                url.replace(/"/g, '&quot;'),
                '">');
      addText(text);
      html.push('</a>');
    }
  };
}]);


})(window, window.angular);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-sanitize/index.js":[function(require,module,exports){
require('./angular-sanitize');
module.exports = 'ngSanitize';

},{"./angular-sanitize":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-sanitize/angular-sanitize.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-validation-match/dist/angular-validation-match.js":[function(require,module,exports){
/*!
 * angular-validation-match
 * Checks if one input matches another
 * @version v1.9.0
 * @link https://github.com/TheSharpieOne/angular-validation-match
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
(function(window, angular, undefined){'use strict';

match.$inject = ["$parse"];
angular.module('validation.match', []);

angular.module('validation.match').directive('match', match);

function match ($parse) {
    return {
        require: '?ngModel',
        restrict: 'A',
        link: function(scope, elem, attrs, ctrl) {
            if(!ctrl || !attrs.match) {
                return;
            }

            var matchGetter = $parse(attrs.match);
            var caselessGetter = $parse(attrs.matchCaseless);
            var noMatchGetter = $parse(attrs.notMatch);
            var matchIgnoreEmptyGetter = $parse(attrs.matchIgnoreEmpty);

            scope.$watch(getMatchValue, function(){
                ctrl.$$parseAndValidate();
            });

            ctrl.$validators.match = function(modelValue, viewValue){
              var matcher = modelValue || viewValue;
              var match = getMatchValue();
              var notMatch = noMatchGetter(scope);
              var value;

              if (matchIgnoreEmptyGetter(scope) && !viewValue) {
                return true;
              }

              if(caselessGetter(scope)){
                value = angular.lowercase(matcher) === angular.lowercase(match);
              }else{
                value = matcher === match;
              }
              /*jslint bitwise: true */
              value ^= notMatch;
              /*jslint bitwise: false */
              return !!value;
            };

            function getMatchValue(){
                var match = matchGetter(scope);
                if(angular.isObject(match) && match.hasOwnProperty('$viewValue')){
                    match = match.$viewValue;
                }
                return match;
            }
        }
    };
}
})(window, window.angular);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-validation-match/index.js":[function(require,module,exports){
require('./dist/angular-validation-match');
module.exports = 'validation.match';

},{"./dist/angular-validation-match":"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-validation-match/dist/angular-validation-match.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-validation/dist/angular-validation-rule.js":[function(require,module,exports){
(function() {
  angular
    .module('validation.rule', ['validation'])
    .config(['$validationProvider', function($validationProvider) {
      var expression = {
        required: function(value) {
          return !!value;
        },
        url: /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/,
        email: /^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/,
        number: /^\d+$/,
        minlength: function(value, scope, element, attrs, param) {
          return value.length >= param;
        },
        maxlength: function(value, scope, element, attrs, param) {
          return value.length <= param;
        }
      };

      var defaultMsg = {
        required: {
          error: 'This should be Required!!',
          success: 'It\'s Required'
        },
        url: {
          error: 'This should be Url',
          success: 'It\'s Url'
        },
        email: {
          error: 'This should be Email',
          success: 'It\'s Email'
        },
        number: {
          error: 'This should be Number',
          success: 'It\'s Number'
        },
        minlength: {
          error: 'This should be longer',
          success: 'Long enough!'
        },
        maxlength: {
          error: 'This should be shorter',
          success: 'Short enough!'
        }
      };
      $validationProvider.setExpression(expression).setDefaultMsg(defaultMsg);
    }]);
}).call(this);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/angular-validation/dist/angular-validation.js":[function(require,module,exports){
angular.module('validation', ['validation.provider', 'validation.directive']);
angular.module('validation.provider', []);
angular.module('validation.directive', ['validation.provider']);

(function() {
  angular
    .module('validation.provider')
    .provider('$validation', Provider);

  function Provider() {
    var $injector;
    var $scope;
    var $http;
    var $q;
    var $timeout;
    var _this = this;

    /**
     * Setup the provider
     * @param injector
     */
    var setup = function(injector) {
      $injector = injector;
      $scope = $injector.get('$rootScope');
      $http = $injector.get('$http');
      $q = $injector.get('$q');
      $timeout = $injector.get('$timeout');
    };

    /**
     * Define validation type RegExp
     * @type {{}}
     */
    var expression = {};

    /**
     * default valid method
     * @type {{}}
     */
    var validMethod = null;

    /**
     * default error, success message
     * @type {{}}
     */
    var defaultMsg = {};

    /**
     * Allow user to set a custom Expression, do remember set the default message using setDefaultMsg
     * @param obj
     * @returns {*}
     */
    this.setExpression = function(obj) {
      angular.extend(expression, obj);
      return _this;
    };

    /**
     * Get the Expression
     * @param exprs
     * @returns {*}
     */
    this.getExpression = function(exprs) {
      return expression[exprs];
    };

    /**
     * Allow user to set default message
     * @param obj
     * @returns {*}
     */
    this.setDefaultMsg = function(obj) {
      angular.extend(defaultMsg, obj);
      return _this;
    };

    /**
     * Get the Default Message
     * @param msg
     * @returns {*}
     */
    this.getDefaultMsg = function(msg) {
      return defaultMsg[msg];
    };

    /**
     * allow user to set the global valid method
     * @param v
     * @returns {*}
     */
    this.setValidMethod = function(v) {
      validMethod = v;
    };

    /**
     * Get the valid method     
     * @returns {*}
     */
    this.getValidMethod = function() {
      return validMethod;
    };

    /**
     * Override the errorHTML function
     * @param func
     * @returns {*}
     */
    this.setErrorHTML = function(func) {
      if (func.constructor !== Function) {
        return;
      }
      _this.getErrorHTML = func;
      return _this;
    };

    /**
     * Invalid message HTML, here's the default
     * @param message
     * @returns {string}
     */
    this.getErrorHTML = function(message) {
      return '<p class="validation-invalid">' + message + '</p>';
    };

    /**
     * Override the successHTML function
     * @param func
     * @returns {*}
     */
    this.setSuccessHTML = function(func) {
      if (func.constructor !== Function) {
        return;
      }
      _this.getSuccessHTML = func;
      return _this;
    };

    /**
     * Valid message HTML, here's the default
     * @param message
     * @returns {string}
     */
    this.getSuccessHTML = function(message) {
      return '<p class="validation-valid">' + message + '</p>';
    };

    /**
     * Whether show the validation success message
     * You can easily change this to false in your config
     * example: $validationProvider.showSuccessMessage = false;
     * @type {boolean}
     */
    this.showSuccessMessage = true;

    /**
     * Whether show the validation error message
     * You can easily change this to false in your config
     * example: $validationProvider.showErrorMessage = false;
     * @type {boolean}
     */
    this.showErrorMessage = true;

    /**
     * Check form valid, return true
     * checkValid(Form): Check the specific form(Form) valid from angular `$valid`
     * @param form
     * @returns {boolean}
     */
    this.checkValid = function(form) {
      return !!(form && form.$valid);
    };

    /**
     * Validate the form when click submit, when `validMethod = submit`
     * @param form
     * @returns {promise|*}
     */
    this.validate = function(form) {
      var deferred = $q.defer();
      var idx = 0;

      if (form === undefined) {
        console.error('This is not a regular Form name scope');
        deferred.reject('This is not a regular Form name scope');
        return deferred.promise;
      }

      if (form.validationId) { // single
        $scope.$broadcast(form.$name + 'submit-' + form.validationId, idx++);
      } else if (form.constructor === Array) { // multiple
        for (var k in form) {
          $scope.$broadcast(form[k].$name + 'submit-' + form[k].validationId, idx++);
        }
      } else {
        for (var i in form) { // whole scope
          if (i[0] !== '$' && form[i].hasOwnProperty('$dirty')) {
            $scope.$broadcast(i + 'submit-' + form[i].validationId, idx++);
          }
        }
      }

      deferred.promise.success = function(fn) {
        deferred.promise.then(function(value) {
          fn(value);
        });
        return deferred.promise;
      };

      deferred.promise.error = function(fn) {
        deferred.promise.then(null, function(value) {
          fn(value);
        });
        return deferred.promise;
      };

      $timeout(function() {
        if (_this.checkValid(form)) {
          deferred.resolve('success');
        } else {
          deferred.reject('error');
        }
      });

      return deferred.promise;
    };

    /**
     * Do this function if validation valid
     * @param element
     */
    this.validCallback = null;

    /**
     * Do this function if validation invalid
     * @param element
     */
    this.invalidCallback = null;

    /**
     * Do this function when reset is performed
     * @param element
     */
    this.resetCallback = null;

    /**
     * reset the specific form
     * @param form
     */
    this.reset = function(form) {
      if (form === undefined) {
        console.error('This is not a regular Form name scope');
        return;
      }

      if (form.validationId) {
        $scope.$broadcast(form.$name + 'reset-' + form.validationId);
      } else if (form.constructor === Array) {
        for (var k in form) {
          $scope.$broadcast(form[k].$name + 'reset-' + form[k].validationId);
        }
      } else {
        for (var i in form) {
          if (i[0] !== '$' && form[i].hasOwnProperty('$dirty')) {
            $scope.$broadcast(i + 'reset-' + form[i].validationId);
          }
        }
      }
    };

    /**
     * Add Message Element in config phase
     * When you need custom your messageElement 
     * NODE: this funtion & and `message-id` attribute, have similar purpose.
     * This function will help you add your `messageElement` automatically instead of pre-defined.
     * @param element
     */
    this.addMsgElement = function(element) {
      return element.after('<span></span>');
    };

    /**
     * Add Message Element in config phase
     * When you need custom your messageElement 
     * NODE: this funtion & and `message-id` attribute, have similar purpose.
     * This function will help you add your `messageElement` automatically instead of pre-defined.
     * @param element
     */
    this.getMsgElement = function(element) {
      return element.next();
    };

    /**
     * $get
     * @returns {{setErrorHTML: *, getErrorHTML: Function, setSuccessHTML: *, getSuccessHTML: Function, setExpression: *, getExpression: Function, setDefaultMsg: *, getDefaultMsg: Function, checkValid: Function, validate: Function, reset: Function}}
     */
    this.$get = ['$injector', function($injector) {
      setup($injector);
      return {
        setValidMethod: this.setValidMethod,
        getValidMethod: this.getValidMethod,
        setErrorHTML: this.setErrorHTML,
        getErrorHTML: this.getErrorHTML,
        setSuccessHTML: this.setSuccessHTML,
        getSuccessHTML: this.getSuccessHTML,
        setExpression: this.setExpression,
        getExpression: this.getExpression,
        setDefaultMsg: this.setDefaultMsg,
        getDefaultMsg: this.getDefaultMsg,
        showSuccessMessage: this.showSuccessMessage,
        showErrorMessage: this.showErrorMessage,
        checkValid: this.checkValid,
        validate: this.validate,
        validCallback: this.validCallback,
        invalidCallback: this.invalidCallback,
        resetCallback: this.resetCallback,
        reset: this.reset,
        addMsgElement: this.addMsgElement,
        getMsgElement: this.getMsgElement
      };
    }];
  }
}).call(this);

(function() {
  angular
    .module('validation.directive')
    .directive('validationReset', Reset);

  function Reset($injector) {
    var $validationProvider = $injector.get('$validation');
    var $timeout = $injector.get('$timeout');
    var $parse = $injector.get('$parse');
    return {
      link: function postLink(scope, element, attrs) {
        var form = $parse(attrs.validationReset)(scope);
        $timeout(function() {
          element.on('click', function(e) {
            e.preventDefault();
            $validationProvider.reset(form);
          });
        });
      }
    };
  }
  Reset.$inject = ['$injector'];
}).call(this);

(function() {
  angular
    .module('validation.directive')
    .directive('validationSubmit', Submit);

  function Submit($injector) {
    var $validationProvider = $injector.get('$validation');
    var $timeout = $injector.get('$timeout');
    var $parse = $injector.get('$parse');
    return {
      priority: 1, // execute before ng-click (0)
      require: '?ngClick',
      link: function postLink(scope, element, attrs) {
        var form = $parse(attrs.validationSubmit)(scope);
        $timeout(function() {
          // Disable ng-click event propagation
          element.off('click');
          element.on('click', function(e) {
            e.preventDefault();
            $validationProvider.validate(form)
              .success(function() {
                $parse(attrs.ngClick)(scope);
              });
          });
        });
      }
    };
  }
  Submit.$inject = ['$injector'];
}).call(this);

(function() {
  angular
    .module('validation.directive')
    .directive('validator', Validator);

  function Validator($injector) {
    var $validationProvider = $injector.get('$validation');
    var $q = $injector.get('$q');
    var $timeout = $injector.get('$timeout');
    var $compile = $injector.get('$compile');
    var $parse = $injector.get('$parse');
    var groups = {};

    /**
     * Do this function if validation valid
     * @param element
     * @param validMessage
     * @param validation
     * @param callback
     * @param ctrl
     * @returns {}
     */
    var validFunc = function(element, validMessage, validation, scope, ctrl, attrs) {
      var messageToShow = validMessage || $validationProvider.getDefaultMsg(validation).success;
      var validCallback = $parse(attrs.validCallback);
      var messageId = attrs.messageId;
      var validationGroup = attrs.validationGroup;
      var messageElem;

      if (messageId || validationGroup) messageElem = angular.element(document.querySelector('#' + (messageId || validationGroup)));
      else messageElem = $validationProvider.getMsgElement(element);

      if (element.attr('no-validation-message')) {
        messageElem.css('display', 'none');
      } else if ($validationProvider.showSuccessMessage && messageToShow) {
        messageElem.html('').append($compile($validationProvider.getSuccessHTML(messageToShow, element, attrs))(scope));
        messageElem.css('display', '');
      } else {
        messageElem.css('display', 'none');
      }

      ctrl.$setValidity(ctrl.$name, true);
      validCallback(scope, {
        message: messageToShow
      });
      if ($validationProvider.validCallback) $validationProvider.validCallback(element);

      return true;
    };


    /**
     * Do this function if validation invalid
     * @param element
     * @param validMessage
     * @param validation
     * @param callback
     * @param ctrl
     * @returns {}
     */
    var invalidFunc = function(element, validMessage, validation, scope, ctrl, attrs) {
      var messageToShow = validMessage || $validationProvider.getDefaultMsg(validation).error;
      var invalidCallback = $parse(attrs.invalidCallback);
      var messageId = attrs.messageId;
      var validationGroup = attrs.validationGroup;
      var messageElem;

      if (messageId || validationGroup) messageElem = angular.element(document.querySelector('#' + (messageId || validationGroup)));
      else messageElem = $validationProvider.getMsgElement(element);

      if (element.attr('no-validation-message')) {
        messageElem.css('display', 'none');
      } else if ($validationProvider.showErrorMessage && messageToShow) {
        messageElem.html('').append($compile($validationProvider.getErrorHTML(messageToShow, element, attrs))(scope));
        messageElem.css('display', '');
      } else {
        messageElem.css('display', 'none');
      }

      ctrl.$setValidity(ctrl.$name, false);
      invalidCallback(scope, {
        message: messageToShow
      });
      if ($validationProvider.invalidCallback) $validationProvider.invalidCallback(element);

      return false;
    };

    /**
     * Verify whether there is one of the elements inside the group valid.
     * If so, it returns true, otherwise, it returns false
     *
     * @param validationGroup
     * @return {boolean}
     */
    var checkValidationGroup = function(validationGroup) {
      var group = groups[validationGroup];

      return Object.keys(group).some(function(key) {
        return group[key];
      });
    };

    /**
     * Set validity to all elements inside the given group
     *
     * @param scope
     * @param groupName
     * @param validity
     */
    function setValidationGroup(scope, validationGroup, validity) {
      var validationGroupElems = document.querySelectorAll('*[validation-group=' + validationGroup + ']');

      // Loop through all elements inside the group
      for (var i = 0, len = validationGroupElems.length; i < len; i++) {
        var elem = validationGroupElems[i];
        var formName = elem.form.name;
        var elemName = elem.name;
        scope[formName][elemName].$setValidity(elemName, validity);
      }
    }

    /**
     * collect elements for focus
     * @type {Object}
     ***private variable
     */
    var focusElements = {};


    /**
     * Check Validation with Function or RegExp
     * @param scope
     * @param element
     * @param attrs
     * @param ctrl
     * @param validation
     * @param value
     * @returns {}
     */
    var checkValidation = function(scope, element, attrs, ctrl, validation, value) {
      var validators = validation.slice(0);
      var validatorExpr = validators[0].trim();
      var paramIndex = validatorExpr.indexOf('=');
      var validator = paramIndex === -1 ? validatorExpr : validatorExpr.substr(0, paramIndex);
      var validatorParam = paramIndex === -1 ? null : validatorExpr.substr(paramIndex + 1);
      var leftValidation = validators.slice(1);
      var successMessage = validator + 'SuccessMessage';
      var errorMessage = validator + 'ErrorMessage';
      var expression = $validationProvider.getExpression(validator);
      var validationGroup = attrs.validationGroup;
      var valid = {
        success: function() {
          validFunc(element, attrs[successMessage], validator, scope, ctrl, attrs);
          if (leftValidation.length) {
            return checkValidation(scope, element, attrs, ctrl, leftValidation, value);
          } else {
            return true;
          }
        },
        error: function() {
          return invalidFunc(element, attrs[errorMessage], validator, scope, ctrl, attrs);
        }
      };

      if (expression === undefined) {
        console.error('You are using undefined validator "%s"', validator);
        if (leftValidation.length) return checkValidation(scope, element, attrs, ctrl, leftValidation, value);
        else return;
      }
      // Check with Function
      if (expression.constructor === Function) {
        return $q.all([$validationProvider.getExpression(validator)(value, scope, element, attrs, validatorParam)])
          .then(function(data) {
            if (data && data.length > 0 && data[0]) {
              if (validationGroup) {
                groups[validationGroup][ctrl.$name] = true;
                setValidationGroup(scope, validationGroup, true);
              }
              return valid.success();
            } else if (validationGroup) {
              groups[validationGroup][ctrl.$name] = false;

              // Whenever the element is invalid, we'll check whether one of the elements inside the its group valid or not.
              // If there is a valid element, its invalid message won't be shown, Otherwise, shows its invalid message.
              if (checkValidationGroup(validationGroup)) {
                setValidationGroup(scope, validationGroup, true);
              } else {
                setValidationGroup(scope, validationGroup, false);
                return valid.error();
              }
            } else return valid.error();
          }, function() {
            return valid.error();
          });
      }

      // Check with RegExp
      else if (expression.constructor === RegExp) {
        // Only apply the test if the value is neither undefined or null
        if (value !== undefined && value !== null) {
          if ($validationProvider.getExpression(validator).test(value)) {
            if (validationGroup) {
              groups[validationGroup][ctrl.$name] = true;
              setValidationGroup(scope, validationGroup, true);
            }
            return valid.success();
          } else if (validationGroup) {
            groups[validationGroup][ctrl.$name] = false;

            // Whenever the element is invalid, we'll check whether one of the elements inside the its group valid or not.
            // If there is a valid element, its invalid message won't be shown, Otherwise, shows its invalid message.
            if (checkValidationGroup(validationGroup)) {
              setValidationGroup(scope, validationGroup, true);
            } else {
              setValidationGroup(scope, validationGroup, false);
              return valid.error();
            }
          } else return valid.error();
        }
      } else return valid.error();
    };

    /**
     * generate unique guid
     */
    var s4 = function() {
      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    };
    var guid = function() {
      return (s4() + s4() + s4() + s4());
    };


    return {
      restrict: 'A',
      require: 'ngModel',
      link: function(scope, element, attrs, ctrl) {
        /**
         * All attributes
         */
        var validator = attrs.validator;
        var messageId = attrs.messageId;
        var validationGroup = attrs.validationGroup;
        var validMethod = attrs.validMethod;
        var ngModel = attrs.ngModel;

        /**
         * watch
         * @type {watch}
         *
         * Use to collect scope.$watch method
         *
         * use watch() to destroy the $watch method
         */
        var watch = function() {};

        /**
         * validator
         * @type {Array}
         *
         * Convert user input String to Array
         */
        var validation = validator.split(',');

        /**
         * guid use
         */
        var uid = ctrl.validationId = guid();

        /**
         * to have avalue to rollback to
         */
        var originalViewValue = null;

        /**
         * Set initial validity to undefined if no boolean value is transmitted
         */
        var initialValidity;
        if (typeof scope.initialValidity === 'boolean') {
          initialValidity = scope.initialValidity;
        }

        /**
         * Set up groups object in order to keep track validation of elements
         */
        if (validationGroup) {
          if (!groups[validationGroup]) groups[validationGroup] = {};
          groups[validationGroup][ctrl.$name] = false;
        }

        /**
         * Default Valid/Invalid Message
         */
        if (!(messageId || validationGroup)) $validationProvider.addMsgElement(element);

        /**
         * Set custom initial validity
         * Usage: <input initial-validity="true" ... >
         */
        ctrl.$setValidity(ctrl.$name, initialValidity);

        /**
         * Reset the validation for specific form
         */
        scope.$on(ctrl.$name + 'reset-' + uid, function() {
          /**
           * clear scope.$watch here
           * when reset status
           * clear the $watch method to prevent
           * $watch again while reset the form
           */
          watch();

          $timeout(function() {
            ctrl.$setViewValue(originalViewValue);
            ctrl.$setPristine();
            ctrl.$setValidity(ctrl.$name, undefined);
            ctrl.$render();
            if (messageId || validationGroup) angular.element(document.querySelector('#' + (messageId || validationGroup))).html('');
            else $validationProvider.getMsgElement(element).html('');

            if ($validationProvider.resetCallback) $validationProvider.resetCallback(element);
          });
        });

        /**
         * Check validator
         */
        validMethod = (angular.isUndefined(validMethod)) ? $validationProvider.getValidMethod() : validMethod;

        /**
         * Click submit form, check the validity when submit
         */
        scope.$on(ctrl.$name + 'submit-' + uid, function(event, index) {
          var value = ctrl.$viewValue;
          var isValid = false;

          isValid = checkValidation(scope, element, attrs, ctrl, validation, value);

          if (validMethod === 'submit') {
            // clear previous scope.$watch
            watch();
            watch = scope.$watch(function() {
              return scope.$eval(ngModel);
            }, function(value, oldValue) {
              // don't watch when init
              if (value === oldValue) {
                return;
              }

              // scope.$watch will translate '' to undefined
              // undefined/null will pass the required submit /^.+/
              // cause some error in this validation
              if (value === undefined || value === null) {
                value = '';
              }

              isValid = checkValidation(scope, element, attrs, ctrl, validation, value);
            });
          }

          var setFocus = function(isValid) {
            if (isValid) {
              delete focusElements[index];
            } else {
              focusElements[index] = element[0];

              $timeout(function() {
                focusElements[Math.min.apply(null, Object.keys(focusElements))].focus();
              }, 0);
            }
          };

          if (isValid.constructor === Object) isValid.then(setFocus);
          else setFocus(isValid);
        });

        /**
         * Validate blur method
         */
        if (validMethod === 'blur') {
          element.bind('blur', function() {
            var value = scope.$eval(ngModel);
            scope.$apply(function() {
              checkValidation(scope, element, attrs, ctrl, validation, value);
            });
          });

          return;
        }

        /**
         * Validate submit & submit-only method
         */
        if (validMethod === 'submit' || validMethod === 'submit-only') {
          return;
        }

        /**
         * Validate watch method
         * This is the default method
         */
        scope.$watch(function() {
          return scope.$eval(ngModel);
        }, function(value) {
          /**
           * dirty, pristine, viewValue control here
           */
          if (ctrl.$pristine && ctrl.$viewValue) {
            // has value when initial
            originalViewValue = ctrl.$viewValue || '';
            ctrl.$setViewValue(ctrl.$viewValue);
          } else if (ctrl.$pristine) {
            // Don't validate form when the input is clean(pristine)
            if (messageId || validationGroup) angular.element(document.querySelector('#' + (messageId || validationGroup))).html('');
            else $validationProvider.getMsgElement(element).html('');
            return;
          }
          checkValidation(scope, element, attrs, ctrl, validation, value);
        });

        $timeout(function() {
          /**
           * Don't showup the validation Message
           */
          attrs.$observe('noValidationMessage', function(value) {
            var el;
            if (messageId || validationGroup) el = angular.element(document.querySelector('#' + (messageId || validationGroup)));
            else el = $validationProvider.getMsgElement(element);
            if (value === 'true' || value === true) el.css('display', 'none');
            else if (value === 'false' || value === false) el.css('display', 'block');
          });
        });
      }
    };
  }
  Validator.$inject = ['$injector'];
}).call(this);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/dist/js/npm.js":[function(require,module,exports){
// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
require('../../js/transition.js')
require('../../js/alert.js')
require('../../js/button.js')
require('../../js/carousel.js')
require('../../js/collapse.js')
require('../../js/dropdown.js')
require('../../js/modal.js')
require('../../js/tooltip.js')
require('../../js/popover.js')
require('../../js/scrollspy.js')
require('../../js/tab.js')
require('../../js/affix.js')
},{"../../js/affix.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/affix.js","../../js/alert.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/alert.js","../../js/button.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/button.js","../../js/carousel.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/carousel.js","../../js/collapse.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/collapse.js","../../js/dropdown.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/dropdown.js","../../js/modal.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/modal.js","../../js/popover.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/popover.js","../../js/scrollspy.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/scrollspy.js","../../js/tab.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/tab.js","../../js/tooltip.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/tooltip.js","../../js/transition.js":"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/transition.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/affix.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: affix.js v3.3.7
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.7'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/alert.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: alert.js v3.3.7
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.7'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector === '#' ? [] : selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/button.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: button.js v3.3.7
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.7'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d).prop(d, true)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d).prop(d, false)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target).closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"], input[type="checkbox"]'))) {
        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
        e.preventDefault()
        // The target component still receive the focus
        if ($btn.is('input,button')) $btn.trigger('focus')
        else $btn.find('input:visible,button:visible').first().trigger('focus')
      }
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/carousel.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: carousel.js v3.3.7
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.7'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/collapse.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: collapse.js v3.3.7
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

/* jshint latedef: false */

+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.7'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/dropdown.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: dropdown.js v3.3.7
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.7'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/modal.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: modal.js v3.3.7
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.7'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (document !== e.target &&
            this.$element[0] !== e.target &&
            !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/popover.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: popover.js v3.3.7
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.7'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/scrollspy.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.7
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.7'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/tab.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tab.js v3.3.7
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.7'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/tooltip.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.7
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.7'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.
        that.$element
          .removeAttr('aria-describedby')
          .trigger('hidden.bs.' + that.type)
      }
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var isSvg = window.SVGElement && el instanceof window.SVGElement
    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
    // See https://github.com/twbs/bootstrap/issues/20280
    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
      that.$element = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/bootstrap/js/transition.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: transition.js v3.3.7
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/checklist-model/checklist-model.js":[function(require,module,exports){
/**
 * Checklist-model
 * AngularJS directive for list of checkboxes
 * https://github.com/vitalets/checklist-model
 * License: MIT http://opensource.org/licenses/MIT
 */

 /* commonjs package manager support (eg componentjs) */
 if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
   module.exports = 'checklist-model';
 }

angular.module('checklist-model', [])
.directive('checklistModel', ['$parse', '$compile', function($parse, $compile) {
  // contains
  function contains(arr, item, comparator) {
    if (angular.isArray(arr)) {
      for (var i = arr.length; i--;) {
        if (comparator(arr[i], item)) {
          return true;
        }
      }
    }
    return false;
  }

  // add
  function add(arr, item, comparator) {
    arr = angular.isArray(arr) ? arr : [];
      if(!contains(arr, item, comparator)) {
          arr.push(item);
      }
    return arr;
  }

  // remove
  function remove(arr, item, comparator) {
    if (angular.isArray(arr)) {
      for (var i = arr.length; i--;) {
        if (comparator(arr[i], item)) {
          arr.splice(i, 1);
          break;
        }
      }
    }
    return arr;
  }

  // http://stackoverflow.com/a/19228302/1458162
  function postLinkFn(scope, elem, attrs) {
     // exclude recursion, but still keep the model
    var checklistModel = attrs.checklistModel;
    attrs.$set("checklistModel", null);
    // compile with `ng-model` pointing to `checked`
    $compile(elem)(scope);
    attrs.$set("checklistModel", checklistModel);

    // getter for original model
    var checklistModelGetter = $parse(checklistModel);
    var checklistChange = $parse(attrs.checklistChange);
    var checklistBeforeChange = $parse(attrs.checklistBeforeChange);
    var ngModelGetter = $parse(attrs.ngModel);



    var comparator = angular.equals;

    if (attrs.hasOwnProperty('checklistComparator')){
      if (attrs.checklistComparator[0] == '.') {
        var comparatorExpression = attrs.checklistComparator.substring(1);
        comparator = function (a, b) {
          return a[comparatorExpression] === b[comparatorExpression];
        };

      } else {
        comparator = $parse(attrs.checklistComparator)(scope.$parent);
      }
    }

    // watch UI checked change
    var unbindModel = scope.$watch(attrs.ngModel, function(newValue, oldValue) {
      if (newValue === oldValue) {
        return;
      }

      if (checklistBeforeChange && (checklistBeforeChange(scope) === false)) {
        ngModelGetter.assign(scope, contains(checklistModelGetter(scope.$parent), getChecklistValue(), comparator));
        return;
      }

      setValueInChecklistModel(getChecklistValue(), newValue);

      if (checklistChange) {
        checklistChange(scope);
      }
    });

    // watches for value change of checklistValue
    var unbindCheckListValue = scope.$watch(getChecklistValue, function(newValue, oldValue) {
      if( newValue != oldValue && angular.isDefined(oldValue) && scope[attrs.ngModel] === true ) {
        var current = checklistModelGetter(scope.$parent);
        checklistModelGetter.assign(scope.$parent, remove(current, oldValue, comparator));
        checklistModelGetter.assign(scope.$parent, add(current, newValue, comparator));
      }
    }, true);

    var unbindDestroy = scope.$on('$destroy', destroy);

    function destroy() {
      unbindModel();
      unbindCheckListValue();
      unbindDestroy();
    }

    function getChecklistValue() {
      return attrs.checklistValue ? $parse(attrs.checklistValue)(scope.$parent) : attrs.value;
    }

    function setValueInChecklistModel(value, checked) {
      var current = checklistModelGetter(scope.$parent);
      if (angular.isFunction(checklistModelGetter.assign)) {
        if (checked === true) {
          checklistModelGetter.assign(scope.$parent, add(current, value, comparator));
        } else {
          checklistModelGetter.assign(scope.$parent, remove(current, value, comparator));
        }
      }

    }

    // declare one function to be used for both $watch functions
    function setChecked(newArr, oldArr) {
      if (checklistBeforeChange && (checklistBeforeChange(scope) === false)) {
        setValueInChecklistModel(getChecklistValue(), ngModelGetter(scope));
        return;
      }
      ngModelGetter.assign(scope, contains(newArr, getChecklistValue(), comparator));
    }

    // watch original model change
    // use the faster $watchCollection method if it's available
    if (angular.isFunction(scope.$parent.$watchCollection)) {
        scope.$parent.$watchCollection(checklistModel, setChecked);
    } else {
        scope.$parent.$watch(checklistModel, setChecked, true);
    }
  }

  return {
    restrict: 'A',
    priority: 1000,
    terminal: true,
    scope: true,
    compile: function(tElement, tAttrs) {

      if (!tAttrs.checklistValue && !tAttrs.value) {
        throw 'You should provide `value` or `checklist-value`.';
      }

      // by default ngModel is 'checked', so we set it if not specified
      if (!tAttrs.ngModel) {
        // local scope var storing individual checkbox model
        tAttrs.$set("ngModel", "checked");
      }

      return postLinkFn;
    }
  };
}]);

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/moment/locale/zh-cn.js":[function(require,module,exports){
//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng

;(function (global, factory) {
   typeof exports === 'object' && typeof module !== 'undefined'
       && typeof require === 'function' ? factory(require('../moment')) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var zhCn = moment.defineLocale('zh-cn', {
    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
    weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
    longDateFormat : {
        LT : 'Ah点mm分',
        LTS : 'Ah点m分s秒',
        L : 'YYYY-MM-DD',
        LL : 'YYYY年MMMD日',
        LLL : 'YYYY年MMMD日Ah点mm分',
        LLLL : 'YYYY年MMMD日ddddAh点mm分',
        l : 'YYYY-MM-DD',
        ll : 'YYYY年MMMD日',
        lll : 'YYYY年MMMD日Ah点mm分',
        llll : 'YYYY年MMMD日ddddAh点mm分'
    },
    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === '凌晨' || meridiem === '早上' ||
                meridiem === '上午') {
            return hour;
        } else if (meridiem === '下午' || meridiem === '晚上') {
            return hour + 12;
        } else {
            // '中午'
            return hour >= 11 ? hour : hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return '凌晨';
        } else if (hm < 900) {
            return '早上';
        } else if (hm < 1130) {
            return '上午';
        } else if (hm < 1230) {
            return '中午';
        } else if (hm < 1800) {
            return '下午';
        } else {
            return '晚上';
        }
    },
    calendar : {
        sameDay : function () {
            return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
        },
        nextDay : function () {
            return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
        },
        lastDay : function () {
            return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
        },
        nextWeek : function () {
            var startOfWeek, prefix;
            startOfWeek = moment().startOf('week');
            prefix = this.diff(startOfWeek, 'days') >= 7 ? '[下]' : '[本]';
            return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
        },
        lastWeek : function () {
            var startOfWeek, prefix;
            startOfWeek = moment().startOf('week');
            prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
            return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
        },
        sameElse : 'LL'
    },
    ordinalParse: /\d{1,2}(日|月|周)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '日';
            case 'M':
                return number + '月';
            case 'w':
            case 'W':
                return number + '周';
            default:
                return number;
        }
    },
    relativeTime : {
        future : '%s内',
        past : '%s前',
        s : '几秒',
        m : '1 分钟',
        mm : '%d 分钟',
        h : '1 小时',
        hh : '%d 小时',
        d : '1 天',
        dd : '%d 天',
        M : '1 个月',
        MM : '%d 个月',
        y : '1 年',
        yy : '%d 年'
    },
    week : {
        // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return zhCn;

})));

},{"../moment":"/Users/Gavin/Documents/codes/pack/sil/node_modules/moment/moment.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/moment/moment.js":[function(require,module,exports){
//! moment.js
//! version : 2.17.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
        // even if its not own property I'd still call it non-empty
        return false;
    }
    return true;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

var some$1 = some;

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

function isUndefined(input) {
    return input === void 0;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i in momentProperties) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _ordinalParseLenient.
    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var keys$1 = keys;

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

var indexOf$1 = indexOf;

function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return this._months;
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return this._monthsShort;
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function createDate (y, m, d, h, M, s, ms) {
    //can't just apply() to create a date:
    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
    var date = new Date(y, m, d, h, M, s, ms);

    //the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    //the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return this._weekdays;
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    ordinalParse: defaultOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            require('./locale/' + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        } catch (e) { }
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) {
            parentConfig = locales[name]._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys$1(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
        hooks.createFromInputFallback(config);
    }
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse)) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }

    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (input === undefined) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (typeof(input) === 'object') {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
            output = output / 3;
        } else if (units === 'year') {
            output = output / 12;
        }
    } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    }
    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString () {
    var m = this.clone().utc();
    if (0 < m.year() && m.year() <= 9999) {
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString();
        } else {
            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$1 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$1;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) {
    units = normalizeUnits(units);
    return this[units + 's']();
}

function makeGetter(name) {
    return function () {
        return this._data[name];
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    s: 45,  // seconds to minute
    m: 45,  // minutes to hour
    h: 22,  // hours to day
    d: 26,  // days to month
    M: 11   // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds < thresholds.s && ['s', seconds]  ||
            minutes <= 1           && ['m']           ||
            minutes < thresholds.m && ['mm', minutes] ||
            hours   <= 1           && ['h']           ||
            hours   < thresholds.h && ['hh', hours]   ||
            days    <= 1           && ['d']           ||
            days    < thresholds.d && ['dd', days]    ||
            months  <= 1           && ['M']           ||
            months  < thresholds.M && ['MM', months]  ||
            years   <= 1           && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    return true;
}

function humanize (withSuffix) {
    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.17.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

return hooks;

})));

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/ngCropper/dist/ngCropper.all.js":[function(require,module,exports){
/*!
 * Cropper v0.10.0
 * https://github.com/fengyuanchen/cropper
 *
 * Copyright (c) 2014-2015 Fengyuan Chen and other contributors
 * Released under the MIT license
 *
 * Date: 2015-06-08T14:57:26.353Z
 */

(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as anonymous module.
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    // Node / CommonJS
    factory(require('jquery'));
  } else {
    // Browser globals.
    factory(jQuery);
  }
})(function ($) {

  'use strict';

  var $window = $(window),
      $document = $(document),
      location = window.location,

      // Constants
      CROPPER_NAMESPACE = '.cropper',
      CROPPER_PREVIEW = 'preview' + CROPPER_NAMESPACE,

      // RegExps
      REGEXP_DRAG_TYPES = /^(e|n|w|s|ne|nw|sw|se|all|crop|move|zoom)$/,

      // Classes
      CLASS_MODAL = 'cropper-modal',
      CLASS_HIDE = 'cropper-hide',
      CLASS_HIDDEN = 'cropper-hidden',
      CLASS_INVISIBLE = 'cropper-invisible',
      CLASS_MOVE = 'cropper-move',
      CLASS_CROP = 'cropper-crop',
      CLASS_DISABLED = 'cropper-disabled',
      CLASS_BG = 'cropper-bg',

      // Events
      EVENT_MOUSE_DOWN = 'mousedown touchstart',
      EVENT_MOUSE_MOVE = 'mousemove touchmove',
      EVENT_MOUSE_UP = 'mouseup mouseleave touchend touchleave touchcancel',
      EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll',
      EVENT_DBLCLICK = 'dblclick',
      EVENT_RESIZE = 'resize' + CROPPER_NAMESPACE, // Bind to window with namespace
      EVENT_BUILD = 'build' + CROPPER_NAMESPACE,
      EVENT_BUILT = 'built' + CROPPER_NAMESPACE,
      EVENT_DRAG_START = 'dragstart' + CROPPER_NAMESPACE,
      EVENT_DRAG_MOVE = 'dragmove' + CROPPER_NAMESPACE,
      EVENT_DRAG_END = 'dragend' + CROPPER_NAMESPACE,
      EVENT_ZOOM_IN = 'zoomin' + CROPPER_NAMESPACE,
      EVENT_ZOOM_OUT = 'zoomout' + CROPPER_NAMESPACE,
      EVENT_CHANGE = 'change' + CROPPER_NAMESPACE,

      // Supports
      SUPPORT_CANVAS = $.isFunction($('<canvas>')[0].getContext),

      // Others
      sqrt = Math.sqrt,
      min = Math.min,
      max = Math.max,
      abs = Math.abs,
      sin = Math.sin,
      cos = Math.cos,
      num = parseFloat,

      // Prototype
      prototype = {};

  function isNumber(n) {
    return typeof n === 'number' && !isNaN(n);
  }

  function isUndefined(n) {
    return typeof n === 'undefined';
  }

  function toArray(obj, offset) {
    var args = [];

    if (isNumber(offset)) { // It's necessary for IE8
      args.push(offset);
    }

    return args.slice.apply(obj, args);
  }

  // Custom proxy to avoid jQuery's guid
  function proxy(fn, context) {
    var args = toArray(arguments, 2);

    return function () {
      return fn.apply(context, args.concat(toArray(arguments)));
    };
  }

  function isCrossOriginURL(url) {
    var parts = url.match(/^(https?:)\/\/([^\:\/\?#]+):?(\d*)/i);

    return parts && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);
  }

  function addTimestamp(url) {
    var timestamp = 'timestamp=' + (new Date()).getTime();

    return (url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp);
  }

  function getRotateValue(degree) {
    return degree ? 'rotate(' + degree + 'deg)' : 'none';
  }

  function getRotatedSizes(data, reverse) {
    var deg = abs(data.degree) % 180,
        arc = (deg > 90 ? (180 - deg) : deg) * Math.PI / 180,
        sinArc = sin(arc),
        cosArc = cos(arc),
        width = data.width,
        height = data.height,
        aspectRatio = data.aspectRatio,
        newWidth,
        newHeight;

    if (!reverse) {
      newWidth = width * cosArc + height * sinArc;
      newHeight = width * sinArc + height * cosArc;
    } else {
      newWidth = width / (cosArc + sinArc / aspectRatio);
      newHeight = newWidth / aspectRatio;
    }

    return {
      width: newWidth,
      height: newHeight
    };
  }

  function getSourceCanvas(image, data) {
    var canvas = $('<canvas>')[0],
        context = canvas.getContext('2d'),
        width = data.naturalWidth,
        height = data.naturalHeight,
        rotate = data.rotate,
        rotated = getRotatedSizes({
          width: width,
          height: height,
          degree: rotate
        });

    if (rotate) {
      canvas.width = rotated.width;
      canvas.height = rotated.height;
      context.save();
      context.translate(rotated.width / 2, rotated.height / 2);
      context.rotate(rotate * Math.PI / 180);
      context.drawImage(image, -width / 2, -height / 2, width, height);
      context.restore();
    } else {
      canvas.width = width;
      canvas.height = height;
      context.drawImage(image, 0, 0, width, height);
    }

    return canvas;
  }

  function Cropper(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Cropper.DEFAULTS, $.isPlainObject(options) && options);

    this.ready = false;
    this.built = false;
    this.rotated = false;
    this.cropped = false;
    this.disabled = false;
    this.canvas = null;
    this.cropBox = null;

    this.load();
  }

  prototype.load = function (url) {
    var options = this.options,
        $this = this.$element,
        crossOrigin,
        bustCacheUrl,
        buildEvent,
        $clone;

    if (!url) {
      if ($this.is('img')) {
        if (!$this.attr('src')) {
          return;
        }

        url = $this.prop('src');
      } else if ($this.is('canvas') && SUPPORT_CANVAS) {
        url = $this[0].toDataURL();
      }
    }

    if (!url) {
      return;
    }

    buildEvent = $.Event(EVENT_BUILD);

    if($this.one(EVENT_BUILD, options.build).trigger){
      $this.one(EVENT_BUILD, options.build).trigger(buildEvent); // Only trigger once
    }

    if (buildEvent.isDefaultPrevented()) {
      return;
    }

    if (options.checkImageOrigin && isCrossOriginURL(url)) {
      crossOrigin = ' crossOrigin="anonymous"';

      if (!$this.prop('crossOrigin')) { // Only when there was not a "crossOrigin" property
        bustCacheUrl = addTimestamp(url); // Bust cache (#148)
      }
    }

    // IE8 compatibility: Don't use "$().attr()" to set "src"
    this.$clone = $clone = $('<img' + (crossOrigin || '') + ' src="' + (bustCacheUrl || url) + '">');

    $clone.one('load', $.proxy(function () {
      var image = $clone[0],
          naturalWidth = image.naturalWidth || image.width,
          naturalHeight = image.naturalHeight || image.height; // $clone.width() and $clone.height() will return 0 in IE8 (#319)

      this.image = {
        naturalWidth: naturalWidth,
        naturalHeight: naturalHeight,
        aspectRatio: naturalWidth / naturalHeight,
        rotate: 0
      };

      this.url = url;
      this.ready = true;
      this.build();
    }, this)).one('error', function () {
      $clone.remove();
    });

    // Hide and insert into the document
    $clone.addClass(CLASS_HIDE).insertAfter($this);
  };

  prototype.build = function () {
    var $this = this.$element,
        $clone = this.$clone,
        options = this.options,
        $cropper,
        $cropBox,
        $face;

    if (!this.ready) {
      return;
    }

    if (this.built) {
      this.unbuild();
    }

    // Create cropper elements
    this.$cropper = $cropper = $(Cropper.TEMPLATE);

    // Hide the original image
    $this.addClass(CLASS_HIDDEN);

    // Show the clone iamge
    $clone.removeClass(CLASS_HIDE);

    this.$container = $this.parent().append($cropper);
    this.$canvas = $cropper.find('.cropper-canvas').append($clone);
    this.$dragBox = $cropper.find('.cropper-drag-box');
    this.$cropBox = $cropBox = $cropper.find('.cropper-crop-box');
    this.$viewBox = $cropper.find('.cropper-view-box');
    this.$face = $face = $cropBox.find('.cropper-face');

    this.addListeners();
    this.initPreview();

    // Format aspect ratio
    options.aspectRatio = num(options.aspectRatio) || NaN; // 0 -> NaN

    if (options.autoCrop) {
      this.cropped = true;

      if (options.modal) {
        this.$dragBox.addClass(CLASS_MODAL);
      }
    } else {
      $cropBox.addClass(CLASS_HIDDEN);
    }

    if (options.background) {
      $cropper.addClass(CLASS_BG);
    }

    if (!options.highlight) {
      $face.addClass(CLASS_INVISIBLE);
    }

    if (!options.guides) {
      $cropBox.find('.cropper-dashed').addClass(CLASS_HIDDEN);
    }

    if (options.cropBoxMovable) {
      $face.addClass(CLASS_MOVE).data('drag', 'all');
    }

    if (!options.cropBoxResizable) {
      $cropBox.find('.cropper-line, .cropper-point').addClass(CLASS_HIDDEN);
    }

    this.setDragMode(options.dragCrop ? 'crop' : options.movable ? 'move' : 'none');

    this.built = true;
    this.render();
    this.setData(options.data);
    if($this.one(EVENT_BUILT, options.built).trigger){
      $this.one(EVENT_BUILT, options.built).trigger(EVENT_BUILT); // Only trigger once
    }
  };

  prototype.unbuild = function () {
    if (!this.built) {
      return;
    }

    this.built = false;
    this.initialImage = null;
    this.initialCanvas = null; // This is necessary when replace
    this.initialCropBox = null;
    this.container = null;
    this.canvas = null;
    this.cropBox = null; // This is necessary when replace
    this.removeListeners();

    this.resetPreview();
    this.$preview = null;

    this.$viewBox = null;
    this.$cropBox = null;
    this.$dragBox = null;
    this.$canvas = null;
    this.$container = null;

    this.$cropper.remove();
    this.$cropper = null;
  };

  $.extend(prototype, {
    render: function () {
      this.initContainer();
      this.initCanvas();
      this.initCropBox();

      this.renderCanvas();

      if (this.cropped) {
        this.renderCropBox();
      }
    },

    initContainer: function () {
      var $this = this.$element,
          $container = this.$container,
          $cropper = this.$cropper,
          options = this.options;

      $cropper.addClass(CLASS_HIDDEN);
      $this.removeClass(CLASS_HIDDEN);

      $cropper.css((this.container = {
        width: max($container.width(), num(options.minContainerWidth) || 200),
        height: max($container.height(), num(options.minContainerHeight) || 100)
      }));

      $this.addClass(CLASS_HIDDEN);
      $cropper.removeClass(CLASS_HIDDEN);
    },

    // image box (wrapper)
    initCanvas: function () {
      var container = this.container,
          containerWidth = container.width,
          containerHeight = container.height,
          image = this.image,
          aspectRatio = image.aspectRatio,
          canvas = {
            aspectRatio: aspectRatio,
            width: containerWidth,
            height: containerHeight
          };

      if (containerHeight * aspectRatio > containerWidth) {
        canvas.height = containerWidth / aspectRatio;
      } else {
        canvas.width = containerHeight * aspectRatio;
      }

      canvas.oldLeft = canvas.left = (containerWidth - canvas.width) / 2;
      canvas.oldTop = canvas.top = (containerHeight - canvas.height) / 2;

      this.canvas = canvas;
      this.limitCanvas(true, true);
      this.initialImage = $.extend({}, image);
      this.initialCanvas = $.extend({}, canvas);
    },

    limitCanvas: function (size, position) {
      var options = this.options,
          strict = options.strict,
          container = this.container,
          containerWidth = container.width,
          containerHeight = container.height,
          canvas = this.canvas,
          aspectRatio = canvas.aspectRatio,
          cropBox = this.cropBox,
          cropped = this.cropped && cropBox,
          initialCanvas = this.initialCanvas || canvas,
          initialCanvasWidth = initialCanvas.width,
          initialCanvasHeight = initialCanvas.height,
          minCanvasWidth,
          minCanvasHeight;

      if (size) {
        minCanvasWidth = num(options.minCanvasWidth) || 0;
        minCanvasHeight = num(options.minCanvasHeight) || 0;

        if (minCanvasWidth) {
          if (strict) {
            minCanvasWidth = max(cropped ? cropBox.width : initialCanvasWidth, minCanvasWidth);
          }

          minCanvasHeight = minCanvasWidth / aspectRatio;
        } else if (minCanvasHeight) {
          if (strict) {
            minCanvasHeight = max(cropped ? cropBox.height : initialCanvasHeight, minCanvasHeight);
          }

          minCanvasWidth = minCanvasHeight * aspectRatio;
        } else if (strict) {
          if (cropped) {
            minCanvasWidth = cropBox.width;
            minCanvasHeight = cropBox.height;

            if (minCanvasHeight * aspectRatio > minCanvasWidth) {
              minCanvasWidth = minCanvasHeight * aspectRatio;
            } else {
              minCanvasHeight = minCanvasWidth / aspectRatio;
            }
          } else {
            minCanvasWidth = initialCanvasWidth;
            minCanvasHeight = initialCanvasHeight;
          }
        }

        $.extend(canvas, {
          minWidth: minCanvasWidth,
          minHeight: minCanvasHeight,
          maxWidth: Infinity,
          maxHeight: Infinity
        });
      }

      if (position) {
        if (strict) {
          if (cropped) {
            canvas.minLeft = min(cropBox.left, (cropBox.left + cropBox.width) - canvas.width);
            canvas.minTop = min(cropBox.top, (cropBox.top + cropBox.height) - canvas.height);
            canvas.maxLeft = cropBox.left;
            canvas.maxTop = cropBox.top;
          } else {
            canvas.minLeft = min(0, containerWidth - canvas.width);
            canvas.minTop = min(0, containerHeight - canvas.height);
            canvas.maxLeft = max(0, containerWidth - canvas.width);
            canvas.maxTop = max(0, containerHeight - canvas.height);
          }
        } else {
          canvas.minLeft = -canvas.width;
          canvas.minTop = -canvas.height;
          canvas.maxLeft = containerWidth;
          canvas.maxTop = containerHeight;
        }
      }
    },

    renderCanvas: function (changed) {
      var options = this.options,
          canvas = this.canvas,
          image = this.image,
          aspectRatio,
          rotated;

      if (this.rotated) {
        this.rotated = false;

        // Computes rotatation sizes with image sizes
        rotated = getRotatedSizes({
          width: image.width,
          height: image.height,
          degree: image.rotate
        });

        aspectRatio = rotated.width / rotated.height;

        if (aspectRatio !== canvas.aspectRatio) {
          canvas.left -= (rotated.width - canvas.width) / 2;
          canvas.top -= (rotated.height - canvas.height) / 2;
          canvas.width = rotated.width;
          canvas.height = rotated.height;
          canvas.aspectRatio = aspectRatio;
          this.limitCanvas(true, false);
        }
      }

      if (canvas.width > canvas.maxWidth || canvas.width < canvas.minWidth) {
        canvas.left = canvas.oldLeft;
      }

      if (canvas.height > canvas.maxHeight || canvas.height < canvas.minHeight) {
        canvas.top = canvas.oldTop;
      }

      canvas.width = min(max(canvas.width, canvas.minWidth), canvas.maxWidth);
      canvas.height = min(max(canvas.height, canvas.minHeight), canvas.maxHeight);

      this.limitCanvas(false, true);

      canvas.oldLeft = canvas.left = min(max(canvas.left, canvas.minLeft), canvas.maxLeft);
      canvas.oldTop = canvas.top = min(max(canvas.top, canvas.minTop), canvas.maxTop);

      this.$canvas.css({
        width: canvas.width,
        height: canvas.height,
        left: canvas.left,
        top: canvas.top
      });

      this.renderImage();

      if (this.cropped && options.strict) {
        this.limitCropBox(true, true);
      }

      if (changed) {
        this.output();
      }
    },

    renderImage: function () {
      var canvas = this.canvas,
          image = this.image,
          reversed;

      if (image.rotate) {
        reversed = getRotatedSizes({
          width: canvas.width,
          height: canvas.height,
          degree: image.rotate,
          aspectRatio: image.aspectRatio
        }, true);
      }

      $.extend(image, reversed ? {
        width: reversed.width,
        height: reversed.height,
        left: (canvas.width - reversed.width) / 2,
        top: (canvas.height - reversed.height) / 2
      } : {
        width: canvas.width,
        height: canvas.height,
        left: 0,
        top: 0
      });

      this.$clone.css({
        width: image.width,
        height: image.height,
        marginLeft: image.left,
        marginTop: image.top,
        transform: getRotateValue(image.rotate)
      });
    },

    initCropBox: function () {
      var options = this.options,
          canvas = this.canvas,
          aspectRatio = options.aspectRatio,
          autoCropArea = num(options.autoCropArea) || 0.8,
          cropBox = {
            width: canvas.width,
            height: canvas.height
          };

      if (aspectRatio) {
        if (canvas.height * aspectRatio > canvas.width) {
          cropBox.height = cropBox.width / aspectRatio;
        } else {
          cropBox.width = cropBox.height * aspectRatio;
        }
      }

      this.cropBox = cropBox;
      this.limitCropBox(true, true);

      // Initialize auto crop area
      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);
      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);

      // The width of auto crop area must large than "minWidth", and the height too. (#164)
      cropBox.width = max(cropBox.minWidth, cropBox.width * autoCropArea);
      cropBox.height = max(cropBox.minHeight, cropBox.height * autoCropArea);
      cropBox.oldLeft = cropBox.left = canvas.left + (canvas.width - cropBox.width) / 2;
      cropBox.oldTop = cropBox.top = canvas.top + (canvas.height - cropBox.height) / 2;

      this.initialCropBox = $.extend({}, cropBox);
    },

    limitCropBox: function (size, position) {
      var options = this.options,
          strict = options.strict,
          container = this.container,
          containerWidth = container.width,
          containerHeight = container.height,
          canvas = this.canvas,
          cropBox = this.cropBox,
          aspectRatio = options.aspectRatio,
          minCropBoxWidth,
          minCropBoxHeight;

      if (size) {
        minCropBoxWidth = num(options.minCropBoxWidth) || 0;
        minCropBoxHeight = num(options.minCropBoxHeight) || 0;

        // min/maxCropBoxWidth/Height must less than conatiner width/height
        cropBox.minWidth = min(containerWidth, minCropBoxWidth);
        cropBox.minHeight = min(containerHeight, minCropBoxHeight);
        cropBox.maxWidth = min(containerWidth, strict ? canvas.width : containerWidth);
        cropBox.maxHeight = min(containerHeight, strict ? canvas.height : containerHeight);

        if (aspectRatio) {
          // compare crop box size with container first
          if (cropBox.maxHeight * aspectRatio > cropBox.maxWidth) {
            cropBox.minHeight = cropBox.minWidth / aspectRatio;
            cropBox.maxHeight = cropBox.maxWidth / aspectRatio;
          } else {
            cropBox.minWidth = cropBox.minHeight * aspectRatio;
            cropBox.maxWidth = cropBox.maxHeight * aspectRatio;
          }
        }

        // The "minWidth" must be less than "maxWidth", and the "minHeight" too.
        cropBox.minWidth = min(cropBox.maxWidth, cropBox.minWidth);
        cropBox.minHeight = min(cropBox.maxHeight, cropBox.minHeight);
      }

      if (position) {
        if (strict) {
          cropBox.minLeft = max(0, canvas.left);
          cropBox.minTop = max(0, canvas.top);
          cropBox.maxLeft = min(containerWidth, canvas.left + canvas.width) - cropBox.width;
          cropBox.maxTop = min(containerHeight, canvas.top + canvas.height) - cropBox.height;
        } else {
          cropBox.minLeft = 0;
          cropBox.minTop = 0;
          cropBox.maxLeft = containerWidth - cropBox.width;
          cropBox.maxTop = containerHeight - cropBox.height;
        }
      }
    },

    renderCropBox: function () {
      var options = this.options,
          container = this.container,
          containerWidth = container.width,
          containerHeight = container.height,
          cropBox = this.cropBox;

      if (cropBox.width > cropBox.maxWidth || cropBox.width < cropBox.minWidth) {
        cropBox.left = cropBox.oldLeft;
      }

      if (cropBox.height > cropBox.maxHeight || cropBox.height < cropBox.minHeight) {
        cropBox.top = cropBox.oldTop;
      }

      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);
      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);

      this.limitCropBox(false, true);

      cropBox.oldLeft = cropBox.left = min(max(cropBox.left, cropBox.minLeft), cropBox.maxLeft);
      cropBox.oldTop = cropBox.top = min(max(cropBox.top, cropBox.minTop), cropBox.maxTop);

      if (options.movable && options.cropBoxMovable) {
        // Turn to move the canvas when the crop box is equal to the container
        this.$face.data('drag', (cropBox.width === containerWidth && cropBox.height === containerHeight) ? 'move' : 'all');
      }

      this.$cropBox.css({
        width: cropBox.width,
        height: cropBox.height,
        left: cropBox.left,
        top: cropBox.top
      });

      if (this.cropped && options.strict) {
        this.limitCanvas(true, true);
      }

      if (!this.disabled) {
        this.output();
      }
    },

    output: function () {
      var options = this.options,
          $this = this.$element;

      this.preview();

      if (options.crop) {
        options.crop.call($this, this.getData());
      }

      $this.trigger(EVENT_CHANGE);
    }
  });

  prototype.initPreview = function () {
    var url = this.url;

    this.$preview = $(this.options.preview);
    this.$viewBox.html('<img src="' + url + '">');

    // Override img element styles
    // Add `display:block` to avoid margin top issue (Occur only when margin-top <= -height)
    this.$preview.each(function () {
      var $this = $(this);

      $this.data(CROPPER_PREVIEW, {
        width: $this.width(),
        height: $this.height(),
        original: $this.html()
      }).html('<img src="' + url + '" style="display:block;width:100%;min-width:0!important;min-height:0!important;max-width:none!important;max-height:none!important;image-orientation: 0deg!important">');
    });
  };

  prototype.resetPreview = function () {
    this.$preview.each(function () {
      var $this = $(this);

      $this.html($this.data(CROPPER_PREVIEW).original).removeData(CROPPER_PREVIEW);
    });
  };

  prototype.preview = function () {
    var image = this.image,
        canvas = this.canvas,
        cropBox = this.cropBox,
        width = image.width,
        height = image.height,
        left = cropBox.left - canvas.left - image.left,
        top = cropBox.top - canvas.top - image.top,
        rotate = image.rotate;

    if (!this.cropped || this.disabled) {
      return;
    }

    this.$viewBox.find('img').css({
      width: width,
      height: height,
      marginLeft: -left,
      marginTop: -top,
      transform: getRotateValue(rotate)
    });

    this.$preview.each(function () {
      var $this = $(this),
          data = $this.data(CROPPER_PREVIEW),
          ratio = data.width / cropBox.width,
          newWidth = data.width,
          newHeight = cropBox.height * ratio;

      if (newHeight > data.height) {
        ratio = data.height / cropBox.height;
        newWidth = cropBox.width * ratio;
        newHeight = data.height;
      }

      $this.width(newWidth).height(newHeight).find('img').css({
        width: width * ratio,
        height: height * ratio,
        marginLeft: -left * ratio,
        marginTop: -top * ratio,
        transform: getRotateValue(rotate)
      });
    });
  };

  prototype.addListeners = function () {
    var options = this.options,
        $this = this.$element,
        $cropper = this.$cropper;

    if ($.isFunction(options.dragstart)) {
      $this.on(EVENT_DRAG_START, options.dragstart);
    }

    if ($.isFunction(options.dragmove)) {
      $this.on(EVENT_DRAG_MOVE, options.dragmove);
    }

    if ($.isFunction(options.dragend)) {
      $this.on(EVENT_DRAG_END, options.dragend);
    }

    if ($.isFunction(options.zoomin)) {
      $this.on(EVENT_ZOOM_IN, options.zoomin);
    }

    if ($.isFunction(options.zoomout)) {
      $this.on(EVENT_ZOOM_OUT, options.zoomout);
    }

    if ($.isFunction(options.change)) {
      $this.on(EVENT_CHANGE, options.change);
    }

    $cropper.on(EVENT_MOUSE_DOWN, $.proxy(this.dragstart, this));

    if (options.zoomable && options.mouseWheelZoom) {
      $cropper.on(EVENT_WHEEL, $.proxy(this.wheel, this));
    }

    if (options.doubleClickToggle) {
      $cropper.on(EVENT_DBLCLICK, $.proxy(this.dblclick, this));
    }

    $document.on(EVENT_MOUSE_MOVE, (this._dragmove = proxy(this.dragmove, this))).on(EVENT_MOUSE_UP, (this._dragend = proxy(this.dragend, this)));

    if (options.responsive) {
      $window.on(EVENT_RESIZE, (this._resize = proxy(this.resize, this)));
    }
  };

  prototype.removeListeners = function () {
    var options = this.options,
        $this = this.$element,
        $cropper = this.$cropper;

    if ($.isFunction(options.dragstart)) {
      $this.off(EVENT_DRAG_START, options.dragstart);
    }

    if ($.isFunction(options.dragmove)) {
      $this.off(EVENT_DRAG_MOVE, options.dragmove);
    }

    if ($.isFunction(options.dragend)) {
      $this.off(EVENT_DRAG_END, options.dragend);
    }

    if ($.isFunction(options.zoomin)) {
      $this.off(EVENT_ZOOM_IN, options.zoomin);
    }

    if ($.isFunction(options.zoomout)) {
      $this.off(EVENT_ZOOM_OUT, options.zoomout);
    }

    if ($.isFunction(options.change)) {
      $this.off(EVENT_CHANGE, options.change);
    }

    $cropper.off(EVENT_MOUSE_DOWN, this.dragstart);

    if (options.zoomable && options.mouseWheelZoom) {
      $cropper.off(EVENT_WHEEL, this.wheel);
    }

    if (options.doubleClickToggle) {
      $cropper.off(EVENT_DBLCLICK, this.dblclick);
    }

    $document.off(EVENT_MOUSE_MOVE, this._dragmove).off(EVENT_MOUSE_UP, this._dragend);

    if (options.responsive) {
      $window.off(EVENT_RESIZE, this._resize);
    }
  };

  $.extend(prototype, {
    resize: function () {
      var $container = this.$container,
          container = this.container,
          canvasData,
          cropBoxData,
          ratio;

      if (this.disabled || !container) { // Check "container" for IE8
        return;
      }

      ratio = $container.width() / container.width;

      if (ratio !== 1 || $container.height() !== container.height) {
        canvasData = this.getCanvasData();
        cropBoxData = this.getCropBoxData();

        this.render();
        this.setCanvasData($.each(canvasData, function (i, n) {
          canvasData[i] = n * ratio;
        }));
        this.setCropBoxData($.each(cropBoxData, function (i, n) {
          cropBoxData[i] = n * ratio;
        }));
      }
    },

    dblclick: function () {
      if (this.disabled) {
        return;
      }

      if (this.$dragBox.hasClass(CLASS_CROP)) {
        this.setDragMode('move');
      } else {
        this.setDragMode('crop');
      }
    },

    wheel: function (event) {
      var e = event.originalEvent,
          delta = 1;

      if (this.disabled) {
        return;
      }

      event.preventDefault();

      if (e.deltaY) {
        delta = e.deltaY > 0 ? 1 : -1;
      } else if (e.wheelDelta) {
        delta = -e.wheelDelta / 120;
      } else if (e.detail) {
        delta = e.detail > 0 ? 1 : -1;
      }

      this.zoom(-delta * 0.1);
    },

    dragstart: function (event) {
      var options = this.options,
          originalEvent = event.originalEvent,
          touches = originalEvent && originalEvent.touches,
          e = event,
          dragType,
          dragStartEvent,
          touchesLength;

      if (this.disabled) {
        return;
      }

      if (touches) {
        touchesLength = touches.length;

        if (touchesLength > 1) {
          if (options.zoomable && options.touchDragZoom && touchesLength === 2) {
            e = touches[1];
            this.startX2 = e.pageX;
            this.startY2 = e.pageY;
            dragType = 'zoom';
          } else {
            return;
          }
        }

        e = touches[0];
      }

      dragType = dragType || $(e.target).data('drag');

      if (REGEXP_DRAG_TYPES.test(dragType)) {
        event.preventDefault();

        dragStartEvent = $.Event(EVENT_DRAG_START, {
          originalEvent: originalEvent,
          dragType: dragType
        });

        this.$element.trigger(dragStartEvent);

        if (dragStartEvent.isDefaultPrevented()) {
          return;
        }

        this.dragType = dragType;
        this.cropping = false;
        this.startX = e.pageX;
        this.startY = e.pageY;

        if (dragType === 'crop') {
          this.cropping = true;
          this.$dragBox.addClass(CLASS_MODAL);
        }
      }
    },

    dragmove: function (event) {
      var options = this.options,
          originalEvent = event.originalEvent,
          touches = originalEvent && originalEvent.touches,
          e = event,
          dragType = this.dragType,
          dragMoveEvent,
          touchesLength;

      if (this.disabled) {
        return;
      }

      if (touches) {
        touchesLength = touches.length;

        if (touchesLength > 1) {
          if (options.zoomable && options.touchDragZoom && touchesLength === 2) {
            e = touches[1];
            this.endX2 = e.pageX;
            this.endY2 = e.pageY;
          } else {
            return;
          }
        }

        e = touches[0];
      }

      if (dragType) {
        event.preventDefault();

        dragMoveEvent = $.Event(EVENT_DRAG_MOVE, {
          originalEvent: originalEvent,
          dragType: dragType
        });

        this.$element.trigger(dragMoveEvent);

        if (dragMoveEvent.isDefaultPrevented()) {
          return;
        }

        this.endX = e.pageX;
        this.endY = e.pageY;

        this.change(e.shiftKey);
      }
    },

    dragend: function (event) {
      var dragType = this.dragType,
          dragEndEvent;

      if (this.disabled) {
        return;
      }

      if (dragType) {
        event.preventDefault();

        dragEndEvent = $.Event(EVENT_DRAG_END, {
          originalEvent: event.originalEvent,
          dragType: dragType
        });

        this.$element.trigger(dragEndEvent);

        if (dragEndEvent.isDefaultPrevented()) {
          return;
        }

        if (this.cropping) {
          this.cropping = false;
          this.$dragBox.toggleClass(CLASS_MODAL, this.cropped && this.options.modal);
        }

        this.dragType = '';
      }
    }
  });

  $.extend(prototype, {
    crop: function () {
      if (!this.built || this.disabled) {
        return;
      }

      if (!this.cropped) {
        this.cropped = true;
        this.limitCropBox(true, true);

        if (this.options.modal) {
          this.$dragBox.addClass(CLASS_MODAL);
        }

        this.$cropBox.removeClass(CLASS_HIDDEN);
      }

      this.setCropBoxData(this.initialCropBox);
    },

    reset: function () {
      if (!this.built || this.disabled) {
        return;
      }

      this.image = $.extend({}, this.initialImage);
      this.canvas = $.extend({}, this.initialCanvas);
      this.cropBox = $.extend({}, this.initialCropBox); // required for strict mode

      this.renderCanvas();

      if (this.cropped) {
        this.renderCropBox();
      }
    },

    clear: function () {
      if (!this.cropped || this.disabled) {
        return;
      }

      $.extend(this.cropBox, {
        left: 0,
        top: 0,
        width: 0,
        height: 0
      });

      this.cropped = false;
      this.renderCropBox();

      this.limitCanvas();
      this.renderCanvas(); // Render canvas after render crop box

      this.$dragBox.removeClass(CLASS_MODAL);
      this.$cropBox.addClass(CLASS_HIDDEN);
    },

    destroy: function () {
      var $this = this.$element;

      if (this.ready) {
        this.unbuild();
        $this.removeClass(CLASS_HIDDEN);
      } else if (this.$clone) {
        this.$clone.remove();
      }

      $this.removeData('cropper');
    },

    replace: function (url) {
      if (!this.disabled && url) {
        this.options.data = null; // Remove previous data
        this.load(url);
      }
    },

    enable: function () {
      if (this.built) {
        this.disabled = false;
        this.$cropper.removeClass(CLASS_DISABLED);
      }
    },

    disable: function () {
      if (this.built) {
        this.disabled = true;
        this.$cropper.addClass(CLASS_DISABLED);
      }
    },

    move: function (offsetX, offsetY) {
      var canvas = this.canvas;

      if (this.built && !this.disabled && this.options.movable && isNumber(offsetX) && isNumber(offsetY)) {
        canvas.left += offsetX;
        canvas.top += offsetY;
        this.renderCanvas(true);
      }
    },

    zoom: function (delta) {
      var canvas = this.canvas,
          zoomEvent,
          width,
          height;

      delta = num(delta);

      if (delta && this.built && !this.disabled && this.options.zoomable) {
        zoomEvent = delta > 0 ? $.Event(EVENT_ZOOM_IN) : $.Event(EVENT_ZOOM_OUT);
        this.$element.trigger(zoomEvent);

        if (zoomEvent.isDefaultPrevented()) {
          return;
        }

        delta = delta <= -1 ? 1 / (1 - delta) : delta <= 1 ? (1 + delta) : delta;
        width = canvas.width * delta;
        height = canvas.height * delta;
        canvas.left -= (width - canvas.width) / 2;
        canvas.top -= (height - canvas.height) / 2;
        canvas.width = width;
        canvas.height = height;
        this.renderCanvas(true);
        this.setDragMode('move');
      }
    },

    rotate: function (degree) {
      var image = this.image;

      degree = num(degree);

      if (degree && this.built && !this.disabled && this.options.rotatable) {
        image.rotate = (image.rotate + degree) % 360;
        this.rotated = true;
        this.renderCanvas(true);
      }
    },

    getData: function (rounded) {
      var cropBox = this.cropBox,
          canvas = this.canvas,
          image = this.image,
          ratio,
          data;

      if (this.built && this.cropped) {
        data = {
          x: cropBox.left - canvas.left,
          y: cropBox.top - canvas.top,
          width: cropBox.width,
          height: cropBox.height
        };

        ratio = image.width / image.naturalWidth;

        $.each(data, function (i, n) {
          n = n / ratio;
          data[i] = rounded ? Math.round(n) : n;
        });

      } else {
        data = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
      }

      data.rotate = this.ready ? image.rotate : 0;

      return data;
    },

    setData: function (data) {
      var image = this.image,
          canvas = this.canvas,
          cropBoxData = {},
          ratio;

      if (this.built && !this.disabled && $.isPlainObject(data)) {
        if (isNumber(data.rotate) && data.rotate !== image.rotate && this.options.rotatable) {
          image.rotate = data.rotate;
          this.rotated = true;
          this.renderCanvas(true);
        }

        ratio = image.width / image.naturalWidth;

        if (isNumber(data.x)) {
          cropBoxData.left = data.x * ratio + canvas.left;
        }

        if (isNumber(data.y)) {
          cropBoxData.top = data.y * ratio + canvas.top;
        }

        if (isNumber(data.width)) {
          cropBoxData.width = data.width * ratio;
        }

        if (isNumber(data.height)) {
          cropBoxData.height = data.height * ratio;
        }

        this.setCropBoxData(cropBoxData);
      }
    },

    getContainerData: function () {
      return this.built ? this.container : {};
    },

    getImageData: function () {
      return this.ready ? this.image : {};
    },

    getCanvasData: function () {
      var canvas = this.canvas,
          data;

      if (this.built) {
        data = {
          left: canvas.left,
          top: canvas.top,
          width: canvas.width,
          height: canvas.height
        };
      }

      return data || {};
    },

    setCanvasData: function (data) {
      var canvas = this.canvas,
          aspectRatio = canvas.aspectRatio;

      if (this.built && !this.disabled && $.isPlainObject(data)) {
        if (isNumber(data.left)) {
          canvas.left = data.left;
        }

        if (isNumber(data.top)) {
          canvas.top = data.top;
        }

        if (isNumber(data.width)) {
          canvas.width = data.width;
          canvas.height = data.width / aspectRatio;
        } else if (isNumber(data.height)) {
          canvas.height = data.height;
          canvas.width = data.height * aspectRatio;
        }

        this.renderCanvas(true);
      }
    },

    getCropBoxData: function () {
      var cropBox = this.cropBox,
          data;

      if (this.built && this.cropped) {
        data = {
          left: cropBox.left,
          top: cropBox.top,
          width: cropBox.width,
          height: cropBox.height
        };
      }

      return data || {};
    },

    setCropBoxData: function (data) {
      var cropBox = this.cropBox,
          aspectRatio = this.options.aspectRatio;

      if (this.built && this.cropped && !this.disabled && $.isPlainObject(data)) {

        if (isNumber(data.left)) {
          cropBox.left = data.left;
        }

        if (isNumber(data.top)) {
          cropBox.top = data.top;
        }

        if (isNumber(data.width)) {
          cropBox.width = data.width;
        }

        if (isNumber(data.height)) {
          cropBox.height = data.height;
        }

        if (aspectRatio) {
          if (isNumber(data.width)) {
            cropBox.height = cropBox.width / aspectRatio;
          } else if (isNumber(data.height)) {
            cropBox.width = cropBox.height * aspectRatio;
          }
        }

        this.renderCropBox();
      }
    },

    getCroppedCanvas: function (options) {
      var originalWidth,
          originalHeight,
          canvasWidth,
          canvasHeight,
          scaledWidth,
          scaledHeight,
          scaledRatio,
          aspectRatio,
          canvas,
          context,
          data;

      if (!this.built || !this.cropped || !SUPPORT_CANVAS) {
        return;
      }

      if (!$.isPlainObject(options)) {
        options = {};
      }

      data = this.getData();
      originalWidth = data.width;
      originalHeight = data.height;
      aspectRatio = originalWidth / originalHeight;

      if ($.isPlainObject(options)) {
        scaledWidth = options.width;
        scaledHeight = options.height;

        if (scaledWidth) {
          scaledHeight = scaledWidth / aspectRatio;
          scaledRatio = scaledWidth / originalWidth;
        } else if (scaledHeight) {
          scaledWidth = scaledHeight * aspectRatio;
          scaledRatio = scaledHeight / originalHeight;
        }
      }

      canvasWidth = scaledWidth || originalWidth;
      canvasHeight = scaledHeight || originalHeight;

      canvas = $('<canvas>')[0];
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      context = canvas.getContext('2d');

      if (options.fillColor) {
        context.fillStyle = options.fillColor;
        context.fillRect(0, 0, canvasWidth, canvasHeight);
      }

      // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage
      context.drawImage.apply(context, (function () {
        var source = getSourceCanvas(this.$clone[0], this.image),
            sourceWidth = source.width,
            sourceHeight = source.height,
            args = [source],
            srcX = data.x, // source canvas
            srcY = data.y,
            srcWidth,
            srcHeight,
            dstX, // destination canvas
            dstY,
            dstWidth,
            dstHeight;

        if (srcX <= -originalWidth || srcX > sourceWidth) {
          srcX = srcWidth = dstX = dstWidth = 0;
        } else if (srcX <= 0) {
          dstX = -srcX;
          srcX = 0;
          srcWidth = dstWidth = min(sourceWidth, originalWidth + srcX);
        } else if (srcX <= sourceWidth) {
          dstX = 0;
          srcWidth = dstWidth = min(originalWidth, sourceWidth - srcX);
        }

        if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {
          srcY = srcHeight = dstY = dstHeight = 0;
        } else if (srcY <= 0) {
          dstY = -srcY;
          srcY = 0;
          srcHeight = dstHeight = min(sourceHeight, originalHeight + srcY);
        } else if (srcY <= sourceHeight) {
          dstY = 0;
          srcHeight = dstHeight = min(originalHeight, sourceHeight - srcY);
        }

        args.push(srcX, srcY, srcWidth, srcHeight);

        // Scale destination sizes
        if (scaledRatio) {
          dstX *= scaledRatio;
          dstY *= scaledRatio;
          dstWidth *= scaledRatio;
          dstHeight *= scaledRatio;
        }

        // Avoid "IndexSizeError" in IE and Firefox
        if (dstWidth > 0 && dstHeight > 0) {
          args.push(dstX, dstY, dstWidth, dstHeight);
        }

        return args;
      }).call(this));

      return canvas;
    },

    setAspectRatio: function (aspectRatio) {
      var options = this.options;

      if (!this.disabled && !isUndefined(aspectRatio)) {
        options.aspectRatio = num(aspectRatio) || NaN; // 0 -> NaN

        if (this.built) {
          this.initCropBox();

          if (this.cropped) {
            this.renderCropBox();
          }
        }
      }
    },

    setDragMode: function (mode) {
      var options = this.options,
          croppable,
          movable;

      if (this.ready && !this.disabled) {
        croppable = options.dragCrop && mode === 'crop';
        movable = options.movable && mode === 'move';
        mode = (croppable || movable) ? mode : 'none';

        this.$dragBox.data('drag', mode).toggleClass(CLASS_CROP, croppable).toggleClass(CLASS_MOVE, movable);

        if (!options.cropBoxMovable) {
          // Sync drag mode to crop box when it is not movable(#300)
          this.$face.data('drag', mode).toggleClass(CLASS_CROP, croppable).toggleClass(CLASS_MOVE, movable);
        }
      }
    }
  });

  prototype.change = function (shiftKey) {
    var dragType = this.dragType,
        options = this.options,
        canvas = this.canvas,
        container = this.container,
        cropBox = this.cropBox,
        width = cropBox.width,
        height = cropBox.height,
        left = cropBox.left,
        top = cropBox.top,
        right = left + width,
        bottom = top + height,
        minLeft = 0,
        minTop = 0,
        maxWidth = container.width,
        maxHeight = container.height,
        renderable = true,
        aspectRatio = options.aspectRatio,
        range = {
          x: this.endX - this.startX,
          y: this.endY - this.startY
        },
        offset;

    // Locking aspect ratio in "free mode" by holding shift key (#259)
    if (!aspectRatio && shiftKey) {
      aspectRatio = width && height ? width / height : 1;
    }

    if (options.strict) {
      minLeft = cropBox.minLeft;
      minTop = cropBox.minTop;
      maxWidth = minLeft + min(container.width, canvas.width);
      maxHeight = minTop + min(container.height, canvas.height);
    }

    if (aspectRatio) {
      range.X = range.y * aspectRatio;
      range.Y = range.x / aspectRatio;
    }

    switch (dragType) {
      // Move cropBox
      case 'all':
        left += range.x;
        top += range.y;
        break;

      // Resize cropBox
      case 'e':
        if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
          renderable = false;
          break;
        }

        width += range.x;

        if (aspectRatio) {
          height = width / aspectRatio;
          top -= range.Y / 2;
        }

        if (width < 0) {
          dragType = 'w';
          width = 0;
        }

        break;

      case 'n':
        if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {
          renderable = false;
          break;
        }

        height -= range.y;
        top += range.y;

        if (aspectRatio) {
          width = height * aspectRatio;
          left += range.X / 2;
        }

        if (height < 0) {
          dragType = 's';
          height = 0;
        }

        break;

      case 'w':
        if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
          renderable = false;
          break;
        }

        width -= range.x;
        left += range.x;

        if (aspectRatio) {
          height = width / aspectRatio;
          top += range.Y / 2;
        }

        if (width < 0) {
          dragType = 'e';
          width = 0;
        }

        break;

      case 's':
        if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {
          renderable = false;
          break;
        }

        height += range.y;

        if (aspectRatio) {
          width = height * aspectRatio;
          left -= range.X / 2;
        }

        if (height < 0) {
          dragType = 'n';
          height = 0;
        }

        break;

      case 'ne':
        if (aspectRatio) {
          if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {
            renderable = false;
            break;
          }

          height -= range.y;
          top += range.y;
          width = height * aspectRatio;
        } else {
          if (range.x >= 0) {
            if (right < maxWidth) {
              width += range.x;
            } else if (range.y <= 0 && top <= minTop) {
              renderable = false;
            }
          } else {
            width += range.x;
          }

          if (range.y <= 0) {
            if (top > minTop) {
              height -= range.y;
              top += range.y;
            }
          } else {
            height -= range.y;
            top += range.y;
          }
        }

        if (width < 0 && height < 0) {
          dragType = 'sw';
          height = 0;
          width = 0;
        } else if (width < 0) {
          dragType = 'nw';
          width = 0;
        } else if (height < 0) {
          dragType = 'se';
          height = 0;
        }

        break;

      case 'nw':
        if (aspectRatio) {
          if (range.y <= 0 && (top <= minTop || left <= minLeft)) {
            renderable = false;
            break;
          }

          height -= range.y;
          top += range.y;
          width = height * aspectRatio;
          left += range.X;
        } else {
          if (range.x <= 0) {
            if (left > minLeft) {
              width -= range.x;
              left += range.x;
            } else if (range.y <= 0 && top <= minTop) {
              renderable = false;
            }
          } else {
            width -= range.x;
            left += range.x;
          }

          if (range.y <= 0) {
            if (top > minTop) {
              height -= range.y;
              top += range.y;
            }
          } else {
            height -= range.y;
            top += range.y;
          }
        }

        if (width < 0 && height < 0) {
          dragType = 'se';
          height = 0;
          width = 0;
        } else if (width < 0) {
          dragType = 'ne';
          width = 0;
        } else if (height < 0) {
          dragType = 'sw';
          height = 0;
        }

        break;

      case 'sw':
        if (aspectRatio) {
          if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {
            renderable = false;
            break;
          }

          width -= range.x;
          left += range.x;
          height = width / aspectRatio;
        } else {
          if (range.x <= 0) {
            if (left > minLeft) {
              width -= range.x;
              left += range.x;
            } else if (range.y >= 0 && bottom >= maxHeight) {
              renderable = false;
            }
          } else {
            width -= range.x;
            left += range.x;
          }

          if (range.y >= 0) {
            if (bottom < maxHeight) {
              height += range.y;
            }
          } else {
            height += range.y;
          }
        }

        if (width < 0 && height < 0) {
          dragType = 'ne';
          height = 0;
          width = 0;
        } else if (width < 0) {
          dragType = 'se';
          width = 0;
        } else if (height < 0) {
          dragType = 'nw';
          height = 0;
        }

        break;

      case 'se':
        if (aspectRatio) {
          if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {
            renderable = false;
            break;
          }

          width += range.x;
          height = width / aspectRatio;
        } else {
          if (range.x >= 0) {
            if (right < maxWidth) {
              width += range.x;
            } else if (range.y >= 0 && bottom >= maxHeight) {
              renderable = false;
            }
          } else {
            width += range.x;
          }

          if (range.y >= 0) {
            if (bottom < maxHeight) {
              height += range.y;
            }
          } else {
            height += range.y;
          }
        }

        if (width < 0 && height < 0) {
          dragType = 'nw';
          height = 0;
          width = 0;
        } else if (width < 0) {
          dragType = 'sw';
          width = 0;
        } else if (height < 0) {
          dragType = 'ne';
          height = 0;
        }

        break;

      // Move image
      case 'move':
        canvas.left += range.x;
        canvas.top += range.y;
        this.renderCanvas(true);
        renderable = false;
        break;

      // Scale image
      case 'zoom':
        this.zoom(function (x1, y1, x2, y2) {
          var z1 = sqrt(x1 * x1 + y1 * y1),
              z2 = sqrt(x2 * x2 + y2 * y2);

          return (z2 - z1) / z1;
        }(
          abs(this.startX - this.startX2),
          abs(this.startY - this.startY2),
          abs(this.endX - this.endX2),
          abs(this.endY - this.endY2)
        ));

        this.startX2 = this.endX2;
        this.startY2 = this.endY2;
        renderable = false;
        break;

      // Crop image
      case 'crop':
        if (range.x && range.y) {
          offset = this.$cropper.offset();
          left = this.startX - offset.left;
          top = this.startY - offset.top;
          width = cropBox.minWidth;
          height = cropBox.minHeight;

          if (range.x > 0) {
            if (range.y > 0) {
              dragType = 'se';
            } else {
              dragType = 'ne';
              top -= height;
            }
          } else {
            if (range.y > 0) {
              dragType = 'sw';
              left -= width;
            } else {
              dragType = 'nw';
              left -= width;
              top -= height;
            }
          }

          // Show the cropBox if is hidden
          if (!this.cropped) {
            this.cropped = true;
            this.$cropBox.removeClass(CLASS_HIDDEN);
          }
        }

        break;

      // No default
    }

    if (renderable) {
      cropBox.width = width;
      cropBox.height = height;
      cropBox.left = left;
      cropBox.top = top;
      this.dragType = dragType;

      this.renderCropBox();
    }

    // Override
    this.startX = this.endX;
    this.startY = this.endY;
  };

  $.extend(Cropper.prototype, prototype);

  Cropper.DEFAULTS = {
    // Defines the aspect ratio of the crop box
    // Type: Number
    aspectRatio: NaN,

    // Defines the percentage of automatic cropping area when initializes
    // Type: Number (Must large than 0 and less than 1)
    autoCropArea: 0.8, // 80%

    // Outputs the cropping results.
    // Type: Function
    crop: null,

    // Previous/latest crop data
    // Type: Object
    data: null,

    // Add extra containers for previewing
    // Type: String (jQuery selector)
    preview: '',

    // Toggles
    strict: true, // strict mode, the image cannot zoom out less than the container
    responsive: true, // Rebuild when resize the window
    checkImageOrigin: true, // Check if the target image is cross origin

    modal: true, // Show the black modal
    guides: true, // Show the dashed lines for guiding
    highlight: true, // Show the white modal to highlight the crop box
    background: true, // Show the grid background

    autoCrop: true, // Enable to crop the image automatically when initialize
    dragCrop: true, // Enable to create new crop box by dragging over the image
    movable: true, // Enable to move the image
    rotatable: true, // Enable to rotate the image
    zoomable: true, // Enable to zoom the image
    touchDragZoom: true, // Enable to zoom the image by wheeling mouse
    mouseWheelZoom: true, // Enable to zoom the image by dragging touch
    cropBoxMovable: true, // Enable to move the crop box
    cropBoxResizable: true, // Enable to resize the crop box
    doubleClickToggle: true, // Toggle drag mode between "crop" and "move" when double click on the cropper

    // Dimensions
    minCanvasWidth: 0,
    minCanvasHeight: 0,
    minCropBoxWidth: 0,
    minCropBoxHeight: 0,
    minContainerWidth: 200,
    minContainerHeight: 100,

    // Events
    build: null, // Function
    built: null, // Function
    dragstart: null, // Function
    dragmove: null, // Function
    dragend: null, // Function
    zoomin: null, // Function
    zoomout: null, // Function
    change: null // Function
  };

  Cropper.setDefaults = function (options) {
    $.extend(Cropper.DEFAULTS, options);
  };

  // Use the string compressor: Strmin (https://github.com/fengyuanchen/strmin)
  Cropper.TEMPLATE = (function (source, words) {
    words = words.split(',');
    return source.replace(/\d+/g, function (i) {
      return words[i];
    });
  })('<0 6="5-container"><0 6="5-canvas"></0><0 6="5-2-9"></0><0 6="5-crop-9"><1 6="5-view-9"></1><1 6="5-8 8-h"></1><1 6="5-8 8-v"></1><1 6="5-face"></1><1 6="5-7 7-e" 3-2="e"></1><1 6="5-7 7-n" 3-2="n"></1><1 6="5-7 7-w" 3-2="w"></1><1 6="5-7 7-s" 3-2="s"></1><1 6="5-4 4-e" 3-2="e"></1><1 6="5-4 4-n" 3-2="n"></1><1 6="5-4 4-w" 3-2="w"></1><1 6="5-4 4-s" 3-2="s"></1><1 6="5-4 4-ne" 3-2="ne"></1><1 6="5-4 4-nw" 3-2="nw"></1><1 6="5-4 4-sw" 3-2="sw"></1><1 6="5-4 4-se" 3-2="se"></1></0></0>', 'div,span,drag,data,point,cropper,class,line,dashed,box');

  /* Template source:
  <div class="cropper-container">
    <div class="cropper-canvas"></div>
    <div class="cropper-drag-box"></div>
    <div class="cropper-crop-box">
      <span class="cropper-view-box"></span>
      <span class="cropper-dashed dashed-h"></span>
      <span class="cropper-dashed dashed-v"></span>
      <span class="cropper-face"></span>
      <span class="cropper-line line-e" data-drag="e"></span>
      <span class="cropper-line line-n" data-drag="n"></span>
      <span class="cropper-line line-w" data-drag="w"></span>
      <span class="cropper-line line-s" data-drag="s"></span>
      <span class="cropper-point point-e" data-drag="e"></span>
      <span class="cropper-point point-n" data-drag="n"></span>
      <span class="cropper-point point-w" data-drag="w"></span>
      <span class="cropper-point point-s" data-drag="s"></span>
      <span class="cropper-point point-ne" data-drag="ne"></span>
      <span class="cropper-point point-nw" data-drag="nw"></span>
      <span class="cropper-point point-sw" data-drag="sw"></span>
      <span class="cropper-point point-se" data-drag="se"></span>
    </div>
  </div>
  */

  // Save the other cropper
  Cropper.other = $.fn.cropper;

  // Register as jQuery plugin
  $.fn.cropper = function (options) {
    var args = toArray(arguments, 1),
        result;

    this.each(function () {
      var $this = $(this),
          data = $this.data('cropper'),
          fn;

      if (!data) {
        $this.data('cropper', (data = new Cropper(this, options)));
      }

      if (typeof options === 'string' && $.isFunction((fn = data[options]))) {
        result = fn.apply(data, args);
      }
    });

    return isUndefined(result) ? this : result;
  };

  $.fn.cropper.Constructor = Cropper;
  $.fn.cropper.setDefaults = Cropper.setDefaults;

  // No conflict
  $.fn.cropper.noConflict = function () {
    $.fn.cropper = Cropper.other;
    return this;
  };

});
(function() {
'use strict';

angular.module('ngCropper', ['ng'])
.directive('ngCropper', ['$q', '$parse', function($q, $parse) {
  return {
    restrict: 'A',
    scope: {
      options: '=ngCropperOptions',
      proxy: '=ngCropperProxy', // Optional.
      showEvent: '=ngCropperShow',
      hideEvent: '=ngCropperHide'
    },
    link: function(scope, element, atts) {
      var shown = false;

      scope.$on(scope.showEvent, function() {
        if (shown) return;
        shown = true;

        preprocess(scope.options, element[0])
          .then(function(options) {
            setProxy(element);
            element.cropper(options);
          })
      });

      function setProxy(element) {
        if (!scope.proxy) return;
        var setter = $parse(scope.proxy).assign;
        setter(scope.$parent, element.cropper.bind(element));
      }

      scope.$on(scope.hideEvent, function() {
        if (!shown) return;
        shown = false;
        element.cropper('destroy');
      });

      scope.$watch('options.disabled', function(disabled) {
        if (!shown) return;
        if (disabled) element.cropper('disable');
        if (!disabled) element.cropper('enable');
      });
    }
  };

  function preprocess(options, img) {
    options = options || {};
    var result = $q.when(options); // No changes.
    if (options.maximize) {
      result = maximizeSelection(options, img);
    }
    return result;
  }

  /**
   * Change options to make selection maximum for the image.
   * fengyuanchen/cropper calculates valid selection's height & width
   * with respect to `aspectRatio`.
   */
  function maximizeSelection(options, img) {
    return getRealSize(img).then(function(size) {
      options.data = size;
      return options;
    });
  }

  /**
   * Returns real image size (without changes by css, attributes).
   */
  function getRealSize(img) {
    var defer = $q.defer();
    var size = {height: null, width: null};
    var image = new Image();

    image.onload = function() {
      defer.resolve({width: image.width, height: image.height});
    }

    image.src = img.src;
    return defer.promise;
  }
}])
.service('Cropper', ['$q', function($q) {

  this.encode = function(blob) {
    var defer = $q.defer();
    var reader = new FileReader();
    reader.onload = function(e) {
      defer.resolve(e.target.result);
    };
    reader.readAsDataURL(blob);
    return defer.promise;
  };

  this.decode = function(dataUrl) {
    var meta = dataUrl.split(';')[0];
    var type = meta.split(':')[1];
    var binary = atob(dataUrl.split(',')[1]);
    var array = new Uint8Array(binary.length);
    for (var i = 0; i < binary.length; i++) {
        array[i] = binary.charCodeAt(i);
    }
    return new Blob([array], {type: type});
  };

  this.crop = function(file, data) {
    var _decodeBlob = this.decode;
    return this.encode(file).then(_createImage).then(function(image) {
      var canvas = createCanvas(data);
      var context = canvas.getContext('2d');

      context.drawImage(image, data.x, data.y, data.width, data.height, 0, 0, data.width, data.height);

      var encoded = canvas.toDataURL(file.type);
      removeElement(canvas);

      return _decodeBlob(encoded);
    });
  };

  this.scale = function(file, data) {
    var _decodeBlob = this.decode;
    return this.encode(file).then(_createImage).then(function(image) {
      var heightOrig = image.height;
      var widthOrig = image.width;
      var ratio, height, width;

      if (angular.isNumber(data)) {
        ratio = data;
        height = heightOrig * ratio;
        width = widthOrig * ratio;
      }

      if (angular.isObject(data)) {
        ratio = widthOrig / heightOrig;
        height = data.height;
        width = data.width;

        if (height && !width)
          width = height * ratio;
        else if (width && !height)
          height = width / ratio;
      }

      var canvas = createCanvas(data);
      var context = canvas.getContext('2d');

      canvas.height = height;
      canvas.width = width;

      context.drawImage(image, 0, 0, widthOrig, heightOrig, 0, 0, width, height);

      var encoded = canvas.toDataURL(file.type);
      removeElement(canvas);

      return _decodeBlob(encoded);
    });
  };


  function _createImage(source) {
    var defer = $q.defer();
    var image = new Image();
    image.onload = function(e) { defer.resolve(e.target); };
    image.src = source;
    return defer.promise;
  }

  function createCanvas(data) {
    var canvas = document.createElement('canvas');
    canvas.width = data.width;
    canvas.height = data.height;
    canvas.style.display = 'none';
    document.body.appendChild(canvas);
    return canvas;
  }

  function removeElement(el) {
    el.parentElement.removeChild(el);
  }

}]);

})();

},{"jquery":"jquery"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/default-params.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var defaultParams = {
  title: '',
  text: '',
  type: null,
  allowOutsideClick: false,
  showConfirmButton: true,
  showCancelButton: false,
  closeOnConfirm: true,
  closeOnCancel: true,
  confirmButtonText: 'OK',
  confirmButtonColor: '#8CD4F5',
  cancelButtonText: 'Cancel',
  imageUrl: null,
  imageSize: null,
  timer: null,
  customClass: '',
  html: false,
  animation: true,
  allowEscapeKey: true,
  inputType: 'text',
  inputPlaceholder: '',
  inputValue: '',
  showLoaderOnConfirm: false
};

exports['default'] = defaultParams;
module.exports = exports['default'];
},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-click.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _colorLuminance = require('./utils');

var _getModal = require('./handle-swal-dom');

var _hasClass$isDescendant = require('./handle-dom');

/*
 * User clicked on "Confirm"/"OK" or "Cancel"
 */
var handleButton = function handleButton(event, params, modal) {
  var e = event || window.event;
  var target = e.target || e.srcElement;

  var targetedConfirm = target.className.indexOf('confirm') !== -1;
  var targetedOverlay = target.className.indexOf('sweet-overlay') !== -1;
  var modalIsVisible = _hasClass$isDescendant.hasClass(modal, 'visible');
  var doneFunctionExists = params.doneFunction && modal.getAttribute('data-has-done-function') === 'true';

  // Since the user can change the background-color of the confirm button programmatically,
  // we must calculate what the color should be on hover/active
  var normalColor, hoverColor, activeColor;
  if (targetedConfirm && params.confirmButtonColor) {
    normalColor = params.confirmButtonColor;
    hoverColor = _colorLuminance.colorLuminance(normalColor, -0.04);
    activeColor = _colorLuminance.colorLuminance(normalColor, -0.14);
  }

  function shouldSetConfirmButtonColor(color) {
    if (targetedConfirm && params.confirmButtonColor) {
      target.style.backgroundColor = color;
    }
  }

  switch (e.type) {
    case 'mouseover':
      shouldSetConfirmButtonColor(hoverColor);
      break;

    case 'mouseout':
      shouldSetConfirmButtonColor(normalColor);
      break;

    case 'mousedown':
      shouldSetConfirmButtonColor(activeColor);
      break;

    case 'mouseup':
      shouldSetConfirmButtonColor(hoverColor);
      break;

    case 'focus':
      var $confirmButton = modal.querySelector('button.confirm');
      var $cancelButton = modal.querySelector('button.cancel');

      if (targetedConfirm) {
        $cancelButton.style.boxShadow = 'none';
      } else {
        $confirmButton.style.boxShadow = 'none';
      }
      break;

    case 'click':
      var clickedOnModal = modal === target;
      var clickedOnModalChild = _hasClass$isDescendant.isDescendant(modal, target);

      // Ignore click outside if allowOutsideClick is false
      if (!clickedOnModal && !clickedOnModalChild && modalIsVisible && !params.allowOutsideClick) {
        break;
      }

      if (targetedConfirm && doneFunctionExists && modalIsVisible) {
        handleConfirm(modal, params);
      } else if (doneFunctionExists && modalIsVisible || targetedOverlay) {
        handleCancel(modal, params);
      } else if (_hasClass$isDescendant.isDescendant(modal, target) && target.tagName === 'BUTTON') {
        sweetAlert.close();
      }
      break;
  }
};

/*
 *  User clicked on "Confirm"/"OK"
 */
var handleConfirm = function handleConfirm(modal, params) {
  var callbackValue = true;

  if (_hasClass$isDescendant.hasClass(modal, 'show-input')) {
    callbackValue = modal.querySelector('input').value;

    if (!callbackValue) {
      callbackValue = '';
    }
  }

  params.doneFunction(callbackValue);

  if (params.closeOnConfirm) {
    sweetAlert.close();
  }
  // Disable cancel and confirm button if the parameter is true
  if (params.showLoaderOnConfirm) {
    sweetAlert.disableButtons();
  }
};

/*
 *  User clicked on "Cancel"
 */
var handleCancel = function handleCancel(modal, params) {
  // Check if callback function expects a parameter (to track cancel actions)
  var functionAsStr = String(params.doneFunction).replace(/\s/g, '');
  var functionHandlesCancel = functionAsStr.substring(0, 9) === 'function(' && functionAsStr.substring(9, 10) !== ')';

  if (functionHandlesCancel) {
    params.doneFunction(false);
  }

  if (params.closeOnCancel) {
    sweetAlert.close();
  }
};

exports['default'] = {
  handleButton: handleButton,
  handleConfirm: handleConfirm,
  handleCancel: handleCancel
};
module.exports = exports['default'];
},{"./handle-dom":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-dom.js","./handle-swal-dom":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-swal-dom.js","./utils":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/utils.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-dom.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var hasClass = function hasClass(elem, className) {
  return new RegExp(' ' + className + ' ').test(' ' + elem.className + ' ');
};

var addClass = function addClass(elem, className) {
  if (!hasClass(elem, className)) {
    elem.className += ' ' + className;
  }
};

var removeClass = function removeClass(elem, className) {
  var newClass = ' ' + elem.className.replace(/[\t\r\n]/g, ' ') + ' ';
  if (hasClass(elem, className)) {
    while (newClass.indexOf(' ' + className + ' ') >= 0) {
      newClass = newClass.replace(' ' + className + ' ', ' ');
    }
    elem.className = newClass.replace(/^\s+|\s+$/g, '');
  }
};

var escapeHtml = function escapeHtml(str) {
  var div = document.createElement('div');
  div.appendChild(document.createTextNode(str));
  return div.innerHTML;
};

var _show = function _show(elem) {
  elem.style.opacity = '';
  elem.style.display = 'block';
};

var show = function show(elems) {
  if (elems && !elems.length) {
    return _show(elems);
  }
  for (var i = 0; i < elems.length; ++i) {
    _show(elems[i]);
  }
};

var _hide = function _hide(elem) {
  elem.style.opacity = '';
  elem.style.display = 'none';
};

var hide = function hide(elems) {
  if (elems && !elems.length) {
    return _hide(elems);
  }
  for (var i = 0; i < elems.length; ++i) {
    _hide(elems[i]);
  }
};

var isDescendant = function isDescendant(parent, child) {
  var node = child.parentNode;
  while (node !== null) {
    if (node === parent) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
};

var getTopMargin = function getTopMargin(elem) {
  elem.style.left = '-9999px';
  elem.style.display = 'block';

  var height = elem.clientHeight,
      padding;
  if (typeof getComputedStyle !== 'undefined') {
    // IE 8
    padding = parseInt(getComputedStyle(elem).getPropertyValue('padding-top'), 10);
  } else {
    padding = parseInt(elem.currentStyle.padding);
  }

  elem.style.left = '';
  elem.style.display = 'none';
  return '-' + parseInt((height + padding) / 2) + 'px';
};

var fadeIn = function fadeIn(elem, interval) {
  if (+elem.style.opacity < 1) {
    interval = interval || 16;
    elem.style.opacity = 0;
    elem.style.display = 'block';
    var last = +new Date();
    var tick = (function (_tick) {
      function tick() {
        return _tick.apply(this, arguments);
      }

      tick.toString = function () {
        return _tick.toString();
      };

      return tick;
    })(function () {
      elem.style.opacity = +elem.style.opacity + (new Date() - last) / 100;
      last = +new Date();

      if (+elem.style.opacity < 1) {
        setTimeout(tick, interval);
      }
    });
    tick();
  }
  elem.style.display = 'block'; //fallback IE8
};

var fadeOut = function fadeOut(elem, interval) {
  interval = interval || 16;
  elem.style.opacity = 1;
  var last = +new Date();
  var tick = (function (_tick2) {
    function tick() {
      return _tick2.apply(this, arguments);
    }

    tick.toString = function () {
      return _tick2.toString();
    };

    return tick;
  })(function () {
    elem.style.opacity = +elem.style.opacity - (new Date() - last) / 100;
    last = +new Date();

    if (+elem.style.opacity > 0) {
      setTimeout(tick, interval);
    } else {
      elem.style.display = 'none';
    }
  });
  tick();
};

var fireClick = function fireClick(node) {
  // Taken from http://www.nonobtrusive.com/2011/11/29/programatically-fire-crossbrowser-click-event-with-javascript/
  // Then fixed for today's Chrome browser.
  if (typeof MouseEvent === 'function') {
    // Up-to-date approach
    var mevt = new MouseEvent('click', {
      view: window,
      bubbles: false,
      cancelable: true
    });
    node.dispatchEvent(mevt);
  } else if (document.createEvent) {
    // Fallback
    var evt = document.createEvent('MouseEvents');
    evt.initEvent('click', false, false);
    node.dispatchEvent(evt);
  } else if (document.createEventObject) {
    node.fireEvent('onclick');
  } else if (typeof node.onclick === 'function') {
    node.onclick();
  }
};

var stopEventPropagation = function stopEventPropagation(e) {
  // In particular, make sure the space bar doesn't scroll the main window.
  if (typeof e.stopPropagation === 'function') {
    e.stopPropagation();
    e.preventDefault();
  } else if (window.event && window.event.hasOwnProperty('cancelBubble')) {
    window.event.cancelBubble = true;
  }
};

exports.hasClass = hasClass;
exports.addClass = addClass;
exports.removeClass = removeClass;
exports.escapeHtml = escapeHtml;
exports._show = _show;
exports.show = show;
exports._hide = _hide;
exports.hide = hide;
exports.isDescendant = isDescendant;
exports.getTopMargin = getTopMargin;
exports.fadeIn = fadeIn;
exports.fadeOut = fadeOut;
exports.fireClick = fireClick;
exports.stopEventPropagation = stopEventPropagation;
},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-key.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _stopEventPropagation$fireClick = require('./handle-dom');

var _setFocusStyle = require('./handle-swal-dom');

var handleKeyDown = function handleKeyDown(event, params, modal) {
  var e = event || window.event;
  var keyCode = e.keyCode || e.which;

  var $okButton = modal.querySelector('button.confirm');
  var $cancelButton = modal.querySelector('button.cancel');
  var $modalButtons = modal.querySelectorAll('button[tabindex]');

  if ([9, 13, 32, 27].indexOf(keyCode) === -1) {
    // Don't do work on keys we don't care about.
    return;
  }

  var $targetElement = e.target || e.srcElement;

  var btnIndex = -1; // Find the button - note, this is a nodelist, not an array.
  for (var i = 0; i < $modalButtons.length; i++) {
    if ($targetElement === $modalButtons[i]) {
      btnIndex = i;
      break;
    }
  }

  if (keyCode === 9) {
    // TAB
    if (btnIndex === -1) {
      // No button focused. Jump to the confirm button.
      $targetElement = $okButton;
    } else {
      // Cycle to the next button
      if (btnIndex === $modalButtons.length - 1) {
        $targetElement = $modalButtons[0];
      } else {
        $targetElement = $modalButtons[btnIndex + 1];
      }
    }

    _stopEventPropagation$fireClick.stopEventPropagation(e);
    $targetElement.focus();

    if (params.confirmButtonColor) {
      _setFocusStyle.setFocusStyle($targetElement, params.confirmButtonColor);
    }
  } else {
    if (keyCode === 13) {
      if ($targetElement.tagName === 'INPUT') {
        $targetElement = $okButton;
        $okButton.focus();
      }

      if (btnIndex === -1) {
        // ENTER/SPACE clicked outside of a button.
        $targetElement = $okButton;
      } else {
        // Do nothing - let the browser handle it.
        $targetElement = undefined;
      }
    } else if (keyCode === 27 && params.allowEscapeKey === true) {
      $targetElement = $cancelButton;
      _stopEventPropagation$fireClick.fireClick($targetElement, e);
    } else {
      // Fallback - let the browser handle it.
      $targetElement = undefined;
    }
  }
};

exports['default'] = handleKeyDown;
module.exports = exports['default'];
},{"./handle-dom":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-dom.js","./handle-swal-dom":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-swal-dom.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-swal-dom.js":[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _hexToRgb = require('./utils');

var _removeClass$getTopMargin$fadeIn$show$addClass = require('./handle-dom');

var _defaultParams = require('./default-params');

var _defaultParams2 = _interopRequireWildcard(_defaultParams);

/*
 * Add modal + overlay to DOM
 */

var _injectedHTML = require('./injected-html');

var _injectedHTML2 = _interopRequireWildcard(_injectedHTML);

var modalClass = '.sweet-alert';
var overlayClass = '.sweet-overlay';

var sweetAlertInitialize = function sweetAlertInitialize() {
  var sweetWrap = document.createElement('div');
  sweetWrap.innerHTML = _injectedHTML2['default'];

  // Append elements to body
  while (sweetWrap.firstChild) {
    document.body.appendChild(sweetWrap.firstChild);
  }
};

/*
 * Get DOM element of modal
 */
var getModal = (function (_getModal) {
  function getModal() {
    return _getModal.apply(this, arguments);
  }

  getModal.toString = function () {
    return _getModal.toString();
  };

  return getModal;
})(function () {
  var $modal = document.querySelector(modalClass);

  if (!$modal) {
    sweetAlertInitialize();
    $modal = getModal();
  }

  return $modal;
});

/*
 * Get DOM element of input (in modal)
 */
var getInput = function getInput() {
  var $modal = getModal();
  if ($modal) {
    return $modal.querySelector('input');
  }
};

/*
 * Get DOM element of overlay
 */
var getOverlay = function getOverlay() {
  return document.querySelector(overlayClass);
};

/*
 * Add box-shadow style to button (depending on its chosen bg-color)
 */
var setFocusStyle = function setFocusStyle($button, bgColor) {
  var rgbColor = _hexToRgb.hexToRgb(bgColor);
  $button.style.boxShadow = '0 0 2px rgba(' + rgbColor + ', 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)';
};

/*
 * Animation when opening modal
 */
var openModal = function openModal(callback) {
  var $modal = getModal();
  _removeClass$getTopMargin$fadeIn$show$addClass.fadeIn(getOverlay(), 10);
  _removeClass$getTopMargin$fadeIn$show$addClass.show($modal);
  _removeClass$getTopMargin$fadeIn$show$addClass.addClass($modal, 'showSweetAlert');
  _removeClass$getTopMargin$fadeIn$show$addClass.removeClass($modal, 'hideSweetAlert');

  window.previousActiveElement = document.activeElement;
  var $okButton = $modal.querySelector('button.confirm');
  $okButton.focus();

  setTimeout(function () {
    _removeClass$getTopMargin$fadeIn$show$addClass.addClass($modal, 'visible');
  }, 500);

  var timer = $modal.getAttribute('data-timer');

  if (timer !== 'null' && timer !== '') {
    var timerCallback = callback;
    $modal.timeout = setTimeout(function () {
      var doneFunctionExists = (timerCallback || null) && $modal.getAttribute('data-has-done-function') === 'true';
      if (doneFunctionExists) {
        timerCallback(null);
      } else {
        sweetAlert.close();
      }
    }, timer);
  }
};

/*
 * Reset the styling of the input
 * (for example if errors have been shown)
 */
var resetInput = function resetInput() {
  var $modal = getModal();
  var $input = getInput();

  _removeClass$getTopMargin$fadeIn$show$addClass.removeClass($modal, 'show-input');
  $input.value = _defaultParams2['default'].inputValue;
  $input.setAttribute('type', _defaultParams2['default'].inputType);
  $input.setAttribute('placeholder', _defaultParams2['default'].inputPlaceholder);

  resetInputError();
};

var resetInputError = function resetInputError(event) {
  // If press enter => ignore
  if (event && event.keyCode === 13) {
    return false;
  }

  var $modal = getModal();

  var $errorIcon = $modal.querySelector('.sa-input-error');
  _removeClass$getTopMargin$fadeIn$show$addClass.removeClass($errorIcon, 'show');

  var $errorContainer = $modal.querySelector('.sa-error-container');
  _removeClass$getTopMargin$fadeIn$show$addClass.removeClass($errorContainer, 'show');
};

/*
 * Set "margin-top"-property on modal based on its computed height
 */
var fixVerticalPosition = function fixVerticalPosition() {
  var $modal = getModal();
  $modal.style.marginTop = _removeClass$getTopMargin$fadeIn$show$addClass.getTopMargin(getModal());
};

exports.sweetAlertInitialize = sweetAlertInitialize;
exports.getModal = getModal;
exports.getOverlay = getOverlay;
exports.getInput = getInput;
exports.setFocusStyle = setFocusStyle;
exports.openModal = openModal;
exports.resetInput = resetInput;
exports.resetInputError = resetInputError;
exports.fixVerticalPosition = fixVerticalPosition;
},{"./default-params":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/default-params.js","./handle-dom":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-dom.js","./injected-html":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/injected-html.js","./utils":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/utils.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/injected-html.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var injectedHTML =

// Dark overlay
"<div class=\"sweet-overlay\" tabIndex=\"-1\"></div>" +

// Modal
"<div class=\"sweet-alert\">" +

// Error icon
"<div class=\"sa-icon sa-error\">\n      <span class=\"sa-x-mark\">\n        <span class=\"sa-line sa-left\"></span>\n        <span class=\"sa-line sa-right\"></span>\n      </span>\n    </div>" +

// Warning icon
"<div class=\"sa-icon sa-warning\">\n      <span class=\"sa-body\"></span>\n      <span class=\"sa-dot\"></span>\n    </div>" +

// Info icon
"<div class=\"sa-icon sa-info\"></div>" +

// Success icon
"<div class=\"sa-icon sa-success\">\n      <span class=\"sa-line sa-tip\"></span>\n      <span class=\"sa-line sa-long\"></span>\n\n      <div class=\"sa-placeholder\"></div>\n      <div class=\"sa-fix\"></div>\n    </div>" + "<div class=\"sa-icon sa-custom\"></div>" +

// Title, text and input
"<h2>Title</h2>\n    <p>Text</p>\n    <fieldset>\n      <input type=\"text\" tabIndex=\"3\" />\n      <div class=\"sa-input-error\"></div>\n    </fieldset>" +

// Input errors
"<div class=\"sa-error-container\">\n      <div class=\"icon\">!</div>\n      <p>Not valid!</p>\n    </div>" +

// Cancel and confirm buttons
"<div class=\"sa-button-container\">\n      <button class=\"cancel\" tabIndex=\"2\">Cancel</button>\n      <div class=\"sa-confirm-button-container\">\n        <button class=\"confirm\" tabIndex=\"1\">OK</button>" +

// Loading animation
"<div class=\"la-ball-fall\">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div>" +

// End of modal
"</div>";

exports["default"] = injectedHTML;
module.exports = exports["default"];
},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/set-params.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _isIE8 = require('./utils');

var _getModal$getInput$setFocusStyle = require('./handle-swal-dom');

var _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide = require('./handle-dom');

var alertTypes = ['error', 'warning', 'info', 'success', 'input', 'prompt'];

/*
 * Set type, text and actions on modal
 */
var setParameters = function setParameters(params) {
  var modal = _getModal$getInput$setFocusStyle.getModal();

  var $title = modal.querySelector('h2');
  var $text = modal.querySelector('p');
  var $cancelBtn = modal.querySelector('button.cancel');
  var $confirmBtn = modal.querySelector('button.confirm');

  /*
   * Title
   */
  $title.innerHTML = params.html ? params.title : _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.escapeHtml(params.title).split('\n').join('<br>');

  /*
   * Text
   */
  $text.innerHTML = params.html ? params.text : _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.escapeHtml(params.text || '').split('\n').join('<br>');
  if (params.text) _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.show($text);

  /*
   * Custom class
   */
  if (params.customClass) {
    _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass(modal, params.customClass);
    modal.setAttribute('data-custom-class', params.customClass);
  } else {
    // Find previously set classes and remove them
    var customClass = modal.getAttribute('data-custom-class');
    _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.removeClass(modal, customClass);
    modal.setAttribute('data-custom-class', '');
  }

  /*
   * Icon
   */
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.hide(modal.querySelectorAll('.sa-icon'));

  if (params.type && !_isIE8.isIE8()) {
    var _ret = (function () {

      var validType = false;

      for (var i = 0; i < alertTypes.length; i++) {
        if (params.type === alertTypes[i]) {
          validType = true;
          break;
        }
      }

      if (!validType) {
        logStr('Unknown alert type: ' + params.type);
        return {
          v: false
        };
      }

      var typesWithIcons = ['success', 'error', 'warning', 'info'];
      var $icon = undefined;

      if (typesWithIcons.indexOf(params.type) !== -1) {
        $icon = modal.querySelector('.sa-icon.' + 'sa-' + params.type);
        _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.show($icon);
      }

      var $input = _getModal$getInput$setFocusStyle.getInput();

      // Animate icon
      switch (params.type) {

        case 'success':
          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon, 'animate');
          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon.querySelector('.sa-tip'), 'animateSuccessTip');
          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon.querySelector('.sa-long'), 'animateSuccessLong');
          break;

        case 'error':
          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon, 'animateErrorIcon');
          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon.querySelector('.sa-x-mark'), 'animateXMark');
          break;

        case 'warning':
          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon, 'pulseWarning');
          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon.querySelector('.sa-body'), 'pulseWarningIns');
          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon.querySelector('.sa-dot'), 'pulseWarningIns');
          break;

        case 'input':
        case 'prompt':
          $input.setAttribute('type', params.inputType);
          $input.value = params.inputValue;
          $input.setAttribute('placeholder', params.inputPlaceholder);
          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass(modal, 'show-input');
          setTimeout(function () {
            $input.focus();
            $input.addEventListener('keyup', swal.resetInputError);
          }, 400);
          break;
      }
    })();

    if (typeof _ret === 'object') {
      return _ret.v;
    }
  }

  /*
   * Custom image
   */
  if (params.imageUrl) {
    var $customIcon = modal.querySelector('.sa-icon.sa-custom');

    $customIcon.style.backgroundImage = 'url(' + params.imageUrl + ')';
    _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.show($customIcon);

    var _imgWidth = 80;
    var _imgHeight = 80;

    if (params.imageSize) {
      var dimensions = params.imageSize.toString().split('x');
      var imgWidth = dimensions[0];
      var imgHeight = dimensions[1];

      if (!imgWidth || !imgHeight) {
        logStr('Parameter imageSize expects value with format WIDTHxHEIGHT, got ' + params.imageSize);
      } else {
        _imgWidth = imgWidth;
        _imgHeight = imgHeight;
      }
    }

    $customIcon.setAttribute('style', $customIcon.getAttribute('style') + 'width:' + _imgWidth + 'px; height:' + _imgHeight + 'px');
  }

  /*
   * Show cancel button?
   */
  modal.setAttribute('data-has-cancel-button', params.showCancelButton);
  if (params.showCancelButton) {
    $cancelBtn.style.display = 'inline-block';
  } else {
    _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.hide($cancelBtn);
  }

  /*
   * Show confirm button?
   */
  modal.setAttribute('data-has-confirm-button', params.showConfirmButton);
  if (params.showConfirmButton) {
    $confirmBtn.style.display = 'inline-block';
  } else {
    _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.hide($confirmBtn);
  }

  /*
   * Custom text on cancel/confirm buttons
   */
  if (params.cancelButtonText) {
    $cancelBtn.innerHTML = _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.escapeHtml(params.cancelButtonText);
  }
  if (params.confirmButtonText) {
    $confirmBtn.innerHTML = _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.escapeHtml(params.confirmButtonText);
  }

  /*
   * Custom color on confirm button
   */
  if (params.confirmButtonColor) {
    // Set confirm button to selected background color
    $confirmBtn.style.backgroundColor = params.confirmButtonColor;

    // Set the confirm button color to the loading ring
    $confirmBtn.style.borderLeftColor = params.confirmLoadingButtonColor;
    $confirmBtn.style.borderRightColor = params.confirmLoadingButtonColor;

    // Set box-shadow to default focused button
    _getModal$getInput$setFocusStyle.setFocusStyle($confirmBtn, params.confirmButtonColor);
  }

  /*
   * Allow outside click
   */
  modal.setAttribute('data-allow-outside-click', params.allowOutsideClick);

  /*
   * Callback function
   */
  var hasDoneFunction = params.doneFunction ? true : false;
  modal.setAttribute('data-has-done-function', hasDoneFunction);

  /*
   * Animation
   */
  if (!params.animation) {
    modal.setAttribute('data-animation', 'none');
  } else if (typeof params.animation === 'string') {
    modal.setAttribute('data-animation', params.animation); // Custom animation
  } else {
    modal.setAttribute('data-animation', 'pop');
  }

  /*
   * Timer
   */
  modal.setAttribute('data-timer', params.timer);
};

exports['default'] = setParameters;
module.exports = exports['default'];
},{"./handle-dom":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-dom.js","./handle-swal-dom":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-swal-dom.js","./utils":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/utils.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/utils.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/*
 * Allow user to pass their own params
 */
var extend = function extend(a, b) {
  for (var key in b) {
    if (b.hasOwnProperty(key)) {
      a[key] = b[key];
    }
  }
  return a;
};

/*
 * Convert HEX codes to RGB values (#000000 -> rgb(0,0,0))
 */
var hexToRgb = function hexToRgb(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? parseInt(result[1], 16) + ', ' + parseInt(result[2], 16) + ', ' + parseInt(result[3], 16) : null;
};

/*
 * Check if the user is using Internet Explorer 8 (for fallbacks)
 */
var isIE8 = function isIE8() {
  return window.attachEvent && !window.addEventListener;
};

/*
 * IE compatible logging for developers
 */
var logStr = function logStr(string) {
  if (window.console) {
    // IE...
    window.console.log('SweetAlert: ' + string);
  }
};

/*
 * Set hover, active and focus-states for buttons 
 * (source: http://www.sitepoint.com/javascript-generate-lighter-darker-color)
 */
var colorLuminance = function colorLuminance(hex, lum) {
  // Validate hex string
  hex = String(hex).replace(/[^0-9a-f]/gi, '');
  if (hex.length < 6) {
    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }
  lum = lum || 0;

  // Convert to decimal and change luminosity
  var rgb = '#';
  var c;
  var i;

  for (i = 0; i < 3; i++) {
    c = parseInt(hex.substr(i * 2, 2), 16);
    c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);
    rgb += ('00' + c).substr(c.length);
  }

  return rgb;
};

exports.extend = extend;
exports.hexToRgb = hexToRgb;
exports.isIE8 = isIE8;
exports.logStr = logStr;
exports.colorLuminance = colorLuminance;
},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/sweetalert.js":[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});
// SweetAlert
// 2014-2015 (c) - Tristan Edwards
// github.com/t4t5/sweetalert

/*
 * jQuery-like functions for manipulating the DOM
 */

var _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation = require('./modules/handle-dom');

/*
 * Handy utilities
 */

var _extend$hexToRgb$isIE8$logStr$colorLuminance = require('./modules/utils');

/*
 *  Handle sweetAlert's DOM elements
 */

var _sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition = require('./modules/handle-swal-dom');

// Handle button events and keyboard events

var _handleButton$handleConfirm$handleCancel = require('./modules/handle-click');

var _handleKeyDown = require('./modules/handle-key');

var _handleKeyDown2 = _interopRequireWildcard(_handleKeyDown);

// Default values

var _defaultParams = require('./modules/default-params');

var _defaultParams2 = _interopRequireWildcard(_defaultParams);

var _setParameters = require('./modules/set-params');

var _setParameters2 = _interopRequireWildcard(_setParameters);

/*
 * Remember state in cases where opening and handling a modal will fiddle with it.
 * (We also use window.previousActiveElement as a global variable)
 */
var previousWindowKeyDown;
var lastFocusedButton;

/*
 * Global sweetAlert function
 * (this is what the user calls)
 */
var sweetAlert, swal;

exports['default'] = sweetAlert = swal = function () {
  var customizations = arguments[0];

  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.addClass(document.body, 'stop-scrolling');
  _sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition.resetInput();

  /*
   * Use argument if defined or default value from params object otherwise.
   * Supports the case where a default value is boolean true and should be
   * overridden by a corresponding explicit argument which is boolean false.
   */
  function argumentOrDefault(key) {
    var args = customizations;
    return args[key] === undefined ? _defaultParams2['default'][key] : args[key];
  }

  if (customizations === undefined) {
    _extend$hexToRgb$isIE8$logStr$colorLuminance.logStr('SweetAlert expects at least 1 attribute!');
    return false;
  }

  var params = _extend$hexToRgb$isIE8$logStr$colorLuminance.extend({}, _defaultParams2['default']);

  switch (typeof customizations) {

    // Ex: swal("Hello", "Just testing", "info");
    case 'string':
      params.title = customizations;
      params.text = arguments[1] || '';
      params.type = arguments[2] || '';
      break;

    // Ex: swal({ title:"Hello", text: "Just testing", type: "info" });
    case 'object':
      if (customizations.title === undefined) {
        _extend$hexToRgb$isIE8$logStr$colorLuminance.logStr('Missing "title" argument!');
        return false;
      }

      params.title = customizations.title;

      for (var customName in _defaultParams2['default']) {
        params[customName] = argumentOrDefault(customName);
      }

      // Show "Confirm" instead of "OK" if cancel button is visible
      params.confirmButtonText = params.showCancelButton ? 'Confirm' : _defaultParams2['default'].confirmButtonText;
      params.confirmButtonText = argumentOrDefault('confirmButtonText');

      // Callback function when clicking on "OK"/"Cancel"
      params.doneFunction = arguments[1] || null;

      break;

    default:
      _extend$hexToRgb$isIE8$logStr$colorLuminance.logStr('Unexpected type of argument! Expected "string" or "object", got ' + typeof customizations);
      return false;

  }

  _setParameters2['default'](params);
  _sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition.fixVerticalPosition();
  _sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition.openModal(arguments[1]);

  // Modal interactions
  var modal = _sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition.getModal();

  /*
   * Make sure all modal buttons respond to all events
   */
  var $buttons = modal.querySelectorAll('button');
  var buttonEvents = ['onclick', 'onmouseover', 'onmouseout', 'onmousedown', 'onmouseup', 'onfocus'];
  var onButtonEvent = function onButtonEvent(e) {
    return _handleButton$handleConfirm$handleCancel.handleButton(e, params, modal);
  };

  for (var btnIndex = 0; btnIndex < $buttons.length; btnIndex++) {
    for (var evtIndex = 0; evtIndex < buttonEvents.length; evtIndex++) {
      var btnEvt = buttonEvents[evtIndex];
      $buttons[btnIndex][btnEvt] = onButtonEvent;
    }
  }

  // Clicking outside the modal dismisses it (if allowed by user)
  _sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition.getOverlay().onclick = onButtonEvent;

  previousWindowKeyDown = window.onkeydown;

  var onKeyEvent = function onKeyEvent(e) {
    return _handleKeyDown2['default'](e, params, modal);
  };
  window.onkeydown = onKeyEvent;

  window.onfocus = function () {
    // When the user has focused away and focused back from the whole window.
    setTimeout(function () {
      // Put in a timeout to jump out of the event sequence.
      // Calling focus() in the event sequence confuses things.
      if (lastFocusedButton !== undefined) {
        lastFocusedButton.focus();
        lastFocusedButton = undefined;
      }
    }, 0);
  };

  // Show alert with enabled buttons always
  swal.enableButtons();
};

/*
 * Set default params for each popup
 * @param {Object} userParams
 */
sweetAlert.setDefaults = swal.setDefaults = function (userParams) {
  if (!userParams) {
    throw new Error('userParams is required');
  }
  if (typeof userParams !== 'object') {
    throw new Error('userParams has to be a object');
  }

  _extend$hexToRgb$isIE8$logStr$colorLuminance.extend(_defaultParams2['default'], userParams);
};

/*
 * Animation when closing modal
 */
sweetAlert.close = swal.close = function () {
  var modal = _sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition.getModal();

  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.fadeOut(_sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition.getOverlay(), 5);
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.fadeOut(modal, 5);
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass(modal, 'showSweetAlert');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.addClass(modal, 'hideSweetAlert');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass(modal, 'visible');

  /*
   * Reset icon animations
   */
  var $successIcon = modal.querySelector('.sa-icon.sa-success');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass($successIcon, 'animate');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass($successIcon.querySelector('.sa-tip'), 'animateSuccessTip');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass($successIcon.querySelector('.sa-long'), 'animateSuccessLong');

  var $errorIcon = modal.querySelector('.sa-icon.sa-error');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass($errorIcon, 'animateErrorIcon');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass($errorIcon.querySelector('.sa-x-mark'), 'animateXMark');

  var $warningIcon = modal.querySelector('.sa-icon.sa-warning');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass($warningIcon, 'pulseWarning');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass($warningIcon.querySelector('.sa-body'), 'pulseWarningIns');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass($warningIcon.querySelector('.sa-dot'), 'pulseWarningIns');

  // Reset custom class (delay so that UI changes aren't visible)
  setTimeout(function () {
    var customClass = modal.getAttribute('data-custom-class');
    _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass(modal, customClass);
  }, 300);

  // Make page scrollable again
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass(document.body, 'stop-scrolling');

  // Reset the page to its previous state
  window.onkeydown = previousWindowKeyDown;
  if (window.previousActiveElement) {
    window.previousActiveElement.focus();
  }
  lastFocusedButton = undefined;
  clearTimeout(modal.timeout);

  return true;
};

/*
 * Validation of the input field is done by user
 * If something is wrong => call showInputError with errorMessage
 */
sweetAlert.showInputError = swal.showInputError = function (errorMessage) {
  var modal = _sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition.getModal();

  var $errorIcon = modal.querySelector('.sa-input-error');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.addClass($errorIcon, 'show');

  var $errorContainer = modal.querySelector('.sa-error-container');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.addClass($errorContainer, 'show');

  $errorContainer.querySelector('p').innerHTML = errorMessage;

  setTimeout(function () {
    sweetAlert.enableButtons();
  }, 1);

  modal.querySelector('input').focus();
};

/*
 * Reset input error DOM elements
 */
sweetAlert.resetInputError = swal.resetInputError = function (event) {
  // If press enter => ignore
  if (event && event.keyCode === 13) {
    return false;
  }

  var $modal = _sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition.getModal();

  var $errorIcon = $modal.querySelector('.sa-input-error');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass($errorIcon, 'show');

  var $errorContainer = $modal.querySelector('.sa-error-container');
  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide$isDescendant$getTopMargin$fadeIn$fadeOut$fireClick$stopEventPropagation.removeClass($errorContainer, 'show');
};

/*
 * Disable confirm and cancel buttons
 */
sweetAlert.disableButtons = swal.disableButtons = function (event) {
  var modal = _sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition.getModal();
  var $confirmButton = modal.querySelector('button.confirm');
  var $cancelButton = modal.querySelector('button.cancel');
  $confirmButton.disabled = true;
  $cancelButton.disabled = true;
};

/*
 * Enable confirm and cancel buttons
 */
sweetAlert.enableButtons = swal.enableButtons = function (event) {
  var modal = _sweetAlertInitialize$getModal$getOverlay$getInput$setFocusStyle$openModal$resetInput$fixVerticalPosition.getModal();
  var $confirmButton = modal.querySelector('button.confirm');
  var $cancelButton = modal.querySelector('button.cancel');
  $confirmButton.disabled = false;
  $cancelButton.disabled = false;
};

if (typeof window !== 'undefined') {
  // The 'handle-click' module requires
  // that 'sweetAlert' was set as global.
  window.sweetAlert = window.swal = sweetAlert;
} else {
  _extend$hexToRgb$isIE8$logStr$colorLuminance.logStr('SweetAlert is a frontend module!');
}
module.exports = exports['default'];
},{"./modules/default-params":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/default-params.js","./modules/handle-click":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-click.js","./modules/handle-dom":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-dom.js","./modules/handle-key":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-key.js","./modules/handle-swal-dom":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/handle-swal-dom.js","./modules/set-params":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/set-params.js","./modules/utils":"/Users/Gavin/Documents/codes/pack/sil/node_modules/sweetalert/lib/modules/utils.js"}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/underscore/underscore.js":[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],"/Users/Gavin/Documents/codes/pack/sil/node_modules/viewerjs/dist/viewer.js":[function(require,module,exports){
/*!
 * Viewer.js v0.5.1
 * https://github.com/fengyuanchen/viewerjs
 *
 * Copyright (c) 2015-2017 Fengyuan Chen
 * Released under the MIT license
 *
 * Date: 2017-01-02T13:01:55.700Z
 */

(function (global, factory) {
  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = global.document ? factory(global, true) : function (window) {
      if (!window.document) {
        throw new Error('Viewer requires a window with a document');
      }

      return factory(window);
    };
  } else {
    factory(global);
  }
})(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {

  'use strict';

  var document = window.document;
  var Event = window.Event;
  var PointerEvent = window.PointerEvent;

  // Constants
  var NAMESPACE = 'viewer';

  // Classes
  var CLASS_FIXED = NAMESPACE + '-fixed';
  var CLASS_OPEN = NAMESPACE + '-open';
  var CLASS_SHOW = NAMESPACE + '-show';
  var CLASS_HIDE = NAMESPACE + '-hide';
  var CLASS_HIDE_XS_DOWN = 'viewer-hide-xs-down';
  var CLASS_HIDE_SM_DOWN = 'viewer-hide-sm-down';
  var CLASS_HIDE_MD_DOWN = 'viewer-hide-md-down';
  var CLASS_FADE = NAMESPACE + '-fade';
  var CLASS_IN = NAMESPACE + '-in';
  var CLASS_MOVE = NAMESPACE + '-move';
  var CLASS_ACTIVE = NAMESPACE + '-active';
  var CLASS_INVISIBLE = NAMESPACE + '-invisible';
  var CLASS_TRANSITION = NAMESPACE + '-transition';
  var CLASS_FULLSCREEN = NAMESPACE + '-fullscreen';
  var CLASS_FULLSCREEN_EXIT = NAMESPACE + '-fullscreen-exit';
  var CLASS_CLOSE = NAMESPACE + '-close';

  // Events
  var EVENT_MOUSEDOWN = PointerEvent ? 'pointerdown' : 'touchstart mousedown';
  var EVENT_MOUSEMOVE = PointerEvent ? 'pointermove' : 'mousemove touchmove';
  var EVENT_MOUSEUP = PointerEvent ? 'pointerup pointercancel' : 'touchend touchcancel mouseup';
  var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';
  var EVENT_TRANSITIONEND = 'transitionend';
  var EVENT_LOAD = 'load';
  var EVENT_KEYDOWN = 'keydown';
  var EVENT_CLICK = 'click';
  var EVENT_RESIZE = 'resize';
  var EVENT_READY = 'ready';
  var EVENT_SHOW = 'show';
  var EVENT_SHOWN = 'shown';
  var EVENT_HIDE = 'hide';
  var EVENT_HIDDEN = 'hidden';
  var EVENT_VIEW = 'view';
  var EVENT_VIEWED = 'viewed';

  // RegExps
  var REGEXP_SUFFIX = /^(width|height|left|top|marginLeft|marginTop)$/;
  var REGEXP_HYPHENATE = /([a-z\d])([A-Z])/g;
  var REGEXP_TRIM = /^\s+(.*)\s+$/;
  var REGEXP_SPACES = /\s+/;

  // Supports
  var SUPPORT_TRANSITION = typeof document.createElement(NAMESPACE).style.transition !== 'undefined';

  // Maths
  var min = Math.min;
  var max = Math.max;
  var abs = Math.abs;
  var sqrt = Math.sqrt;
  var round = Math.round;

  // Utilities
  var objectProto = Object.prototype;
  var toString = objectProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var slice = Array.prototype.slice;

  function typeOf(obj) {
    return toString.call(obj).slice(8, -1).toLowerCase();
  }

  function isString(str) {
    return typeof str === 'string';
  }

  function isNumber(num) {
    return typeof num === 'number' && !isNaN(num);
  }

  function isUndefined(obj) {
    return typeof obj === 'undefined';
  }

  function isObject(obj) {
    return typeof obj === 'object' && obj !== null;
  }

  function isPlainObject(obj) {
    var constructor;
    var prototype;

    if (!isObject(obj)) {
      return false;
    }

    try {
      constructor = obj.constructor;
      prototype = constructor.prototype;

      return constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');
    } catch (e) {
      return false;
    }
  }

  function isFunction(fn) {
    return typeOf(fn) === 'function';
  }

  function isArray(arr) {
    return Array.isArray ? Array.isArray(arr) : typeOf(arr) === 'array';
  }

  function toArray(obj, offset) {
    offset = offset >= 0 ? offset : 0;

    if (Array.from) {
      return Array.from(obj).slice(offset);
    }

    return slice.call(obj, offset);
  }

  function inArray(value, arr) {
    var index = -1;

    if (arr.indexOf) {
      return arr.indexOf(value);
    } else {
      each(arr, function (n, i) {
        if (n === value) {
          index = i;
          return false;
        }
      });
    }

    return index;
  }

  function trim(str) {
    if (isString(str)) {
      str = str.trim ? str.trim() : str.replace(REGEXP_TRIM, '1');
    }

    return str;
  }

  function each(obj, callback) {
    var length;
    var i;

    if (obj && isFunction(callback)) {
      if (isArray(obj) || isNumber(obj.length)/* array-like */) {
        for (i = 0, length = obj.length; i < length; i++) {
          if (callback.call(obj, obj[i], i, obj) === false) {
            break;
          }
        }
      } else if (isObject(obj)) {
        for (i in obj) {
          if (obj.hasOwnProperty(i)) {
            if (callback.call(obj, obj[i], i, obj) === false) {
              break;
            }
          }
        }
      }
    }

    return obj;
  }

  function extend(obj) {
    var args;

    if (arguments.length > 1) {
      args = toArray(arguments);

      if (Object.assign) {
        return Object.assign.apply(Object, args);
      }

      args.shift();

      each(args, function (arg) {
        each(arg, function (prop, i) {
          obj[i] = prop;
        });
      });
    }

    return obj;
  }

  function proxy(fn, context) {
    var args = toArray(arguments, 2);

    return function () {
      return fn.apply(context, args.concat(toArray(arguments)));
    };
  }

  function setStyle(element, styles) {
    var style = element.style;

    each(styles, function (value, property) {
      if (REGEXP_SUFFIX.test(property) && isNumber(value)) {
        value += 'px';
      }

      style[property] = value;
    });
  }

  function getStyle(element) {
    return window.getComputedStyle ?
      window.getComputedStyle(element, null) :
      element.currentStyle;
  }

  function hasClass(element, value) {
    return element.classList ?
      element.classList.contains(value) :
      element.className.indexOf(value) > -1;
  }

  function addClass(element, value) {
    var className;

    if (!value) {
      return;
    }

    if (isNumber(element.length)) {
      return each(element, function (elem) {
        addClass(elem, value);
      });
    }

    if (element.classList) {
      return element.classList.add(value);
    }

    className = trim(element.className);

    if (!className) {
      element.className = value;
    } else if (className.indexOf(value) < 0) {
      element.className = className + ' ' + value;
    }
  }

  function removeClass(element, value) {
    if (!value) {
      return;
    }

    if (isNumber(element.length)) {
      return each(element, function (elem) {
        removeClass(elem, value);
      });
    }

    if (element.classList) {
      return element.classList.remove(value);
    }

    if (element.className.indexOf(value) >= 0) {
      element.className = element.className.replace(value, '');
    }
  }

  function toggleClass(element, value, added) {
    if (isNumber(element.length)) {
      return each(element, function (elem) {
        toggleClass(elem, value, added);
      });
    }

    // IE10-11 doesn't support the second parameter of `classList.toggle`
    if (added) {
      addClass(element, value);
    } else {
      removeClass(element, value);
    }
  }

  function hyphenate(str) {
    return str.replace(REGEXP_HYPHENATE, '$1-$2').toLowerCase();
  }

  function getData(element, name) {
    if (isObject(element[name])) {
      return element[name];
    } else if (element.dataset) {
      return element.dataset[name];
    }

    return element.getAttribute('data-' + hyphenate(name));
  }

  function setData(element, name, data) {
    if (isObject(data)) {
      element[name] = data;
    } else if (element.dataset) {
      element.dataset[name] = data;
    } else {
      element.setAttribute('data-' + hyphenate(name), data);
    }
  }

  function removeData(element, name) {
    if (isObject(element[name])) {
      delete element[name];
    } else if (element.dataset) {
      // Safari not allows to delete dataset property
      try {
        delete element.dataset[name];
      } catch (e) {
        element.dataset[name] = null;
      }
    } else {
      element.removeAttribute('data-' + hyphenate(name));
    }
  }

  function addListener(element, type, handler, once) {
    var types = trim(type).split(REGEXP_SPACES);
    var originalHandler = handler;

    if (types.length > 1) {
      return each(types, function (type) {
        addListener(element, type, handler);
      });
    }

    if (once) {
      handler = function () {
        removeListener(element, type, handler);

        return originalHandler.apply(element, arguments);
      };
    }

    if (element.addEventListener) {
      element.addEventListener(type, handler, false);
    } else if (element.attachEvent) {
      element.attachEvent('on' + type, handler);
    }
  }

  function removeListener(element, type, handler) {
    var types = trim(type).split(REGEXP_SPACES);

    if (types.length > 1) {
      return each(types, function (type) {
        removeListener(element, type, handler);
      });
    }

    if (element.removeEventListener) {
      element.removeEventListener(type, handler, false);
    } else if (element.detachEvent) {
      element.detachEvent('on' + type, handler);
    }
  }

  function dispatchEvent(element, type, data) {
    var event;

    if (element.dispatchEvent) {

      // Event and CustomEvent on IE9-11 are global objects, not constructors
      if (isFunction(Event) && isFunction(CustomEvent)) {
        if (isUndefined(data)) {
          event = new Event(type, {
            bubbles: true,
            cancelable: true
          });
        } else {
          event = new CustomEvent(type, {
            detail: data,
            bubbles: true,
            cancelable: true
          });
        }
      } else {
        // IE9-11
        if (isUndefined(data)) {
          event = document.createEvent('Event');
          event.initEvent(type, true, true);
        } else {
          event = document.createEvent('CustomEvent');
          event.initCustomEvent(type, true, true, data);
        }
      }

      // IE9+
      return element.dispatchEvent(event);
    } else if (element.fireEvent) {

      // IE6-10 (native events only)
      return element.fireEvent('on' + type);
    }
  }

  function preventDefault(e) {
    if (e.preventDefault) {
      e.preventDefault();
    } else {
      e.returnValue = false;
    }
  }

  function getEvent(event) {
    var e = event || window.event;
    var eventDoc;
    var doc;
    var body;

    // Fix target property (IE8)
    if (!e.target) {
      e.target = e.srcElement || document;
    }

    if (!isNumber(e.pageX) && isNumber(e.clientX)) {
      eventDoc = event.target.ownerDocument || document;
      doc = eventDoc.documentElement;
      body = eventDoc.body;

      e.pageX = e.clientX + (
        ((doc && doc.scrollLeft) || (body && body.scrollLeft) || 0) -
        ((doc && doc.clientLeft) || (body && body.clientLeft) || 0)
      );
      e.pageY = e.clientY + (
        ((doc && doc.scrollTop) || (body && body.scrollTop) || 0) -
        ((doc && doc.clientTop) || (body && body.clientTop) || 0)
      );
    }

    return e;
  }

  function getOffset(element) {
    var doc = document.documentElement;
    var box = element.getBoundingClientRect();

    return {
      left: box.left + (window.scrollX || doc && doc.scrollLeft || 0) - (doc && doc.clientLeft || 0),
      top: box.top + (window.scrollY || doc && doc.scrollTop || 0) - (doc && doc.clientTop || 0)
    };
  }

  function getByTag(element, tagName) {
    return element.getElementsByTagName(tagName);
  }

  function getByClass(element, className) {
    return element.getElementsByClassName ?
      element.getElementsByClassName(className) :
      element.querySelectorAll('.' + className);
  }

  function appendChild(element, elem) {
    if (elem.length) {
      return each(elem, function (el) {
        appendChild(element, el);
      });
    }

    element.appendChild(elem);
  }

  function removeChild(element) {
    if (element.parentNode) {
      element.parentNode.removeChild(element);
    }
  }

  function empty(element) {
    while (element.firstChild) {
      element.removeChild(element.firstChild);
    }
  }

  function setText(element, text) {
    if (!isUndefined(element.textContent)) {
      element.textContent = text;
    } else {
      element.innerText = text;
    }
  }

  // Force reflow to enable CSS3 transition
  function forceReflow(element) {
    return element.offsetWidth;
  }

  // e.g.: http://domain.com/path/to/picture.jpg?size=1280×960 -> picture.jpg
  function getImageName(url) {
    return isString(url) ? url.replace(/^.*\//, '').replace(/[\?&#].*$/, '') : '';
  }

  function getImageSize(image, callback) {
    var newImage;

    // Modern browsers
    if (image.naturalWidth) {
      return callback(image.naturalWidth, image.naturalHeight);
    }

    // IE8: Don't use `new Image()` here
    newImage = document.createElement('img');

    newImage.onload = function () {
      callback(this.width, this.height);
    };

    newImage.src = image.src;
  }

  function getTransform(data) {
    var transforms = [];
    var rotate = data.rotate;
    var scaleX = data.scaleX;
    var scaleY = data.scaleY;

    // Rotate should come first before scale
    if (isNumber(rotate)) {
      transforms.push('rotate(' + rotate + 'deg)');
    }

    if (isNumber(scaleX)) {
      transforms.push('scaleX(' + scaleX + ')');
    }

    if (isNumber(scaleY)) {
      transforms.push('scaleY(' + scaleY + ')');
    }

    return transforms.length ? transforms.join(' ') : 'none';
  }

  function getResponsiveClass(option) {
    switch (option) {
      case 2:
        return CLASS_HIDE_XS_DOWN;

      case 3:
        return CLASS_HIDE_SM_DOWN;

      case 4:
        return CLASS_HIDE_MD_DOWN;
    }
  }

  function getPointer(pointer, endOnly) {
    var end = {
      endX: pointer.pageX,
      endY: pointer.pageY
    };

    if (endOnly) {
      return end;
    }

    return extend({
      startX: pointer.pageX,
      startY: pointer.pageY
    }, end);
  }

  function getMaxZoomRatio(pointers) {
    var pointers2 = extend({}, pointers);
    var ratios = [];

    each(pointers, function (pointer, pointerId) {
      delete pointers2[pointerId];

      each(pointers2, function (pointer2) {
        var x1 = Math.abs(pointer.startX - pointer2.startX);
        var y1 = Math.abs(pointer.startY - pointer2.startY);
        var x2 = Math.abs(pointer.endX - pointer2.endX);
        var y2 = Math.abs(pointer.endY - pointer2.endY);
        var z1 = Math.sqrt((x1 * x1) + (y1 * y1));
        var z2 = Math.sqrt((x2 * x2) + (y2 * y2));
        var ratio = (z2 - z1) / z1;

        ratios.push(ratio);
      });
    });

    ratios.sort(function (a, b) {
      return Math.abs(a) < Math.abs(b);
    });

    return ratios[0];
  }

  function getPointersCenter(pointers) {
    var pageX = 0;
    var pageY = 0;
    var count = 0;

    each(pointers, function (pointer) {
      pageX += pointer.startX;
      pageY += pointer.startY;
      count += 1;
    });

    pageX /= count;
    pageY /= count;

    return {
      pageX: pageX,
      pageY: pageY
    };
  }

  function Viewer(element, options) {
    var _this = this;

    _this.element = element;
    _this.options = extend({}, Viewer.DEFAULTS, isPlainObject(options) && options);
    _this.isImg = false;
    _this.isBuilt = false;
    _this.isShown = false;
    _this.isViewed = false;
    _this.isFulled = false;
    _this.isPlayed = false;
    _this.wheeling = false;
    _this.playing = false;
    _this.fading = false;
    _this.tooltiping = false;
    _this.transitioning = false;
    _this.action = false;
    _this.target = false;
    _this.timeout = false;
    _this.index = 0;
    _this.length = 0;
    _this.pointers = {};
    _this.init();
  }

  Viewer.prototype = {
    constructor: Viewer,

    init: function () {
      var _this = this;
      var options = _this.options;
      var element = _this.element;
      var isImg = element.tagName.toLowerCase() === 'img';
      var images = isImg ? [element] : getByTag(element, 'img');
      var length = images.length;
      var ready = proxy(_this.ready, _this);

      if (getData(element, NAMESPACE)) {
        return;
      }

      setData(element, NAMESPACE, _this);

      if (!length) {
        return;
      }

      if (isFunction(options.ready)) {
        addListener(element, EVENT_READY, options.ready, true);
      }

      // Override `transition` option if it is not supported
      if (!SUPPORT_TRANSITION) {
        options.transition = false;
      }

      _this.isImg = isImg;
      _this.length = length;
      _this.count = 0;
      _this.images = images;
      _this.body = document.body;
      _this.scrollbarWidth = window.innerWidth - document.body.clientWidth;

      if (options.inline) {
        addListener(element, EVENT_READY, function () {
          _this.view();
        }, true);

        each(images, function (image) {
          if (image.complete) {
            ready();
          } else {
            addListener(image, EVENT_LOAD, ready, true);
          }
        });
      } else {
        addListener(element, EVENT_CLICK, (_this._start = proxy(_this.start, _this)));
      }
    },

    ready: function () {
      var _this = this;

      _this.count++;

      if (_this.count === _this.length) {
        _this.build();
      }
    },

    build: function () {
      var _this = this;
      var options = _this.options;
      var element = _this.element;
      var template;
      var parent;
      var viewer;
      var button;
      var toolbar;
      var navbar;
      var title;
      var rotate;

      if (_this.isBuilt) {
        return;
      }

      template = document.createElement('div');
      template.innerHTML = Viewer.TEMPLATE;

      _this.parent = parent = element.parentNode;
      _this.viewer = viewer = getByClass(template, 'viewer-container')[0];
      _this.canvas = getByClass(viewer, 'viewer-canvas')[0];
      _this.footer = getByClass(viewer, 'viewer-footer')[0];
      _this.title = title = getByClass(viewer, 'viewer-title')[0];
      _this.toolbar = toolbar = getByClass(viewer, 'viewer-toolbar')[0];
      _this.navbar = navbar = getByClass(viewer, 'viewer-navbar')[0];
      _this.button = button = getByClass(viewer, 'viewer-button')[0];
      _this.tooltipBox = getByClass(viewer, 'viewer-tooltip')[0];
      _this.player = getByClass(viewer, 'viewer-player')[0];
      _this.list = getByClass(viewer, 'viewer-list')[0];

      addClass(title, !options.title ? CLASS_HIDE : getResponsiveClass(options.title));
      addClass(toolbar, !options.toolbar ? CLASS_HIDE : getResponsiveClass(options.toolbar));
      addClass(navbar, !options.navbar ? CLASS_HIDE : getResponsiveClass(options.navbar));
      toggleClass(button, CLASS_HIDE, !options.button);

      toggleClass(toolbar.querySelector('.viewer-one-to-one'), CLASS_INVISIBLE, !options.zoomable);
      toggleClass(toolbar.querySelectorAll('li[class*="zoom"]'), CLASS_INVISIBLE, !options.zoomable);
      toggleClass(toolbar.querySelectorAll('li[class*="flip"]'), CLASS_INVISIBLE, !options.scalable);

      if (!options.rotatable) {
        rotate = toolbar.querySelectorAll('li[class*="rotate"]');
        addClass(rotate, CLASS_INVISIBLE);
        appendChild(toolbar, rotate);
      }

      if (options.inline) {
        addClass(button, CLASS_FULLSCREEN);
        setStyle(viewer, {
          zIndex: options.zIndexInline
        });

        if (getStyle(parent).position === 'static') {
          setStyle(parent, {
            position: 'relative'
          });
        }
      } else {
        addClass(button, CLASS_CLOSE);
        addClass(viewer, CLASS_FIXED);
        addClass(viewer, CLASS_FADE);
        addClass(viewer, CLASS_HIDE);

        setStyle(viewer, {
          zIndex: options.zIndex
        });
      }

      // Inserts the viewer after to the current element
      parent.insertBefore(viewer, element.nextSibling);

      if (options.inline) {
        _this.render();
        _this.bind();
        _this.isShown = true;
      }

      _this.isBuilt = true;

      dispatchEvent(element, EVENT_READY);
    },

    unbuild: function () {
      var _this = this;

      if (!_this.isBuilt) {
        return;
      }

      _this.isBuilt = false;
      removeChild(_this.viewer);
    },

    bind: function () {
      var _this = this;
      var options = _this.options;
      var element = _this.element;
      var viewer = _this.viewer;

      if (isFunction(options.view)) {
        addListener(element, EVENT_VIEW, options.view);
      }

      if (isFunction(options.viewed)) {
        addListener(element, EVENT_VIEWED, options.viewed);
      }

      addListener(viewer, EVENT_CLICK, (_this._click = proxy(_this.click, _this)));
      addListener(viewer, EVENT_WHEEL, (_this._wheel = proxy(_this.wheel, _this)));
      addListener(_this.canvas, EVENT_MOUSEDOWN, (_this._mousedown = proxy(_this.mousedown, _this)));
      addListener(document, EVENT_MOUSEMOVE, (_this._mousemove = proxy(_this.mousemove, _this)));
      addListener(document, EVENT_MOUSEUP, (_this._mouseup = proxy(_this.mouseup, _this)));
      addListener(document, EVENT_KEYDOWN, (_this._keydown = proxy(_this.keydown, _this)));
      addListener(window, EVENT_RESIZE, (_this._resize = proxy(_this.resize, _this)));
    },

    unbind: function () {
      var _this = this;
      var options = _this.options;
      var element = _this.element;
      var viewer = _this.viewer;

      if (isFunction(options.view)) {
        removeListener(element, EVENT_VIEW, options.view);
      }

      if (isFunction(options.viewed)) {
        removeListener(element, EVENT_VIEWED, options.viewed);
      }

      removeListener(viewer, EVENT_CLICK, _this._click);
      removeListener(viewer, EVENT_WHEEL, _this._wheel);
      removeListener(_this.canvas, EVENT_MOUSEDOWN, _this._mousedown);
      removeListener(document, EVENT_MOUSEMOVE, _this._mousemove);
      removeListener(document, EVENT_MOUSEUP, _this._mouseup);
      removeListener(document, EVENT_KEYDOWN, _this._keydown);
      removeListener(window, EVENT_RESIZE, _this._resize);
    },

    render: function () {
      var _this = this;

      _this.initContainer();
      _this.initViewer();
      _this.initList();
      _this.renderViewer();
    },

    initContainer: function () {
      var _this = this;

      _this.containerData = {
        width: window.innerWidth,
        height: window.innerHeight
      };
    },

    initViewer: function () {
      var _this = this;
      var options = _this.options;
      var parent = _this.parent;
      var viewerData;

      if (options.inline) {
        _this.parentData = viewerData = {
          width: max(parent.offsetWidth, options.minWidth),
          height: max(parent.offsetHeight, options.minHeight)
        };
      }

      if (_this.isFulled || !viewerData) {
        viewerData = _this.containerData;
      }

      _this.viewerData = extend({}, viewerData);
    },

    renderViewer: function () {
      var _this = this;

      if (_this.options.inline && !_this.isFulled) {
        setStyle(_this.viewer, _this.viewerData);
      }
    },

    initList: function () {
      var _this = this;
      var options = _this.options;
      var element = _this.element;
      var list = _this.list;
      var items = [];

      each(_this.images, function (image, i) {
        var src = image.src;
        var alt = image.alt || getImageName(src);
        var url = options.url;

        if (!src) {
          return;
        }

        if (isString(url)) {
          url = image.getAttribute(url);
        } else if (isFunction(url)) {
          url = url.call(image, image);
        }

        items.push(
          '<li>' +
            '<img' +
              ' src="' + src + '"' +
              ' data-action="view"' +
              ' data-index="' +  i + '"' +
              ' data-original-url="' +  (url || src) + '"' +
              ' alt="' +  alt + '"' +
            '>' +
          '</li>'
        );
      });

      list.innerHTML = items.join('');

      each(getByTag(list, 'img'), function (image) {
        setData(image, 'filled', true);
        addListener(image, EVENT_LOAD, proxy(_this.loadImage, _this), true);
      });

      _this.items = getByTag(list, 'li');

      if (options.transition) {
        addListener(element, EVENT_VIEWED, function () {
          addClass(list, CLASS_TRANSITION);
        }, true);
      }
    },

    renderList: function (index) {
      var _this = this;
      var i = index || _this.index;
      var width = _this.items[i].offsetWidth || 30;
      var outerWidth = width + 1; // 1 pixel of `margin-left` width

      // Place the active item in the center of the screen
      setStyle(_this.list, {
        width: outerWidth * _this.length,
        marginLeft: (_this.viewerData.width - width) / 2 - outerWidth * i
      });
    },

    resetList: function () {
      var _this = this;

      empty(_this.list);
      removeClass(_this.list, CLASS_TRANSITION);
      setStyle({
        marginLeft: 0
      });
    },

    initImage: function (callback) {
      var _this = this;
      var options = _this.options;
      var image = _this.image;
      var viewerData = _this.viewerData;
      var footerHeight = _this.footer.offsetHeight;
      var viewerWidth = viewerData.width;
      var viewerHeight = max(viewerData.height - footerHeight, footerHeight);
      var oldImageData = _this.imageData || {};

      getImageSize(image, function (naturalWidth, naturalHeight) {
        var aspectRatio = naturalWidth / naturalHeight;
        var width = viewerWidth;
        var height = viewerHeight;
        var initialImageData;
        var imageData;

        if (viewerHeight * aspectRatio > viewerWidth) {
          height = viewerWidth / aspectRatio;
        } else {
          width = viewerHeight * aspectRatio;
        }

        width = min(width * 0.9, naturalWidth);
        height = min(height * 0.9, naturalHeight);

        imageData = {
          naturalWidth: naturalWidth,
          naturalHeight: naturalHeight,
          aspectRatio: aspectRatio,
          ratio: width / naturalWidth,
          width: width,
          height: height,
          left: (viewerWidth - width) / 2,
          top: (viewerHeight - height) / 2
        };

        initialImageData = extend({}, imageData);

        if (options.rotatable) {
          imageData.rotate = oldImageData.rotate || 0;
          initialImageData.rotate = 0;
        }

        if (options.scalable) {
          imageData.scaleX = oldImageData.scaleX || 1;
          imageData.scaleY = oldImageData.scaleY || 1;
          initialImageData.scaleX = 1;
          initialImageData.scaleY = 1;
        }

        _this.imageData = imageData;
        _this.initialImageData = initialImageData;

        if (isFunction(callback)) {
          callback();
        }
      });
    },

    renderImage: function (callback) {
      var _this = this;
      var image = _this.image;
      var imageData = _this.imageData;
      var transform = getTransform(imageData);

      setStyle(image, {
        width: imageData.width,
        height: imageData.height,
        marginLeft: imageData.left,
        marginTop: imageData.top,
        WebkitTransform: transform,
        msTransform: transform,
        transform: transform
      });

      if (isFunction(callback)) {
        if (_this.transitioning) {
          addListener(image, EVENT_TRANSITIONEND, callback, true);
        } else {
          callback();
        }
      }
    },

    resetImage: function () {
      var _this = this;

      // this.image only defined after viewed
      if (_this.image) {
        removeChild(_this.image);
        _this.image = null;
      }
    },

    start: function (event) {
      var _this = this;
      var e = getEvent(event);
      var target = e.target;

      if (target.tagName.toLowerCase() === 'img') {
        _this.target = target;
        _this.show();
      }
    },

    click: function (event) {
      var _this = this;
      var e = getEvent(event);
      var target = e.target;
      var action = getData(target, 'action');
      var imageData = _this.imageData;

      switch (action) {
        case 'mix':
          if (_this.isPlayed) {
            _this.stop();
          } else {
            if (_this.options.inline) {
              if (_this.isFulled) {
                _this.exit();
              } else {
                _this.full();
              }
            } else {
              _this.hide();
            }
          }

          break;

        case 'view':
          _this.view(getData(target, 'index'));
          break;

        case 'zoom-in':
          _this.zoom(0.1, true);
          break;

        case 'zoom-out':
          _this.zoom(-0.1, true);
          break;

        case 'one-to-one':
          _this.toggle();
          break;

        case 'reset':
          _this.reset();
          break;

        case 'prev':
          _this.prev();
          break;

        case 'play':
          _this.play();
          break;

        case 'next':
          _this.next();
          break;

        case 'rotate-left':
          _this.rotate(-90);
          break;

        case 'rotate-right':
          _this.rotate(90);
          break;

        case 'flip-horizontal':
          _this.scaleX(-imageData.scaleX || -1);
          break;

        case 'flip-vertical':
          _this.scaleY(-imageData.scaleY || -1);
          break;

        default:
          if (_this.isPlayed) {
            _this.stop();
          }
      }
    },

    load: function () {
      var _this = this;
      var options = _this.options;
      var image = _this.image;
      var index = _this.index;
      var viewerData = _this.viewerData;

      if (_this.timeout) {
        clearTimeout(_this.timeout);
        _this.timeout = false;
      }

      removeClass(image, CLASS_INVISIBLE);

      image.style.cssText = (
        'width:0;' +
        'height:0;' +
        'margin-left:' + viewerData.width / 2 + 'px;' +
        'margin-top:' + viewerData.height / 2 + 'px;' +
        'max-width:none!important;' +
        'visibility:visible;'
      );

      _this.initImage(function () {
        toggleClass(image, CLASS_TRANSITION, options.transition);
        toggleClass(image, CLASS_MOVE, options.movable);

        _this.renderImage(function () {
          _this.isViewed = true;
          dispatchEvent(_this.element, EVENT_VIEWED, {
            originalImage: _this.images[index],
            index: index,
            image: image
          });
        });
      });
    },

    loadImage: function (event) {
      var e = getEvent(event);
      var image = e.target;
      var parent = image.parentNode;
      var parentWidth = parent.offsetWidth || 30;
      var parentHeight = parent.offsetHeight || 50;
      var filled = !!getData(image, 'filled');

      getImageSize(image, function (naturalWidth, naturalHeight) {
        var aspectRatio = naturalWidth / naturalHeight;
        var width = parentWidth;
        var height = parentHeight;

        if (parentHeight * aspectRatio > parentWidth) {
          if (filled) {
            width = parentHeight * aspectRatio;
          } else {
            height = parentWidth / aspectRatio;
          }
        } else {
          if (filled) {
            height = parentWidth / aspectRatio;
          } else {
            width = parentHeight * aspectRatio;
          }
        }

        setStyle(image, {
          width: width,
          height: height,
          marginLeft: (parentWidth - width) / 2,
          marginTop: (parentHeight - height) / 2
        });
      });
    },

    resize: function () {
      var _this = this;

      _this.initContainer();
      _this.initViewer();
      _this.renderViewer();
      _this.renderList();

      if (_this.isViewed) {
        _this.initImage(function () {
          _this.renderImage();
        });
      }

      if (_this.isPlayed) {
        each(getByTag(_this.player, 'img'), function (image) {
          addListener(image, EVENT_LOAD, proxy(_this.loadImage, _this), true);
          dispatchEvent(image, EVENT_LOAD);
        });
      }
    },

    wheel: function (event) {
      var _this = this;
      var e = getEvent(event);
      var ratio = Number(_this.options.zoomRatio) || 0.1;
      var delta = 1;

      if (!_this.isViewed) {
        return;
      }

      preventDefault(e);

      // Limit wheel speed to prevent zoom too fast
      if (_this.wheeling) {
        return;
      }

      _this.wheeling = true;

      setTimeout(function () {
        _this.wheeling = false;
      }, 50);

      if (e.deltaY) {
        delta = e.deltaY > 0 ? 1 : -1;
      } else if (e.wheelDelta) {
        delta = -e.wheelDelta / 120;
      } else if (e.detail) {
        delta = e.detail > 0 ? 1 : -1;
      }

      _this.zoom(-delta * ratio, true, e);
    },

    keydown: function (event) {
      var _this = this;
      var e = getEvent(event);
      var options = _this.options;
      var key = e.keyCode || e.which || e.charCode;

      if (!_this.isFulled || !options.keyboard) {
        return;
      }

      switch (key) {

        // (Key: Esc)
        case 27:
          if (_this.isPlayed) {
            _this.stop();
          } else {
            if (options.inline) {
              if (_this.isFulled) {
                _this.exit();
              }
            } else {
              _this.hide();
            }
          }

          break;

        // (Key: Space)
        case 32:
          if (_this.isPlayed) {
            _this.stop();
          }

          break;

        // View previous (Key: ←)
        case 37:
          _this.prev();
          break;

        // Zoom in (Key: ↑)
        case 38:

          // Prevent scroll on Firefox
          preventDefault(e);

          _this.zoom(options.zoomRatio, true);
          break;

        // View next (Key: →)
        case 39:
          _this.next();
          break;

        // Zoom out (Key: ↓)
        case 40:

          // Prevent scroll on Firefox
          preventDefault(e);

          _this.zoom(-options.zoomRatio, true);
          break;

        // Zoom out to initial size (Key: Ctrl + 0)
        case 48:
          // Go to next

        // Zoom in to natural size (Key: Ctrl + 1)
        case 49:
          if (e.ctrlKey || e.shiftKey) {
            preventDefault(e);
            _this.toggle();
          }

          break;

        // No default
      }
    },

    mousedown: function (event) {
      var _this = this;
      var options = _this.options;
      var pointers = _this.pointers;
      var e = getEvent(event);
      var action = options.movable ? 'move' : false;

      if (!_this.isViewed) {
        return;
      }

      if (e.changedTouches) {
        each(e.changedTouches, function (touch) {
          pointers[touch.identifier] = getPointer(touch);
        });
      } else {
        pointers[e.pointerId || 0] = getPointer(e);
      }

      if (Object.keys(pointers).length > 1) {
        action = 'zoom';
      } else if ((e.pointerType === 'touch' || e.type === 'touchmove') && _this.isSwitchable()) {
        action = 'switch';
      }

      _this.action = action;
    },

    mousemove: function (event) {
      var _this = this;
      var options = _this.options;
      var pointers = _this.pointers;
      var e = getEvent(event);
      var action = _this.action;
      var image = _this.image;

      if (!_this.isViewed || !action) {
        return;
      }

      preventDefault(e);

      if (e.changedTouches) {
        each(e.changedTouches, function (touch) {
          extend(pointers[touch.identifier], getPointer(touch), true);
        });
      } else {
        extend(pointers[e.pointerId || 0], getPointer(e, true));
      }

      if (action === 'move' && options.transition && hasClass(image, CLASS_TRANSITION)) {
        removeClass(image, CLASS_TRANSITION);
      }

      _this.change(e);
    },

    mouseup: function (event) {
      var _this = this;
      var pointers = _this.pointers;
      var e = getEvent(event);
      var action = _this.action;

      if (!action) {
        return;
      }

      if (e.changedTouches) {
        each(e.changedTouches, function (touch) {
          delete pointers[touch.identifier];
        });
      } else {
        delete pointers[e.pointerId || 0];
      }

      if (!Object.keys(pointers).length) {
        if (action === 'move' && _this.options.transition) {
          addClass(_this.image, CLASS_TRANSITION);
        }

        _this.action = false;
      }
    },

    // Show the viewer (only available in modal mode)
    show: function () {
      var _this = this;
      var options = _this.options;
      var element = _this.element;
      var viewer;

      if (options.inline || _this.transitioning) {
        return _this;
      }

      if (!_this.isBuilt) {
        _this.build();
      }

      viewer = _this.viewer;

      if (isFunction(options.show)) {
        addListener(element, EVENT_SHOW, options.show, true);
      }

      if (dispatchEvent(element, EVENT_SHOW) === false) {
        return _this;
      }

      _this.open();
      removeClass(viewer, CLASS_HIDE);

      addListener(element, EVENT_SHOWN, function () {
        _this.view(_this.target ? inArray(_this.target, toArray(_this.images)) : _this.index);
        _this.target = false;
      }, true);

      if (options.transition) {
        _this.transitioning = true;
        addClass(viewer, CLASS_TRANSITION);
        forceReflow(viewer);
        addListener(viewer, EVENT_TRANSITIONEND, proxy(_this.shown, _this), true);
        addClass(viewer, CLASS_IN);
      } else {
        addClass(viewer, CLASS_IN);
        _this.shown();
      }

      return _this;
    },

    // Hide the viewer (only available in modal mode)
    hide: function () {
      var _this = this;
      var options = _this.options;
      var element = _this.element;
      var viewer = _this.viewer;

      if (options.inline || _this.transitioning || !_this.isShown) {
        return _this;
      }

      if (isFunction(options.hide)) {
        addListener(element, EVENT_HIDE, options.hide, true);
      }

      if (dispatchEvent(element, EVENT_HIDE) === false) {
        return _this;
      }

      if (_this.isViewed && options.transition) {
        _this.transitioning = true;
        addListener(_this.image, EVENT_TRANSITIONEND, function () {
          addListener(viewer, EVENT_TRANSITIONEND, proxy(_this.hidden, _this), true);
          removeClass(viewer, CLASS_IN);
        }, true);
        _this.zoomTo(0, false, false, true);
      } else {
        removeClass(viewer, CLASS_IN);
        _this.hidden();
      }

      return _this;
    },

    /**
     * View one of the images with image's index
     *
     * @param {Number} index
     */
    view: function (index) {
      var _this = this;
      var element = _this.element;
      var title = _this.title;
      var canvas = _this.canvas;
      var image;
      var item;
      var img;
      var url;
      var alt;

      index = Number(index) || 0;

      if (!_this.isShown || _this.isPlayed || index < 0 || index >= _this.length ||
        _this.isViewed && index === _this.index) {
        return _this;
      }

      item = _this.items[index];
      img = getByTag(item, 'img')[0];
      url = getData(img, 'originalUrl');
      alt = img.getAttribute('alt');

      image = document.createElement('img');
      image.src = url;
      image.alt = alt;

      if (dispatchEvent(element, EVENT_VIEW, {
        originalImage: _this.images[index],
        index: index,
        image: image
      }) === false) {
        return _this;
      }

      _this.image = image;

      if (_this.isViewed) {
        removeClass(_this.items[_this.index], CLASS_ACTIVE);
      }

      addClass(item, CLASS_ACTIVE);

      _this.isViewed = false;
      _this.index = index;
      _this.imageData = null;

      addClass(image, CLASS_INVISIBLE);
      empty(canvas);
      appendChild(canvas, image);

      // Center current item
      _this.renderList();

      // Clear title
      empty(title);

      // Generate title after viewed
      addListener(element, EVENT_VIEWED, function () {
        var imageData = _this.imageData;
        var width = imageData.naturalWidth;
        var height = imageData.naturalHeight;

        setText(title, alt + ' (' + width + ' × ' + height + ')');
      }, true);

      if (image.complete) {
        _this.load();
      } else {
        addListener(image, EVENT_LOAD, proxy(_this.load, _this), true);

        if (_this.timeout) {
          clearTimeout(_this.timeout);
        }

        // Make the image visible if it fails to load within 1s
        _this.timeout = setTimeout(function () {
          removeClass(image, CLASS_INVISIBLE);
          _this.timeout = false;
        }, 1000);
      }

      return _this;
    },

    // View the previous image
    prev: function () {
      var _this = this;

      _this.view(max(_this.index - 1, 0));

      return _this;
    },

    // View the next image
    next: function () {
      var _this = this;

      _this.view(min(_this.index + 1, _this.length - 1));

      return _this;
    },

    /**
     * Move the image with relative offsets
     *
     * @param {Number} offsetX
     * @param {Number} offsetY (optional)
     */
    move: function (offsetX, offsetY) {
      var _this = this;
      var imageData = _this.imageData;

      _this.moveTo(
        isUndefined(offsetX) ? offsetX : imageData.left + Number(offsetX),
        isUndefined(offsetY) ? offsetY : imageData.top + Number(offsetY)
      );

      return _this;
    },

    /**
     * Move the image to an absolute point
     *
     * @param {Number} x
     * @param {Number} y (optional)
     */
    moveTo: function (x, y) {
      var _this = this;
      var imageData = _this.imageData;
      var changed = false;

      // If "y" is not present, its default value is "x"
      if (isUndefined(y)) {
        y = x;
      }

      x = Number(x);
      y = Number(y);

      if (_this.isViewed && !_this.isPlayed && _this.options.movable) {
        if (isNumber(x)) {
          imageData.left = x;
          changed = true;
        }

        if (isNumber(y)) {
          imageData.top = y;
          changed = true;
        }

        if (changed) {
          _this.renderImage();
        }
      }

      return _this;
    },

    /**
     * Zoom the image with a relative ratio
     *
     * @param {Number} ratio
     * @param {Boolean} hasTooltip (optional)
     * @param {Event} _originalEvent (private)
     */
    zoom: function (ratio, hasTooltip, _originalEvent) {
      var _this = this;
      var imageData = _this.imageData;

      ratio = Number(ratio);

      if (ratio < 0) {
        ratio =  1 / (1 - ratio);
      } else {
        ratio = 1 + ratio;
      }

      _this.zoomTo(imageData.width * ratio / imageData.naturalWidth, hasTooltip, _originalEvent);

      return _this;
    },

    /**
     * Zoom the image to an absolute ratio
     *
     * @param {Number} ratio
     * @param {Boolean} hasTooltip (optional)
     * @param {Event} _originalEvent (private)
     * @param {Boolean} _zoomable (private)
     */
    zoomTo: function (ratio, hasTooltip, _originalEvent, _zoomable) {
      var _this = this;
      var options = _this.options;
      var pointers = _this.pointers;
      var minZoomRatio = 0.01;
      var maxZoomRatio = 100;
      var imageData = _this.imageData;
      var newWidth;
      var newHeight;
      var offset;
      var center;

      ratio = max(0, ratio);

      if (isNumber(ratio) && _this.isViewed && !_this.isPlayed && (_zoomable || options.zoomable)) {
        if (!_zoomable) {
          minZoomRatio = max(minZoomRatio, options.minZoomRatio);
          maxZoomRatio = min(maxZoomRatio, options.maxZoomRatio);
          ratio = min(max(ratio, minZoomRatio), maxZoomRatio);
        }

        if (ratio > 0.95 && ratio < 1.05) {
          ratio = 1;
        }

        newWidth = imageData.naturalWidth * ratio;
        newHeight = imageData.naturalHeight * ratio;

        if (_originalEvent) {
          offset = getOffset(_this.viewer);
          center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {
            pageX: _originalEvent.pageX,
            pageY: _originalEvent.pageY
          };

          // Zoom from the triggering point of the event
          imageData.left -= (newWidth - imageData.width) * (
            ((center.pageX - offset.left) - imageData.left) / imageData.width
          );
          imageData.top -= (newHeight - imageData.height) * (
            ((center.pageY - offset.top) - imageData.top) / imageData.height
          );
        } else {

          // Zoom from the center of the image
          imageData.left -= (newWidth - imageData.width) / 2;
          imageData.top -= (newHeight - imageData.height) / 2;
        }

        imageData.width = newWidth;
        imageData.height = newHeight;
        imageData.ratio = ratio;
        _this.renderImage();

        if (hasTooltip) {
          _this.tooltip();
        }
      }

      return _this;
    },

    /**
     * Rotate the image with a relative degree
     *
     * @param {Number} degree
     */
    rotate: function (degree) {
      var _this = this;

      _this.rotateTo((_this.imageData.rotate || 0) + Number(degree));

      return _this;
    },

    /**
     * Rotate the image to an absolute degree
     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()
     *
     * @param {Number} degree
     */
    rotateTo: function (degree) {
      var _this = this;
      var imageData = _this.imageData;

      degree = Number(degree);

      if (isNumber(degree) && _this.isViewed && !_this.isPlayed && _this.options.rotatable) {
        imageData.rotate = degree;
        _this.renderImage();
      }

      return _this;
    },

    /**
     * Scale the image
     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()
     *
     * @param {Number} scaleX
     * @param {Number} scaleY (optional)
     */
    scale: function (scaleX, scaleY) {
      var _this = this;
      var imageData = _this.imageData;
      var changed = false;

      // If "scaleY" is not present, its default value is "scaleX"
      if (isUndefined(scaleY)) {
        scaleY = scaleX;
      }

      scaleX = Number(scaleX);
      scaleY = Number(scaleY);

      if (_this.isViewed && !_this.isPlayed && _this.options.scalable) {
        if (isNumber(scaleX)) {
          imageData.scaleX = scaleX;
          changed = true;
        }

        if (isNumber(scaleY)) {
          imageData.scaleY = scaleY;
          changed = true;
        }

        if (changed) {
          _this.renderImage();
        }
      }

      return _this;
    },

    /**
     * Scale the abscissa of the image
     *
     * @param {Number} scaleX
     */
    scaleX: function (scaleX) {
      var _this = this;

      _this.scale(scaleX, _this.imageData.scaleY);

      return _this;
    },

    /**
     * Scale the ordinate of the image
     *
     * @param {Number} scaleY
     */
    scaleY: function (scaleY) {
      var _this = this;

      _this.scale(_this.imageData.scaleX, scaleY);

      return _this;
    },

    // Play the images
    play: function () {
      var _this = this;
      var options = _this.options;
      var player = _this.player;
      var load = proxy(_this.loadImage, _this);
      var list = [];
      var total = 0;
      var index = 0;
      var playing;

      if (!_this.isShown || _this.isPlayed) {
        return _this;
      }

      if (options.fullscreen) {
        _this.requestFullscreen();
      }

      _this.isPlayed = true;
      addClass(player, CLASS_SHOW);

      each(_this.items, function (item, i) {
        var img = getByTag(item, 'img')[0];
        var image = document.createElement('img');

        image.src = getData(img, 'originalUrl');
        image.alt = img.getAttribute('alt');
        total++;

        addClass(image, CLASS_FADE);
        toggleClass(image, CLASS_TRANSITION, options.transition);

        if (hasClass(item, CLASS_ACTIVE)) {
          addClass(image, CLASS_IN);
          index = i;
        }

        list.push(image);
        addListener(image, EVENT_LOAD, load, true);
        appendChild(player, image);
      });

      if (isNumber(options.interval) && options.interval > 0) {
        playing = function () {
          _this.playing = setTimeout(function () {
            removeClass(list[index], CLASS_IN);
            index++;
            index = index < total ? index : 0;
            addClass(list[index], CLASS_IN);

            playing();
          }, options.interval);
        };

        if (total > 1) {
          playing();
        }
      }

      return _this;
    },

    // Stop play
    stop: function () {
      var _this = this;
      var player = _this.player;

      if (!_this.isPlayed) {
        return _this;
      }

      if (_this.options.fullscreen) {
        _this.exitFullscreen();
      }

      _this.isPlayed = false;
      clearTimeout(_this.playing);
      removeClass(player, CLASS_SHOW);
      empty(player);

      return _this;
    },

    // Enter modal mode (only available in inline mode)
    full: function () {
      var _this = this;
      var options = _this.options;
      var viewer = _this.viewer;
      var image = _this.image;
      var list = _this.list;

      if (!_this.isShown || _this.isPlayed || _this.isFulled || !options.inline) {
        return _this;
      }

      _this.isFulled = true;
      _this.open();
      addClass(_this.button, CLASS_FULLSCREEN_EXIT);

      if (options.transition) {
        removeClass(image, CLASS_TRANSITION);
        removeClass(list, CLASS_TRANSITION);
      }

      addClass(viewer, CLASS_FIXED);
      viewer.setAttribute('style', '');
      setStyle(viewer, {
        zIndex: options.zIndex
      });

      _this.initContainer();
      _this.viewerData = extend({}, _this.containerData);
      _this.renderList();
      _this.initImage(function () {
        _this.renderImage(function () {
          if (options.transition) {
            setTimeout(function () {
              addClass(image, CLASS_TRANSITION);
              addClass(list, CLASS_TRANSITION);
            }, 0);
          }
        });
      });

      return _this;
    },

    // Exit modal mode (only available in inline mode)
    exit: function () {
      var _this = this;
      var options = _this.options;
      var viewer = _this.viewer;
      var image = _this.image;
      var list = _this.list;

      if (!_this.isFulled) {
        return _this;
      }

      _this.isFulled = false;
      _this.close();
      removeClass(_this.button, CLASS_FULLSCREEN_EXIT);

      if (options.transition) {
        removeClass(image, CLASS_TRANSITION);
        removeClass(list, CLASS_TRANSITION);
      }

      removeClass(viewer, CLASS_FIXED);
      setStyle(viewer, {
        zIndex: options.zIndexInline
      });

      _this.viewerData = extend({}, _this.parentData);
      _this.renderViewer();
      _this.renderList();
      _this.initImage(function () {
        _this.renderImage(function () {
          if (options.transition) {
            setTimeout(function () {
              addClass(image, CLASS_TRANSITION);
              addClass(list, CLASS_TRANSITION);
            }, 0);
          }
        });
      });

      return _this;
    },

    // Show the current ratio of the image with percentage
    tooltip: function () {
      var _this = this;
      var options = _this.options;
      var tooltipBox = _this.tooltipBox;
      var imageData = _this.imageData;

      if (!_this.isViewed || _this.isPlayed || !options.tooltip) {
        return _this;
      }

      setText(tooltipBox, round(imageData.ratio * 100) + '%');

      if (!_this.tooltiping) {
        if (options.transition) {
          if (_this.fading) {
            dispatchEvent(tooltipBox, EVENT_TRANSITIONEND);
          }

          addClass(tooltipBox, CLASS_SHOW);
          addClass(tooltipBox, CLASS_FADE);
          addClass(tooltipBox, CLASS_TRANSITION);
          forceReflow(tooltipBox);
          addClass(tooltipBox, CLASS_IN);
        } else {
          addClass(tooltipBox, CLASS_SHOW);
        }
      } else {
        clearTimeout(_this.tooltiping);
      }

      _this.tooltiping = setTimeout(function () {
        if (options.transition) {
          addListener(tooltipBox, EVENT_TRANSITIONEND, function () {
            removeClass(tooltipBox, CLASS_SHOW);
            removeClass(tooltipBox, CLASS_FADE);
            removeClass(tooltipBox, CLASS_TRANSITION);
            _this.fading = false;
          }, true);

          removeClass(tooltipBox, CLASS_IN);
          _this.fading = true;
        } else {
          removeClass(tooltipBox, CLASS_SHOW);
        }

        _this.tooltiping = false;
      }, 1000);

      return _this;
    },

    // Toggle the image size between its natural size and initial size
    toggle: function () {
      var _this = this;

      if (_this.imageData.ratio === 1) {
        _this.zoomTo(_this.initialImageData.ratio, true);
      } else {
        _this.zoomTo(1, true);
      }

      return _this;
    },

    // Reset the image to its initial state
    reset: function () {
      var _this = this;

      if (_this.isViewed && !_this.isPlayed) {
        _this.imageData = extend({}, _this.initialImageData);
        _this.renderImage();
      }

      return _this;
    },

    // Update viewer when images changed
    update: function () {
      var _this = this;
      var indexes = [];
      var index;

      // Destroy viewer if the target image was deleted
      if (_this.isImg && !_this.element.parentNode) {
        return _this.destroy();
      }

      _this.length = _this.images.length;

      if (_this.isBuilt) {
        each(_this.items, function (item, i) {
          var img = getByTag(item, 'img')[0];
          var image = _this.images[i];

          if (image) {
            if (image.src !== img.src) {
              indexes.push(i);
            }
          } else {
            indexes.push(i);
          }
        });

        setStyle(_this.list, {
          width: 'auto'
        });

        _this.initList();

        if (_this.isShown) {
          if (_this.length) {
            if (_this.isViewed) {
              index = inArray(_this.index, indexes);

              if (index >= 0) {
                _this.isViewed = false;
                _this.view(max(_this.index - (index + 1), 0));
              } else {
                addClass(_this.items[_this.index], CLASS_ACTIVE);
              }
            }
          } else {
            _this.image = null;
            _this.isViewed = false;
            _this.index = 0;
            _this.imageData = null;
            empty(_this.canvas);
            empty(_this.title);
          }
        }
      }

      return _this;
    },

    // Destroy the viewer
    destroy: function () {
      var _this = this;
      var element = _this.element;

      if (_this.options.inline) {
        _this.unbind();
      } else {
        if (_this.isShown) {
          _this.unbind();
        }

        removeListener(element, EVENT_CLICK, _this._start);
      }

      _this.unbuild();
      removeData(element, NAMESPACE);

      return _this;
    },

    open: function () {
      var body = this.body;

      addClass(body, CLASS_OPEN);
      body.style.paddingRight = this.scrollbarWidth + 'px';
    },

    close: function () {
      var body = this.body;

      removeClass(body, CLASS_OPEN);
      body.style.paddingRight = 0;
    },

    shown: function () {
      var _this = this;
      var options = _this.options;
      var element = _this.element;

      _this.transitioning = false;
      _this.isFulled = true;
      _this.isShown = true;
      _this.isVisible = true;
      _this.render();
      _this.bind();

      if (isFunction(options.shown)) {
        addListener(element, EVENT_SHOWN, options.shown, true);
      }

      dispatchEvent(element, EVENT_SHOWN);
    },

    hidden: function () {
      var _this = this;
      var options = _this.options;
      var element = _this.element;

      _this.transitioning = false;
      _this.isViewed = false;
      _this.isFulled = false;
      _this.isShown = false;
      _this.isVisible = false;
      _this.unbind();
      _this.close();
      addClass(_this.viewer, CLASS_HIDE);
      _this.resetList();
      _this.resetImage();

      if (isFunction(options.hidden)) {
        addListener(element, EVENT_HIDDEN, options.hidden, true);
      }

      dispatchEvent(element, EVENT_HIDDEN);
    },

    requestFullscreen: function () {
      var _this = this;
      var documentElement = document.documentElement;

      if (_this.isFulled && !document.fullscreenElement && !document.mozFullScreenElement &&
        !document.webkitFullscreenElement && !document.msFullscreenElement) {

        if (documentElement.requestFullscreen) {
          documentElement.requestFullscreen();
        } else if (documentElement.msRequestFullscreen) {
          documentElement.msRequestFullscreen();
        } else if (documentElement.mozRequestFullScreen) {
          documentElement.mozRequestFullScreen();
        } else if (documentElement.webkitRequestFullscreen) {
          documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        }
      }
    },

    exitFullscreen: function () {
      var _this = this;

      if (_this.isFulled) {
        if (document.exitFullscreen) {
          document.exitFullscreen();
        } else if (document.msExitFullscreen) {
          document.msExitFullscreen();
        } else if (document.mozCancelFullScreen) {
          document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
          document.webkitExitFullscreen();
        }
      }
    },

    change: function (e) {
      var _this = this;
      var pointers = _this.pointers;
      var pointer = pointers[Object.keys(pointers)[0]];
      var offsetX = pointer.endX - pointer.startX;
      var offsetY = pointer.endY - pointer.startY;

      switch (_this.action) {

        // Move the current image
        case 'move':
          _this.move(offsetX, offsetY);
          break;

        // Zoom the current image
        case 'zoom':
          _this.zoom(getMaxZoomRatio(pointers), false, e);
          break;

        case 'switch':
          _this.action = 'switched';

          if (abs(offsetX) > abs(offsetY)) {
            if (offsetX > 1) {
              _this.prev();
            } else if (offsetX < -1) {
              _this.next();
            }
          }

          break;

        // No default
      }

      // Override
      each(pointers, function (p) {
        p.startX = p.endX;
        p.startY = p.endY;
      });
    },

    isSwitchable: function () {
      var _this = this;
      var imageData = _this.imageData;
      var viewerData = _this.viewerData;

      return _this.length > 1 && imageData.left >= 0 && imageData.top >= 0 &&
        imageData.width <= viewerData.width &&
        imageData.height <= viewerData.height;
    }
  };

  Viewer.DEFAULTS = {

    // Enable inline mode
    inline: false,

    // Show the button on the top-right of the viewer
    button: true,

    // Show the navbar
    navbar: true,

    // Show the title
    title: true,

    // Show the toolbar
    toolbar: true,

    // Show the tooltip with image ratio (percentage) when zoom in or zoom out
    tooltip: true,

    // Enable to move the image
    movable: true,

    // Enable to zoom the image
    zoomable: true,

    // Enable to rotate the image
    rotatable: true,

    // Enable to scale the image
    scalable: true,

    // Enable CSS3 Transition for some special elements
    transition: true,

    // Enable to request fullscreen when play
    fullscreen: true,

    // Enable keyboard support
    keyboard: true,

    // Define interval of each image when playing
    interval: 5000,

    // Min width of the viewer in inline mode
    minWidth: 200,

    // Min height of the viewer in inline mode
    minHeight: 100,

    // Define the ratio when zoom the image by wheeling mouse
    zoomRatio: 0.1,

    // Define the min ratio of the image when zoom out
    minZoomRatio: 0.01,

    // Define the max ratio of the image when zoom in
    maxZoomRatio: 100,

    // Define the CSS `z-index` value of viewer in modal mode.
    zIndex: 2015,

    // Define the CSS `z-index` value of viewer in inline mode.
    zIndexInline: 0,

    // Define where to get the original image URL for viewing
    // Type: String (an image attribute) or Function (should return an image URL)
    url: 'src',

    // Event shortcuts
    ready: null,
    show: null,
    shown: null,
    hide: null,
    hidden: null,
    view: null,
    viewed: null
  };

  Viewer.TEMPLATE = (
    '<div class="viewer-container">' +
      '<div class="viewer-canvas"></div>' +
      '<div class="viewer-footer">' +
        '<div class="viewer-title"></div>' +
        '<ul class="viewer-toolbar">' +
          '<li class="viewer-zoom-in" data-action="zoom-in"></li>' +
          '<li class="viewer-zoom-out" data-action="zoom-out"></li>' +
          '<li class="viewer-one-to-one" data-action="one-to-one"></li>' +
          '<li class="viewer-reset" data-action="reset"></li>' +
          '<li class="viewer-prev" data-action="prev"></li>' +
          '<li class="viewer-play" data-action="play"></li>' +
          '<li class="viewer-next" data-action="next"></li>' +
          '<li class="viewer-rotate-left" data-action="rotate-left"></li>' +
          '<li class="viewer-rotate-right" data-action="rotate-right"></li>' +
          '<li class="viewer-flip-horizontal" data-action="flip-horizontal"></li>' +
          '<li class="viewer-flip-vertical" data-action="flip-vertical"></li>' +
        '</ul>' +
        '<div class="viewer-navbar">' +
          '<ul class="viewer-list"></ul>' +
        '</div>' +
      '</div>' +
      '<div class="viewer-tooltip"></div>' +
      '<div class="viewer-button" data-action="mix"></div>' +
      '<div class="viewer-player"></div>' +
    '</div>'
  );

  var _Viewer = window.Viewer;

  Viewer.noConflict = function () {
    window.Viewer = _Viewer;
    return Viewer;
  };

  Viewer.setDefaults = function (options) {
    extend(Viewer.DEFAULTS, options);
  };

  if (typeof define === 'function' && define.amd) {
    define('viewer', [], function () {
      return Viewer;
    });
  }

  if (!noGlobal) {
    window.Viewer = Viewer;
  }

  return Viewer;

});

},{}]},{},["/Users/Gavin/Documents/codes/pack/sil/app/app.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
